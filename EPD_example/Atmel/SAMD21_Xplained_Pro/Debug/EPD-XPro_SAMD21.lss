
EPD-XPro_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009328  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000014  20000000  00009328  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013c  20000014  0000933c  00018014  2**2
                  ALLOC
  3 .stack        00002000  20000150  00009478  00018014  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018014  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001803c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e56b  00000000  00000000  00018097  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026fe  00000000  00000000  00036602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000301c  00000000  00000000  00038d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008b0  00000000  00000000  0003bd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007a0  00000000  00000000  0003c5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005a73  00000000  00000000  0003cd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d931  00000000  00000000  000427df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008edb5  00000000  00000000  00050110  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e78  00000000  00000000  000deec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
       0:	20002150 	.word	0x20002150
       4:	000056f1 	.word	0x000056f1
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
       8:	000057e1 	.word	0x000057e1
       c:	000057e1 	.word	0x000057e1
	...
      2c:	000057e1 	.word	0x000057e1
	...
      38:	000057e1 	.word	0x000057e1
      3c:	000057e1 	.word	0x000057e1
      40:	000057e1 	.word	0x000057e1
      44:	000057e1 	.word	0x000057e1
      48:	000057e1 	.word	0x000057e1
      4c:	000057e1 	.word	0x000057e1
      50:	000057e1 	.word	0x000057e1
      54:	000057e1 	.word	0x000057e1
      58:	000057e1 	.word	0x000057e1
      5c:	000057e1 	.word	0x000057e1
      60:	000057e1 	.word	0x000057e1
      64:	000057e1 	.word	0x000057e1
      68:	000057e1 	.word	0x000057e1
      6c:	000057e1 	.word	0x000057e1
      70:	000057e1 	.word	0x000057e1
      74:	000057e1 	.word	0x000057e1
      78:	000057e1 	.word	0x000057e1
      7c:	000057e1 	.word	0x000057e1
      80:	000057e1 	.word	0x000057e1
      84:	000057e1 	.word	0x000057e1
      88:	00003d99 	.word	0x00003d99
      8c:	00003dad 	.word	0x00003dad
      90:	00003dc1 	.word	0x00003dc1
      94:	00003dd5 	.word	0x00003dd5
      98:	00003de9 	.word	0x00003de9
      9c:	00003301 	.word	0x00003301
      a0:	000057e1 	.word	0x000057e1
      a4:	000057e1 	.word	0x000057e1
      a8:	000057e1 	.word	0x000057e1
      ac:	000057e1 	.word	0x000057e1

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000014 	.word	0x20000014
      d0:	00000000 	.word	0x00000000
      d4:	00009328 	.word	0x00009328

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00009328 	.word	0x00009328
     104:	20000018 	.word	0x20000018
     108:	00009328 	.word	0x00009328
     10c:	00000000 	.word	0x00000000

00000110 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
     116:	6078      	str	r0, [r7, #4]
	return pin >> 5;
     118:	687b      	ldr	r3, [r7, #4]
     11a:	095b      	lsrs	r3, r3, #5
}
     11c:	1c18      	adds	r0, r3, #0
     11e:	46bd      	mov	sp, r7
     120:	b002      	add	sp, #8
     122:	bd80      	pop	{r7, pc}

00000124 <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
     124:	b580      	push	{r7, lr}
     126:	b082      	sub	sp, #8
     128:	af00      	add	r7, sp, #0
     12a:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
     12c:	687b      	ldr	r3, [r7, #4]
     12e:	01db      	lsls	r3, r3, #7
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <arch_ioport_port_to_base+0x18>)
     132:	189b      	adds	r3, r3, r2
}
     134:	1c18      	adds	r0, r3, #0
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	41004400 	.word	0x41004400

00000140 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
     140:	b580      	push	{r7, lr}
     142:	b082      	sub	sp, #8
     144:	af00      	add	r7, sp, #0
     146:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
     148:	687b      	ldr	r3, [r7, #4]
     14a:	1c18      	adds	r0, r3, #0
     14c:	4b05      	ldr	r3, [pc, #20]	; (164 <arch_ioport_pin_to_base+0x24>)
     14e:	4798      	blx	r3
     150:	1c03      	adds	r3, r0, #0
     152:	1c18      	adds	r0, r3, #0
     154:	4b04      	ldr	r3, [pc, #16]	; (168 <arch_ioport_pin_to_base+0x28>)
     156:	4798      	blx	r3
     158:	1c03      	adds	r3, r0, #0
}
     15a:	1c18      	adds	r0, r3, #0
     15c:	46bd      	mov	sp, r7
     15e:	b002      	add	sp, #8
     160:	bd80      	pop	{r7, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	00000111 	.word	0x00000111
     168:	00000125 	.word	0x00000125

0000016c <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
     16c:	b580      	push	{r7, lr}
     16e:	b082      	sub	sp, #8
     170:	af00      	add	r7, sp, #0
     172:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
     174:	687a      	ldr	r2, [r7, #4]
     176:	231f      	movs	r3, #31
     178:	4013      	ands	r3, r2
     17a:	2201      	movs	r2, #1
     17c:	1c11      	adds	r1, r2, #0
     17e:	4099      	lsls	r1, r3
     180:	1c0b      	adds	r3, r1, #0
}
     182:	1c18      	adds	r0, r3, #0
     184:	46bd      	mov	sp, r7
     186:	b002      	add	sp, #8
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <arch_ioport_set_pin_level>:
	base->PINCFG[arch_ioport_pin_to_port_id(pin)].reg |= PORT_PINCFG_INEN;
}

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
     18c:	b590      	push	{r4, r7, lr}
     18e:	b083      	sub	sp, #12
     190:	af00      	add	r7, sp, #0
     192:	6078      	str	r0, [r7, #4]
     194:	1c0a      	adds	r2, r1, #0
     196:	1cfb      	adds	r3, r7, #3
     198:	701a      	strb	r2, [r3, #0]
	if (level) {
     19a:	1cfb      	adds	r3, r7, #3
     19c:	781b      	ldrb	r3, [r3, #0]
     19e:	2b00      	cmp	r3, #0
     1a0:	d00b      	beq.n	1ba <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
     1a2:	687b      	ldr	r3, [r7, #4]
     1a4:	1c18      	adds	r0, r3, #0
     1a6:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <arch_ioport_set_pin_level+0x4c>)
     1a8:	4798      	blx	r3
     1aa:	1c04      	adds	r4, r0, #0
     1ac:	687b      	ldr	r3, [r7, #4]
     1ae:	1c18      	adds	r0, r3, #0
     1b0:	4b0a      	ldr	r3, [pc, #40]	; (1dc <arch_ioport_set_pin_level+0x50>)
     1b2:	4798      	blx	r3
     1b4:	1c03      	adds	r3, r0, #0
     1b6:	61a3      	str	r3, [r4, #24]
     1b8:	e00a      	b.n	1d0 <arch_ioport_set_pin_level+0x44>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	1c18      	adds	r0, r3, #0
     1be:	4b06      	ldr	r3, [pc, #24]	; (1d8 <arch_ioport_set_pin_level+0x4c>)
     1c0:	4798      	blx	r3
     1c2:	1c04      	adds	r4, r0, #0
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	1c18      	adds	r0, r3, #0
     1c8:	4b04      	ldr	r3, [pc, #16]	; (1dc <arch_ioport_set_pin_level+0x50>)
     1ca:	4798      	blx	r3
     1cc:	1c03      	adds	r3, r0, #0
     1ce:	6163      	str	r3, [r4, #20]
	}
}
     1d0:	46bd      	mov	sp, r7
     1d2:	b003      	add	sp, #12
     1d4:	bd90      	pop	{r4, r7, pc}
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	00000141 	.word	0x00000141
     1dc:	0000016d 	.word	0x0000016d

000001e0 <arch_ioport_get_pin_level>:
	base->OUTSET.reg = mask & level;
	base->OUTCLR.reg = mask & ~level;
}

inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
     1e0:	b590      	push	{r4, r7, lr}
     1e2:	b083      	sub	sp, #12
     1e4:	af00      	add	r7, sp, #0
     1e6:	6078      	str	r0, [r7, #4]
	return arch_ioport_pin_to_base(pin)->IN.reg & arch_ioport_pin_to_mask(pin);
     1e8:	687b      	ldr	r3, [r7, #4]
     1ea:	1c18      	adds	r0, r3, #0
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <arch_ioport_get_pin_level+0x30>)
     1ee:	4798      	blx	r3
     1f0:	1c03      	adds	r3, r0, #0
     1f2:	6a1c      	ldr	r4, [r3, #32]
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	1c18      	adds	r0, r3, #0
     1f8:	4b06      	ldr	r3, [pc, #24]	; (214 <arch_ioport_get_pin_level+0x34>)
     1fa:	4798      	blx	r3
     1fc:	1c03      	adds	r3, r0, #0
     1fe:	4023      	ands	r3, r4
     200:	1e5a      	subs	r2, r3, #1
     202:	4193      	sbcs	r3, r2
     204:	b2db      	uxtb	r3, r3
}
     206:	1c18      	adds	r0, r3, #0
     208:	46bd      	mov	sp, r7
     20a:	b003      	add	sp, #12
     20c:	bd90      	pop	{r4, r7, pc}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	00000141 	.word	0x00000141
     214:	0000016d 	.word	0x0000016d

00000218 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
     218:	b580      	push	{r7, lr}
     21a:	b082      	sub	sp, #8
     21c:	af00      	add	r7, sp, #0
     21e:	6078      	str	r0, [r7, #4]
     220:	1c0a      	adds	r2, r1, #0
     222:	1cfb      	adds	r3, r7, #3
     224:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
     226:	687a      	ldr	r2, [r7, #4]
     228:	1cfb      	adds	r3, r7, #3
     22a:	781b      	ldrb	r3, [r3, #0]
     22c:	1c10      	adds	r0, r2, #0
     22e:	1c19      	adds	r1, r3, #0
     230:	4b02      	ldr	r3, [pc, #8]	; (23c <ioport_set_pin_level+0x24>)
     232:	4798      	blx	r3
}
     234:	46bd      	mov	sp, r7
     236:	b002      	add	sp, #8
     238:	bd80      	pop	{r7, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	0000018d 	.word	0x0000018d

00000240 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
     240:	b580      	push	{r7, lr}
     242:	b082      	sub	sp, #8
     244:	af00      	add	r7, sp, #0
     246:	6078      	str	r0, [r7, #4]
	return arch_ioport_get_pin_level(pin);
     248:	687b      	ldr	r3, [r7, #4]
     24a:	1c18      	adds	r0, r3, #0
     24c:	4b03      	ldr	r3, [pc, #12]	; (25c <ioport_get_pin_level+0x1c>)
     24e:	4798      	blx	r3
     250:	1c03      	adds	r3, r0, #0
}
     252:	1c18      	adds	r0, r3, #0
     254:	46bd      	mov	sp, r7
     256:	b002      	add	sp, #8
     258:	bd80      	pop	{r7, pc}
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	000001e1 	.word	0x000001e1

00000260 <set_temperature_factor>:

/**
 * \brief According to EPD size and temperature to get stage_time
 * \note Refer to COG G2 document Section 5.3 for more details
 */
static void set_temperature_factor(int8_t temperature) {
     260:	b580      	push	{r7, lr}
     262:	b082      	sub	sp, #8
     264:	af00      	add	r7, sp, #0
     266:	1c02      	adds	r2, r0, #0
     268:	1dfb      	adds	r3, r7, #7
     26a:	701a      	strb	r2, [r3, #0]
	if (temperature <= -10) {
     26c:	1dfb      	adds	r3, r7, #7
     26e:	781b      	ldrb	r3, [r3, #0]
     270:	b25b      	sxtb	r3, r3
     272:	1c1a      	adds	r2, r3, #0
     274:	3209      	adds	r2, #9
     276:	da08      	bge.n	28a <set_temperature_factor+0x2a>
		stage_time = temperature_table[cur_EPD_type_index][0];
     278:	4b46      	ldr	r3, [pc, #280]	; (394 <set_temperature_factor+0x134>)
     27a:	781b      	ldrb	r3, [r3, #0]
     27c:	1c1a      	adds	r2, r3, #0
     27e:	4b46      	ldr	r3, [pc, #280]	; (398 <set_temperature_factor+0x138>)
     280:	0112      	lsls	r2, r2, #4
     282:	5ad2      	ldrh	r2, [r2, r3]
     284:	4b45      	ldr	r3, [pc, #276]	; (39c <set_temperature_factor+0x13c>)
     286:	801a      	strh	r2, [r3, #0]
     288:	e081      	b.n	38e <set_temperature_factor+0x12e>
		} else if (-5 >= temperature && temperature > -10) {
     28a:	1dfb      	adds	r3, r7, #7
     28c:	781b      	ldrb	r3, [r3, #0]
     28e:	b25b      	sxtb	r3, r3
     290:	3304      	adds	r3, #4
     292:	da0f      	bge.n	2b4 <set_temperature_factor+0x54>
     294:	1dfb      	adds	r3, r7, #7
     296:	781b      	ldrb	r3, [r3, #0]
     298:	b25b      	sxtb	r3, r3
     29a:	1c1a      	adds	r2, r3, #0
     29c:	3209      	adds	r2, #9
     29e:	db09      	blt.n	2b4 <set_temperature_factor+0x54>
		stage_time = temperature_table[cur_EPD_type_index][1];
     2a0:	4b3c      	ldr	r3, [pc, #240]	; (394 <set_temperature_factor+0x134>)
     2a2:	781b      	ldrb	r3, [r3, #0]
     2a4:	4a3c      	ldr	r2, [pc, #240]	; (398 <set_temperature_factor+0x138>)
     2a6:	011b      	lsls	r3, r3, #4
     2a8:	18d3      	adds	r3, r2, r3
     2aa:	3302      	adds	r3, #2
     2ac:	881a      	ldrh	r2, [r3, #0]
     2ae:	4b3b      	ldr	r3, [pc, #236]	; (39c <set_temperature_factor+0x13c>)
     2b0:	801a      	strh	r2, [r3, #0]
     2b2:	e06c      	b.n	38e <set_temperature_factor+0x12e>
		} else if (5 >= temperature && temperature > -5) {
     2b4:	1dfb      	adds	r3, r7, #7
     2b6:	781b      	ldrb	r3, [r3, #0]
     2b8:	b25b      	sxtb	r3, r3
     2ba:	2b05      	cmp	r3, #5
     2bc:	dc0e      	bgt.n	2dc <set_temperature_factor+0x7c>
     2be:	1dfb      	adds	r3, r7, #7
     2c0:	781b      	ldrb	r3, [r3, #0]
     2c2:	b25b      	sxtb	r3, r3
     2c4:	3304      	adds	r3, #4
     2c6:	db09      	blt.n	2dc <set_temperature_factor+0x7c>
		stage_time = temperature_table[cur_EPD_type_index][2];
     2c8:	4b32      	ldr	r3, [pc, #200]	; (394 <set_temperature_factor+0x134>)
     2ca:	781b      	ldrb	r3, [r3, #0]
     2cc:	4a32      	ldr	r2, [pc, #200]	; (398 <set_temperature_factor+0x138>)
     2ce:	011b      	lsls	r3, r3, #4
     2d0:	18d3      	adds	r3, r2, r3
     2d2:	3304      	adds	r3, #4
     2d4:	881a      	ldrh	r2, [r3, #0]
     2d6:	4b31      	ldr	r3, [pc, #196]	; (39c <set_temperature_factor+0x13c>)
     2d8:	801a      	strh	r2, [r3, #0]
     2da:	e058      	b.n	38e <set_temperature_factor+0x12e>
		} else if (10 >= temperature && temperature > 5) {
     2dc:	1dfb      	adds	r3, r7, #7
     2de:	781b      	ldrb	r3, [r3, #0]
     2e0:	b25b      	sxtb	r3, r3
     2e2:	2b0a      	cmp	r3, #10
     2e4:	dc0e      	bgt.n	304 <set_temperature_factor+0xa4>
     2e6:	1dfb      	adds	r3, r7, #7
     2e8:	781b      	ldrb	r3, [r3, #0]
     2ea:	b25b      	sxtb	r3, r3
     2ec:	2b05      	cmp	r3, #5
     2ee:	dd09      	ble.n	304 <set_temperature_factor+0xa4>
		stage_time = temperature_table[cur_EPD_type_index][3];
     2f0:	4b28      	ldr	r3, [pc, #160]	; (394 <set_temperature_factor+0x134>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	4a28      	ldr	r2, [pc, #160]	; (398 <set_temperature_factor+0x138>)
     2f6:	011b      	lsls	r3, r3, #4
     2f8:	18d3      	adds	r3, r2, r3
     2fa:	3306      	adds	r3, #6
     2fc:	881a      	ldrh	r2, [r3, #0]
     2fe:	4b27      	ldr	r3, [pc, #156]	; (39c <set_temperature_factor+0x13c>)
     300:	801a      	strh	r2, [r3, #0]
     302:	e044      	b.n	38e <set_temperature_factor+0x12e>
		} else if (15 >= temperature && temperature > 10) {
     304:	1dfb      	adds	r3, r7, #7
     306:	781b      	ldrb	r3, [r3, #0]
     308:	b25b      	sxtb	r3, r3
     30a:	2b0f      	cmp	r3, #15
     30c:	dc0e      	bgt.n	32c <set_temperature_factor+0xcc>
     30e:	1dfb      	adds	r3, r7, #7
     310:	781b      	ldrb	r3, [r3, #0]
     312:	b25b      	sxtb	r3, r3
     314:	2b0a      	cmp	r3, #10
     316:	dd09      	ble.n	32c <set_temperature_factor+0xcc>
		stage_time = temperature_table[cur_EPD_type_index][4];
     318:	4b1e      	ldr	r3, [pc, #120]	; (394 <set_temperature_factor+0x134>)
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	4a1e      	ldr	r2, [pc, #120]	; (398 <set_temperature_factor+0x138>)
     31e:	011b      	lsls	r3, r3, #4
     320:	18d3      	adds	r3, r2, r3
     322:	3308      	adds	r3, #8
     324:	881a      	ldrh	r2, [r3, #0]
     326:	4b1d      	ldr	r3, [pc, #116]	; (39c <set_temperature_factor+0x13c>)
     328:	801a      	strh	r2, [r3, #0]
     32a:	e030      	b.n	38e <set_temperature_factor+0x12e>
		} else if (20 >= temperature && temperature > 15) {
     32c:	1dfb      	adds	r3, r7, #7
     32e:	781b      	ldrb	r3, [r3, #0]
     330:	b25b      	sxtb	r3, r3
     332:	2b14      	cmp	r3, #20
     334:	dc0e      	bgt.n	354 <set_temperature_factor+0xf4>
     336:	1dfb      	adds	r3, r7, #7
     338:	781b      	ldrb	r3, [r3, #0]
     33a:	b25b      	sxtb	r3, r3
     33c:	2b0f      	cmp	r3, #15
     33e:	dd09      	ble.n	354 <set_temperature_factor+0xf4>
		stage_time = temperature_table[cur_EPD_type_index][5];
     340:	4b14      	ldr	r3, [pc, #80]	; (394 <set_temperature_factor+0x134>)
     342:	781b      	ldrb	r3, [r3, #0]
     344:	4a14      	ldr	r2, [pc, #80]	; (398 <set_temperature_factor+0x138>)
     346:	011b      	lsls	r3, r3, #4
     348:	18d3      	adds	r3, r2, r3
     34a:	330a      	adds	r3, #10
     34c:	881a      	ldrh	r2, [r3, #0]
     34e:	4b13      	ldr	r3, [pc, #76]	; (39c <set_temperature_factor+0x13c>)
     350:	801a      	strh	r2, [r3, #0]
     352:	e01c      	b.n	38e <set_temperature_factor+0x12e>
		} else if (40 >= temperature && temperature > 20) {
     354:	1dfb      	adds	r3, r7, #7
     356:	781b      	ldrb	r3, [r3, #0]
     358:	b25b      	sxtb	r3, r3
     35a:	2b28      	cmp	r3, #40	; 0x28
     35c:	dc0e      	bgt.n	37c <set_temperature_factor+0x11c>
     35e:	1dfb      	adds	r3, r7, #7
     360:	781b      	ldrb	r3, [r3, #0]
     362:	b25b      	sxtb	r3, r3
     364:	2b14      	cmp	r3, #20
     366:	dd09      	ble.n	37c <set_temperature_factor+0x11c>
		stage_time = temperature_table[cur_EPD_type_index][6];
     368:	4b0a      	ldr	r3, [pc, #40]	; (394 <set_temperature_factor+0x134>)
     36a:	781b      	ldrb	r3, [r3, #0]
     36c:	4a0a      	ldr	r2, [pc, #40]	; (398 <set_temperature_factor+0x138>)
     36e:	011b      	lsls	r3, r3, #4
     370:	18d3      	adds	r3, r2, r3
     372:	330c      	adds	r3, #12
     374:	881a      	ldrh	r2, [r3, #0]
     376:	4b09      	ldr	r3, [pc, #36]	; (39c <set_temperature_factor+0x13c>)
     378:	801a      	strh	r2, [r3, #0]
     37a:	e008      	b.n	38e <set_temperature_factor+0x12e>
	} else stage_time = temperature_table[cur_EPD_type_index][7];
     37c:	4b05      	ldr	r3, [pc, #20]	; (394 <set_temperature_factor+0x134>)
     37e:	781b      	ldrb	r3, [r3, #0]
     380:	4a05      	ldr	r2, [pc, #20]	; (398 <set_temperature_factor+0x138>)
     382:	011b      	lsls	r3, r3, #4
     384:	18d3      	adds	r3, r2, r3
     386:	330e      	adds	r3, #14
     388:	881a      	ldrh	r2, [r3, #0]
     38a:	4b04      	ldr	r3, [pc, #16]	; (39c <set_temperature_factor+0x13c>)
     38c:	801a      	strh	r2, [r3, #0]
}
     38e:	46bd      	mov	sp, r7
     390:	b002      	add	sp, #8
     392:	bd80      	pop	{r7, pc}
     394:	200000bc 	.word	0x200000bc
     398:	000062a4 	.word	0x000062a4
     39c:	20000030 	.word	0x20000030

000003a0 <COG_driver_EPDtype_select>:

/**
 * \brief Select the EPD size to get line data array for driving COG
 *
 */
void COG_driver_EPDtype_select(void) {
     3a0:	b580      	push	{r7, lr}
     3a2:	af00      	add	r7, sp, #0
	switch(cur_EPD_type_index) {
     3a4:	4b27      	ldr	r3, [pc, #156]	; (444 <COG_driver_EPDtype_select+0xa4>)
     3a6:	781b      	ldrb	r3, [r3, #0]
     3a8:	2b04      	cmp	r3, #4
     3aa:	d845      	bhi.n	438 <COG_driver_EPDtype_select+0x98>
     3ac:	009a      	lsls	r2, r3, #2
     3ae:	4b26      	ldr	r3, [pc, #152]	; (448 <COG_driver_EPDtype_select+0xa8>)
     3b0:	18d3      	adds	r3, r2, r3
     3b2:	681b      	ldr	r3, [r3, #0]
     3b4:	469f      	mov	pc, r3
		case EPD_144:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_144.even[0];
     3b6:	4b25      	ldr	r3, [pc, #148]	; (44c <COG_driver_EPDtype_select+0xac>)
     3b8:	4a25      	ldr	r2, [pc, #148]	; (450 <COG_driver_EPDtype_select+0xb0>)
     3ba:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_144.odd[0];
     3bc:	4b25      	ldr	r3, [pc, #148]	; (454 <COG_driver_EPDtype_select+0xb4>)
     3be:	4a26      	ldr	r2, [pc, #152]	; (458 <COG_driver_EPDtype_select+0xb8>)
     3c0:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_144.scan[0];
     3c2:	4b26      	ldr	r3, [pc, #152]	; (45c <COG_driver_EPDtype_select+0xbc>)
     3c4:	4a26      	ldr	r2, [pc, #152]	; (460 <COG_driver_EPDtype_select+0xc0>)
     3c6:	601a      	str	r2, [r3, #0]
		data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_144.border_byte;
     3c8:	4b26      	ldr	r3, [pc, #152]	; (464 <COG_driver_EPDtype_select+0xc4>)
     3ca:	4a27      	ldr	r2, [pc, #156]	; (468 <COG_driver_EPDtype_select+0xc8>)
     3cc:	601a      	str	r2, [r3, #0]
		break;
     3ce:	e033      	b.n	438 <COG_driver_EPDtype_select+0x98>
		case EPD_200:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_200.even[0];
     3d0:	4b1e      	ldr	r3, [pc, #120]	; (44c <COG_driver_EPDtype_select+0xac>)
     3d2:	4a26      	ldr	r2, [pc, #152]	; (46c <COG_driver_EPDtype_select+0xcc>)
     3d4:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_200.odd[0];
     3d6:	4b1f      	ldr	r3, [pc, #124]	; (454 <COG_driver_EPDtype_select+0xb4>)
     3d8:	4a25      	ldr	r2, [pc, #148]	; (470 <COG_driver_EPDtype_select+0xd0>)
     3da:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_200.scan[0];
     3dc:	4b1f      	ldr	r3, [pc, #124]	; (45c <COG_driver_EPDtype_select+0xbc>)
     3de:	4a25      	ldr	r2, [pc, #148]	; (474 <COG_driver_EPDtype_select+0xd4>)
     3e0:	601a      	str	r2, [r3, #0]
		data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_200.dummy_data;
     3e2:	4b20      	ldr	r3, [pc, #128]	; (464 <COG_driver_EPDtype_select+0xc4>)
     3e4:	4a1a      	ldr	r2, [pc, #104]	; (450 <COG_driver_EPDtype_select+0xb0>)
     3e6:	601a      	str	r2, [r3, #0]
		break;
     3e8:	e026      	b.n	438 <COG_driver_EPDtype_select+0x98>
		case EPD_270:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_270.even[0];
     3ea:	4b18      	ldr	r3, [pc, #96]	; (44c <COG_driver_EPDtype_select+0xac>)
     3ec:	4a1f      	ldr	r2, [pc, #124]	; (46c <COG_driver_EPDtype_select+0xcc>)
     3ee:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_270.odd[0];
     3f0:	4b18      	ldr	r3, [pc, #96]	; (454 <COG_driver_EPDtype_select+0xb4>)
     3f2:	4a21      	ldr	r2, [pc, #132]	; (478 <COG_driver_EPDtype_select+0xd8>)
     3f4:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_270.scan[0];
     3f6:	4b19      	ldr	r3, [pc, #100]	; (45c <COG_driver_EPDtype_select+0xbc>)
     3f8:	4a20      	ldr	r2, [pc, #128]	; (47c <COG_driver_EPDtype_select+0xdc>)
     3fa:	601a      	str	r2, [r3, #0]
		data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_270.dummy_data;
     3fc:	4b19      	ldr	r3, [pc, #100]	; (464 <COG_driver_EPDtype_select+0xc4>)
     3fe:	4a14      	ldr	r2, [pc, #80]	; (450 <COG_driver_EPDtype_select+0xb0>)
     400:	601a      	str	r2, [r3, #0]
		break;
     402:	e019      	b.n	438 <COG_driver_EPDtype_select+0x98>
        case EPD_190:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_190.scan_even[0];
     404:	4b11      	ldr	r3, [pc, #68]	; (44c <COG_driver_EPDtype_select+0xac>)
     406:	4a1e      	ldr	r2, [pc, #120]	; (480 <COG_driver_EPDtype_select+0xe0>)
     408:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_190.scan_odd[0];
     40a:	4b12      	ldr	r3, [pc, #72]	; (454 <COG_driver_EPDtype_select+0xb4>)
     40c:	4a10      	ldr	r2, [pc, #64]	; (450 <COG_driver_EPDtype_select+0xb0>)
     40e:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_190.data[0];
     410:	4b12      	ldr	r3, [pc, #72]	; (45c <COG_driver_EPDtype_select+0xbc>)
     412:	4a13      	ldr	r2, [pc, #76]	; (460 <COG_driver_EPDtype_select+0xc0>)
     414:	601a      	str	r2, [r3, #0]
        data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_190.border_byte;
     416:	4b13      	ldr	r3, [pc, #76]	; (464 <COG_driver_EPDtype_select+0xc4>)
     418:	4a1a      	ldr	r2, [pc, #104]	; (484 <COG_driver_EPDtype_select+0xe4>)
     41a:	601a      	str	r2, [r3, #0]
		break;
     41c:	e00c      	b.n	438 <COG_driver_EPDtype_select+0x98>
        case EPD_260:
		data_line_even = &COG_Line.line_data_by_size.line_data_for_260.scan_even[0];
     41e:	4b0b      	ldr	r3, [pc, #44]	; (44c <COG_driver_EPDtype_select+0xac>)
     420:	4a19      	ldr	r2, [pc, #100]	; (488 <COG_driver_EPDtype_select+0xe8>)
     422:	601a      	str	r2, [r3, #0]
		data_line_odd  = &COG_Line.line_data_by_size.line_data_for_260.scan_odd[0];
     424:	4b0b      	ldr	r3, [pc, #44]	; (454 <COG_driver_EPDtype_select+0xb4>)
     426:	4a0a      	ldr	r2, [pc, #40]	; (450 <COG_driver_EPDtype_select+0xb0>)
     428:	601a      	str	r2, [r3, #0]
		data_line_scan = &COG_Line.line_data_by_size.line_data_for_260.data[0];
     42a:	4b0c      	ldr	r3, [pc, #48]	; (45c <COG_driver_EPDtype_select+0xbc>)
     42c:	4a0c      	ldr	r2, [pc, #48]	; (460 <COG_driver_EPDtype_select+0xc0>)
     42e:	601a      	str	r2, [r3, #0]
        data_line_border_byte = &COG_Line.line_data_by_size.line_data_for_260.border_byte;
     430:	4b0c      	ldr	r3, [pc, #48]	; (464 <COG_driver_EPDtype_select+0xc4>)
     432:	4a16      	ldr	r2, [pc, #88]	; (48c <COG_driver_EPDtype_select+0xec>)
     434:	601a      	str	r2, [r3, #0]
		break;
     436:	46c0      	nop			; (mov r8, r8)
	}
    *data_line_border_byte=0x00;
     438:	4b0a      	ldr	r3, [pc, #40]	; (464 <COG_driver_EPDtype_select+0xc4>)
     43a:	681b      	ldr	r3, [r3, #0]
     43c:	2200      	movs	r2, #0
     43e:	701a      	strb	r2, [r3, #0]
}
     440:	46bd      	mov	sp, r7
     442:	bd80      	pop	{r7, pc}
     444:	200000bc 	.word	0x200000bc
     448:	00006344 	.word	0x00006344
     44c:	200000ac 	.word	0x200000ac
     450:	20000034 	.word	0x20000034
     454:	200000b0 	.word	0x200000b0
     458:	2000005c 	.word	0x2000005c
     45c:	200000b4 	.word	0x200000b4
     460:	20000044 	.word	0x20000044
     464:	200000b8 	.word	0x200000b8
     468:	2000006c 	.word	0x2000006c
     46c:	20000035 	.word	0x20000035
     470:	20000066 	.word	0x20000066
     474:	2000004e 	.word	0x2000004e
     478:	20000082 	.word	0x20000082
     47c:	20000056 	.word	0x20000056
     480:	20000068 	.word	0x20000068
     484:	20000078 	.word	0x20000078
     488:	2000007e 	.word	0x2000007e
     48c:	2000008e 	.word	0x2000008e

00000490 <EPD_power_on>:

/**
* \brief Power on COG Driver
* \note For detailed flow and description, please refer to the COG G2 document Section 3.
*/
void EPD_power_on (uint8_t EPD_type_index,int8_t temperature) {
     490:	b580      	push	{r7, lr}
     492:	b082      	sub	sp, #8
     494:	af00      	add	r7, sp, #0
     496:	1c0a      	adds	r2, r1, #0
     498:	1dfb      	adds	r3, r7, #7
     49a:	1c01      	adds	r1, r0, #0
     49c:	7019      	strb	r1, [r3, #0]
     49e:	1dbb      	adds	r3, r7, #6
     4a0:	701a      	strb	r2, [r3, #0]

    cur_EPD_type_index=EPD_type_index;
     4a2:	4b18      	ldr	r3, [pc, #96]	; (504 <EPD_power_on+0x74>)
     4a4:	1dfa      	adds	r2, r7, #7
     4a6:	7812      	ldrb	r2, [r2, #0]
     4a8:	701a      	strb	r2, [r3, #0]
    /* Initial state */
	EPD_Vcc_turn_on();
     4aa:	2023      	movs	r0, #35	; 0x23
     4ac:	2101      	movs	r1, #1
     4ae:	4b16      	ldr	r3, [pc, #88]	; (508 <EPD_power_on+0x78>)
     4b0:	4798      	blx	r3
	epd_spi_attach();
     4b2:	4b16      	ldr	r3, [pc, #88]	; (50c <EPD_power_on+0x7c>)
     4b4:	4798      	blx	r3
	EPD_cs_high();
     4b6:	2005      	movs	r0, #5
     4b8:	2101      	movs	r1, #1
     4ba:	4b13      	ldr	r3, [pc, #76]	; (508 <EPD_power_on+0x78>)
     4bc:	4798      	blx	r3
	EPD_border_high();
     4be:	2021      	movs	r0, #33	; 0x21
     4c0:	2101      	movs	r1, #1
     4c2:	4b11      	ldr	r3, [pc, #68]	; (508 <EPD_power_on+0x78>)
     4c4:	4798      	blx	r3
	EPD_rst_high();
     4c6:	2027      	movs	r0, #39	; 0x27
     4c8:	2101      	movs	r1, #1
     4ca:	4b0f      	ldr	r3, [pc, #60]	; (508 <EPD_power_on+0x78>)
     4cc:	4798      	blx	r3
	delay_ms(5);
     4ce:	2005      	movs	r0, #5
     4d0:	4b0f      	ldr	r3, [pc, #60]	; (510 <EPD_power_on+0x80>)
     4d2:	4798      	blx	r3
	EPD_rst_low();
     4d4:	2027      	movs	r0, #39	; 0x27
     4d6:	2100      	movs	r1, #0
     4d8:	4b0b      	ldr	r3, [pc, #44]	; (508 <EPD_power_on+0x78>)
     4da:	4798      	blx	r3
	delay_ms(5);
     4dc:	2005      	movs	r0, #5
     4de:	4b0c      	ldr	r3, [pc, #48]	; (510 <EPD_power_on+0x80>)
     4e0:	4798      	blx	r3
	EPD_rst_high();
     4e2:	2027      	movs	r0, #39	; 0x27
     4e4:	2101      	movs	r1, #1
     4e6:	4b08      	ldr	r3, [pc, #32]	; (508 <EPD_power_on+0x78>)
     4e8:	4798      	blx	r3
	delay_ms(5);
     4ea:	2005      	movs	r0, #5
     4ec:	4b08      	ldr	r3, [pc, #32]	; (510 <EPD_power_on+0x80>)
     4ee:	4798      	blx	r3
	// Sense temperature to determine Temperature Factor
	set_temperature_factor(temperature);
     4f0:	1dbb      	adds	r3, r7, #6
     4f2:	781b      	ldrb	r3, [r3, #0]
     4f4:	b25b      	sxtb	r3, r3
     4f6:	1c18      	adds	r0, r3, #0
     4f8:	4b06      	ldr	r3, [pc, #24]	; (514 <EPD_power_on+0x84>)
     4fa:	4798      	blx	r3
}
     4fc:	46bd      	mov	sp, r7
     4fe:	b002      	add	sp, #8
     500:	bd80      	pop	{r7, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	200000bc 	.word	0x200000bc
     508:	00000219 	.word	0x00000219
     50c:	00002361 	.word	0x00002361
     510:	000048c5 	.word	0x000048c5
     514:	00000261 	.word	0x00000261

00000518 <EPD_initialize_driver>:

/**
 * \brief Initialize COG Driver
 * \note For detailed flow and description, please refer to the COG G2 document Section 4.
 */
uint8_t EPD_initialize_driver (void) {
     518:	b580      	push	{r7, lr}
     51a:	b082      	sub	sp, #8
     51c:	af00      	add	r7, sp, #0
		uint16_t i;
	// Empty the Line buffer
	for (i = 0; i <= LINE_BUFFER_DATA_SIZE; i ++) {
     51e:	1dbb      	adds	r3, r7, #6
     520:	2200      	movs	r2, #0
     522:	801a      	strh	r2, [r3, #0]
     524:	e009      	b.n	53a <EPD_initialize_driver+0x22>
		COG_Line.uint8[i] = 0x00;
     526:	1dbb      	adds	r3, r7, #6
     528:	881b      	ldrh	r3, [r3, #0]
     52a:	4a51      	ldr	r2, [pc, #324]	; (670 <EPD_initialize_driver+0x158>)
     52c:	2100      	movs	r1, #0
     52e:	54d1      	strb	r1, [r2, r3]
 * \note For detailed flow and description, please refer to the COG G2 document Section 4.
 */
uint8_t EPD_initialize_driver (void) {
		uint16_t i;
	// Empty the Line buffer
	for (i = 0; i <= LINE_BUFFER_DATA_SIZE; i ++) {
     530:	1dbb      	adds	r3, r7, #6
     532:	881a      	ldrh	r2, [r3, #0]
     534:	1dbb      	adds	r3, r7, #6
     536:	3201      	adds	r2, #1
     538:	801a      	strh	r2, [r3, #0]
     53a:	1dbb      	adds	r3, r7, #6
     53c:	881b      	ldrh	r3, [r3, #0]
     53e:	2b6f      	cmp	r3, #111	; 0x6f
     540:	d9f1      	bls.n	526 <EPD_initialize_driver+0xe>
		COG_Line.uint8[i] = 0x00;
	}
	// Determine the EPD size for driving COG
	COG_driver_EPDtype_select();
     542:	4b4c      	ldr	r3, [pc, #304]	; (674 <EPD_initialize_driver+0x15c>)
     544:	4798      	blx	r3
	
	i = 0;
     546:	1dbb      	adds	r3, r7, #6
     548:	2200      	movs	r2, #0
     54a:	801a      	strh	r2, [r3, #0]

	while (EPD_IsBusy()) {
     54c:	e009      	b.n	562 <EPD_initialize_driver+0x4a>
		if((i++) >= 0x0FFF) return ERROR_BUSY;
     54e:	1dbb      	adds	r3, r7, #6
     550:	881b      	ldrh	r3, [r3, #0]
     552:	1dba      	adds	r2, r7, #6
     554:	1c59      	adds	r1, r3, #1
     556:	8011      	strh	r1, [r2, #0]
     558:	4a47      	ldr	r2, [pc, #284]	; (678 <EPD_initialize_driver+0x160>)
     55a:	4293      	cmp	r3, r2
     55c:	d901      	bls.n	562 <EPD_initialize_driver+0x4a>
     55e:	23f0      	movs	r3, #240	; 0xf0
     560:	e081      	b.n	666 <EPD_initialize_driver+0x14e>
	// Determine the EPD size for driving COG
	COG_driver_EPDtype_select();
	
	i = 0;

	while (EPD_IsBusy()) {
     562:	2024      	movs	r0, #36	; 0x24
     564:	4b45      	ldr	r3, [pc, #276]	; (67c <EPD_initialize_driver+0x164>)
     566:	4798      	blx	r3
     568:	1c03      	adds	r3, r0, #0
     56a:	2b00      	cmp	r3, #0
     56c:	d1ef      	bne.n	54e <EPD_initialize_driver+0x36>
		if((i++) >= 0x0FFF) return ERROR_BUSY;
	}

	//Check COG ID
	if((SPI_R(0x72,0x00) & 0x0f) !=0x02) return ERROR_COG_ID;
     56e:	2072      	movs	r0, #114	; 0x72
     570:	2100      	movs	r1, #0
     572:	4b43      	ldr	r3, [pc, #268]	; (680 <EPD_initialize_driver+0x168>)
     574:	4798      	blx	r3
     576:	1c03      	adds	r3, r0, #0
     578:	1c1a      	adds	r2, r3, #0
     57a:	230f      	movs	r3, #15
     57c:	4013      	ands	r3, r2
     57e:	2b02      	cmp	r3, #2
     580:	d001      	beq.n	586 <EPD_initialize_driver+0x6e>
     582:	23f1      	movs	r3, #241	; 0xf1
     584:	e06f      	b.n	666 <EPD_initialize_driver+0x14e>

	//Disable OE
	epd_spi_send_byte(0x02,0x40);
     586:	2002      	movs	r0, #2
     588:	2140      	movs	r1, #64	; 0x40
     58a:	4b3e      	ldr	r3, [pc, #248]	; (684 <EPD_initialize_driver+0x16c>)
     58c:	4798      	blx	r3

	//Check Breakage
	if((SPI_R(0x0F,0x00) & 0x80) != 0x80) return ERROR_BREAKAGE;
     58e:	200f      	movs	r0, #15
     590:	2100      	movs	r1, #0
     592:	4b3b      	ldr	r3, [pc, #236]	; (680 <EPD_initialize_driver+0x168>)
     594:	4798      	blx	r3
     596:	1c03      	adds	r3, r0, #0
     598:	b2db      	uxtb	r3, r3
     59a:	b25b      	sxtb	r3, r3
     59c:	2b00      	cmp	r3, #0
     59e:	db01      	blt.n	5a4 <EPD_initialize_driver+0x8c>
     5a0:	23f2      	movs	r3, #242	; 0xf2
     5a2:	e060      	b.n	666 <EPD_initialize_driver+0x14e>

	//Power Saving Mode
 	epd_spi_send_byte(0x0B, 0x02);
     5a4:	200b      	movs	r0, #11
     5a6:	2102      	movs	r1, #2
     5a8:	4b36      	ldr	r3, [pc, #216]	; (684 <EPD_initialize_driver+0x16c>)
     5aa:	4798      	blx	r3

	//Channel Select
	epd_spi_send (0x01, (uint8_t *)&COG_parameters[cur_EPD_type_index].channel_select, 8);
     5ac:	4b36      	ldr	r3, [pc, #216]	; (688 <EPD_initialize_driver+0x170>)
     5ae:	781b      	ldrb	r3, [r3, #0]
     5b0:	1c1a      	adds	r2, r3, #0
     5b2:	1c13      	adds	r3, r2, #0
     5b4:	009b      	lsls	r3, r3, #2
     5b6:	189b      	adds	r3, r3, r2
     5b8:	009b      	lsls	r3, r3, #2
     5ba:	4a34      	ldr	r2, [pc, #208]	; (68c <EPD_initialize_driver+0x174>)
     5bc:	189b      	adds	r3, r3, r2
     5be:	2001      	movs	r0, #1
     5c0:	1c19      	adds	r1, r3, #0
     5c2:	2208      	movs	r2, #8
     5c4:	4b32      	ldr	r3, [pc, #200]	; (690 <EPD_initialize_driver+0x178>)
     5c6:	4798      	blx	r3

	//High Power Mode Osc Setting
	epd_spi_send_byte(0x07,0xD1);
     5c8:	2007      	movs	r0, #7
     5ca:	21d1      	movs	r1, #209	; 0xd1
     5cc:	4b2d      	ldr	r3, [pc, #180]	; (684 <EPD_initialize_driver+0x16c>)
     5ce:	4798      	blx	r3

	//Power Setting
	epd_spi_send_byte(0x08,0x02);
     5d0:	2008      	movs	r0, #8
     5d2:	2102      	movs	r1, #2
     5d4:	4b2b      	ldr	r3, [pc, #172]	; (684 <EPD_initialize_driver+0x16c>)
     5d6:	4798      	blx	r3

	//Set Vcom level
	epd_spi_send_byte(0x09,0xC2);
     5d8:	2009      	movs	r0, #9
     5da:	21c2      	movs	r1, #194	; 0xc2
     5dc:	4b29      	ldr	r3, [pc, #164]	; (684 <EPD_initialize_driver+0x16c>)
     5de:	4798      	blx	r3

	//Power Setting
	epd_spi_send_byte(0x04,0x03);
     5e0:	2004      	movs	r0, #4
     5e2:	2103      	movs	r1, #3
     5e4:	4b27      	ldr	r3, [pc, #156]	; (684 <EPD_initialize_driver+0x16c>)
     5e6:	4798      	blx	r3

	//Driver latch on
	epd_spi_send_byte(0x03,0x01);
     5e8:	2003      	movs	r0, #3
     5ea:	2101      	movs	r1, #1
     5ec:	4b25      	ldr	r3, [pc, #148]	; (684 <EPD_initialize_driver+0x16c>)
     5ee:	4798      	blx	r3

	//Driver latch off
	epd_spi_send_byte(0x03,0x00);
     5f0:	2003      	movs	r0, #3
     5f2:	2100      	movs	r1, #0
     5f4:	4b23      	ldr	r3, [pc, #140]	; (684 <EPD_initialize_driver+0x16c>)
     5f6:	4798      	blx	r3

	delay_ms(5);
     5f8:	2005      	movs	r0, #5
     5fa:	4b26      	ldr	r3, [pc, #152]	; (694 <EPD_initialize_driver+0x17c>)
     5fc:	4798      	blx	r3

	//Chargepump Start
	i=0;
     5fe:	1dbb      	adds	r3, r7, #6
     600:	2200      	movs	r2, #0
     602:	801a      	strh	r2, [r3, #0]
	do {
		//Start chargepump positive V
		//VGH & VDH on
		epd_spi_send_byte(0x05,0x01);
     604:	2005      	movs	r0, #5
     606:	2101      	movs	r1, #1
     608:	4b1e      	ldr	r3, [pc, #120]	; (684 <EPD_initialize_driver+0x16c>)
     60a:	4798      	blx	r3

		delay_ms(240);
     60c:	20f0      	movs	r0, #240	; 0xf0
     60e:	4b21      	ldr	r3, [pc, #132]	; (694 <EPD_initialize_driver+0x17c>)
     610:	4798      	blx	r3

		//Start chargepump neg voltage
		//VGL & VDL on
		epd_spi_send_byte(0x05,0x03);
     612:	2005      	movs	r0, #5
     614:	2103      	movs	r1, #3
     616:	4b1b      	ldr	r3, [pc, #108]	; (684 <EPD_initialize_driver+0x16c>)
     618:	4798      	blx	r3

		delay_ms(40);
     61a:	2028      	movs	r0, #40	; 0x28
     61c:	4b1d      	ldr	r3, [pc, #116]	; (694 <EPD_initialize_driver+0x17c>)
     61e:	4798      	blx	r3

		//Set chargepump
		//Vcom_Driver to ON
		//Vcom_Driver on
		epd_spi_send_byte(0x05,0x0F);
     620:	2005      	movs	r0, #5
     622:	210f      	movs	r1, #15
     624:	4b17      	ldr	r3, [pc, #92]	; (684 <EPD_initialize_driver+0x16c>)
     626:	4798      	blx	r3

		delay_ms(40);
     628:	2028      	movs	r0, #40	; 0x28
     62a:	4b1a      	ldr	r3, [pc, #104]	; (694 <EPD_initialize_driver+0x17c>)
     62c:	4798      	blx	r3

		//Check DC/DC
		if((SPI_R(0x0F,0x00) & 0x40) == 0x40)
     62e:	200f      	movs	r0, #15
     630:	2100      	movs	r1, #0
     632:	4b13      	ldr	r3, [pc, #76]	; (680 <EPD_initialize_driver+0x168>)
     634:	4798      	blx	r3
     636:	1c03      	adds	r3, r0, #0
     638:	1c1a      	adds	r2, r3, #0
     63a:	2340      	movs	r3, #64	; 0x40
     63c:	4013      	ands	r3, r2
     63e:	d004      	beq.n	64a <EPD_initialize_driver+0x132>
		{
			//Output enable to disable
			epd_spi_send_byte(0x02,0x04);
     640:	2002      	movs	r0, #2
     642:	2104      	movs	r1, #4
     644:	4b0f      	ldr	r3, [pc, #60]	; (684 <EPD_initialize_driver+0x16c>)
     646:	4798      	blx	r3
			break;
     648:	e006      	b.n	658 <EPD_initialize_driver+0x140>
		}

	}while((i++) != 4);
     64a:	1dbb      	adds	r3, r7, #6
     64c:	881b      	ldrh	r3, [r3, #0]
     64e:	1dba      	adds	r2, r7, #6
     650:	1c59      	adds	r1, r3, #1
     652:	8011      	strh	r1, [r2, #0]
     654:	2b04      	cmp	r3, #4
     656:	d1d5      	bne.n	604 <EPD_initialize_driver+0xec>

	if(i>=4) 
     658:	1dbb      	adds	r3, r7, #6
     65a:	881b      	ldrh	r3, [r3, #0]
     65c:	2b03      	cmp	r3, #3
     65e:	d901      	bls.n	664 <EPD_initialize_driver+0x14c>
		return ERROR_CHARGEPUMP;
     660:	23f4      	movs	r3, #244	; 0xf4
     662:	e000      	b.n	666 <EPD_initialize_driver+0x14e>
	else 
		return RES_OK;
     664:	2300      	movs	r3, #0
}
     666:	1c18      	adds	r0, r3, #0
     668:	46bd      	mov	sp, r7
     66a:	b002      	add	sp, #8
     66c:	bd80      	pop	{r7, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	20000034 	.word	0x20000034
     674:	000003a1 	.word	0x000003a1
     678:	00000ffe 	.word	0x00000ffe
     67c:	00000241 	.word	0x00000241
     680:	00002459 	.word	0x00002459
     684:	00002589 	.word	0x00002589
     688:	200000bc 	.word	0x200000bc
     68c:	00006240 	.word	0x00006240
     690:	000024f9 	.word	0x000024f9
     694:	000048c5 	.word	0x000048c5

00000698 <stage_handle_array>:
 * - For more details on the driving stages, please refer to the COG G2 document Section 5.
 *
 * \param image_ptr The pointer of memory that stores image that will send to COG
 * \param stage_no The assigned stage number that will proceed
 */
static void stage_handle_array(uint8_t *image_prt,long image_data_address,uint8_t stage_no) {
     698:	b590      	push	{r4, r7, lr}
     69a:	b093      	sub	sp, #76	; 0x4c
     69c:	af00      	add	r7, sp, #0
     69e:	60f8      	str	r0, [r7, #12]
     6a0:	60b9      	str	r1, [r7, #8]
     6a2:	1dfb      	adds	r3, r7, #7
     6a4:	701a      	strb	r2, [r3, #0]
	/* x for horizontal_size loop, y for vertical_size loop, which are EPD pixel size */
	uint16_t x,y,k;
	int16_t scanline_no=0;
     6a6:	1c3b      	adds	r3, r7, #0
     6a8:	3340      	adds	r3, #64	; 0x40
     6aa:	2200      	movs	r2, #0
     6ac:	801a      	strh	r2, [r3, #0]
	uint8_t	temp_byte; // Temporary storage for image data check
	uint8_t *backup_image_prt; // Backup image address pointer
	long original_image_address;
    uint8_t byte_array[COG_line_Max_Size];
	original_image_address=image_data_address;
     6ae:	68bb      	ldr	r3, [r7, #8]
     6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	backup_image_prt = image_prt;
     6b2:	68fb      	ldr	r3, [r7, #12]
     6b4:	63bb      	str	r3, [r7, #56]	; 0x38
	current_frame_time =0;
     6b6:	4bc5      	ldr	r3, [pc, #788]	; (9cc <stage_handle_array+0x334>)
     6b8:	2200      	movs	r2, #0
     6ba:	801a      	strh	r2, [r3, #0]
	/* Start a system SysTick timer to ensure the same duration of each stage  */
	start_EPD_timer();
     6bc:	4bc4      	ldr	r3, [pc, #784]	; (9d0 <stage_handle_array+0x338>)
     6be:	4798      	blx	r3

	/* Do while total time of frames exceed stage time
	* Per frame */
	do {
		image_prt=backup_image_prt;
     6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     6c2:	60fb      	str	r3, [r7, #12]
        image_data_address=original_image_address;
     6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     6c6:	60bb      	str	r3, [r7, #8]
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {			
     6c8:	1c3b      	adds	r3, r7, #0
     6ca:	3344      	adds	r3, #68	; 0x44
     6cc:	2200      	movs	r2, #0
     6ce:	801a      	strh	r2, [r3, #0]
     6d0:	f000 fbec 	bl	eac <stage_handle_array+0x814>
			k = COG_parameters[cur_EPD_type_index].horizontal_size-1;
     6d4:	4bbf      	ldr	r3, [pc, #764]	; (9d4 <stage_handle_array+0x33c>)
     6d6:	781b      	ldrb	r3, [r3, #0]
     6d8:	1c1a      	adds	r2, r3, #0
     6da:	49bf      	ldr	r1, [pc, #764]	; (9d8 <stage_handle_array+0x340>)
     6dc:	1c13      	adds	r3, r2, #0
     6de:	009b      	lsls	r3, r3, #2
     6e0:	189b      	adds	r3, r3, r2
     6e2:	009b      	lsls	r3, r3, #2
     6e4:	18cb      	adds	r3, r1, r3
     6e6:	3308      	adds	r3, #8
     6e8:	885a      	ldrh	r2, [r3, #2]
     6ea:	1c3b      	adds	r3, r7, #0
     6ec:	3342      	adds	r3, #66	; 0x42
     6ee:	3a01      	subs	r2, #1
     6f0:	801a      	strh	r2, [r3, #0]
            if(_On_EPD_read_flash!=NULL) {
     6f2:	4bba      	ldr	r3, [pc, #744]	; (9dc <stage_handle_array+0x344>)
     6f4:	681b      	ldr	r3, [r3, #0]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d017      	beq.n	72a <stage_handle_array+0x92>
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
     6fa:	4bb8      	ldr	r3, [pc, #736]	; (9dc <stage_handle_array+0x344>)
     6fc:	681c      	ldr	r4, [r3, #0]
				COG_parameters[cur_EPD_type_index].horizontal_size);
     6fe:	4bb5      	ldr	r3, [pc, #724]	; (9d4 <stage_handle_array+0x33c>)
     700:	781b      	ldrb	r3, [r3, #0]
     702:	1c1a      	adds	r2, r3, #0
     704:	49b4      	ldr	r1, [pc, #720]	; (9d8 <stage_handle_array+0x340>)
     706:	1c13      	adds	r3, r2, #0
     708:	009b      	lsls	r3, r3, #2
     70a:	189b      	adds	r3, r3, r2
     70c:	009b      	lsls	r3, r3, #2
     70e:	18cb      	adds	r3, r1, r3
     710:	3308      	adds	r3, #8
     712:	885b      	ldrh	r3, [r3, #2]
        image_data_address=original_image_address;
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {			
			k = COG_parameters[cur_EPD_type_index].horizontal_size-1;
            if(_On_EPD_read_flash!=NULL) {
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
     714:	b2db      	uxtb	r3, r3
     716:	68b9      	ldr	r1, [r7, #8]
     718:	1c3a      	adds	r2, r7, #0
     71a:	3214      	adds	r2, #20
     71c:	1c08      	adds	r0, r1, #0
     71e:	1c11      	adds	r1, r2, #0
     720:	1c1a      	adds	r2, r3, #0
     722:	47a0      	blx	r4
				COG_parameters[cur_EPD_type_index].horizontal_size);
                image_prt=&byte_array[0];
     724:	1c3b      	adds	r3, r7, #0
     726:	3314      	adds	r3, #20
     728:	60fb      	str	r3, [r7, #12]
			}
			for (x = 0; x < COG_parameters[cur_EPD_type_index].horizontal_size; x++) {
     72a:	1c3b      	adds	r3, r7, #0
     72c:	3346      	adds	r3, #70	; 0x46
     72e:	2200      	movs	r2, #0
     730:	801a      	strh	r2, [r3, #0]
     732:	f000 fb44 	bl	dbe <stage_handle_array+0x726>
				temp_byte =*image_prt++;
     736:	68fb      	ldr	r3, [r7, #12]
     738:	1c5a      	adds	r2, r3, #1
     73a:	60fa      	str	r2, [r7, #12]
     73c:	1c3a      	adds	r2, r7, #0
     73e:	3237      	adds	r2, #55	; 0x37
     740:	781b      	ldrb	r3, [r3, #0]
     742:	7013      	strb	r3, [r2, #0]
				switch(stage_no) {
     744:	1dfb      	adds	r3, r7, #7
     746:	781b      	ldrb	r3, [r3, #0]
     748:	2b01      	cmp	r3, #1
     74a:	d100      	bne.n	74e <stage_handle_array+0xb6>
     74c:	e0cf      	b.n	8ee <stage_handle_array+0x256>
     74e:	dc02      	bgt.n	756 <stage_handle_array+0xbe>
     750:	2b00      	cmp	r3, #0
     752:	d007      	beq.n	764 <stage_handle_array+0xcc>
     754:	e32c      	b.n	db0 <stage_handle_array+0x718>
     756:	2b02      	cmp	r3, #2
     758:	d100      	bne.n	75c <stage_handle_array+0xc4>
     75a:	e19b      	b.n	a94 <stage_handle_array+0x3fc>
     75c:	2b03      	cmp	r3, #3
     75e:	d100      	bne.n	762 <stage_handle_array+0xca>
     760:	e25d      	b.n	c1e <stage_handle_array+0x586>
     762:	e325      	b.n	db0 <stage_handle_array+0x718>
					case Stage1: // Compensate, Inverse previous image
					data_line_odd[x]     = ((temp_byte & 0x40) ? BLACK3  : WHITE3);
     764:	4b9e      	ldr	r3, [pc, #632]	; (9e0 <stage_handle_array+0x348>)
     766:	681a      	ldr	r2, [r3, #0]
     768:	1c3b      	adds	r3, r7, #0
     76a:	3346      	adds	r3, #70	; 0x46
     76c:	881b      	ldrh	r3, [r3, #0]
     76e:	18d2      	adds	r2, r2, r3
     770:	1c3b      	adds	r3, r7, #0
     772:	3337      	adds	r3, #55	; 0x37
     774:	7819      	ldrb	r1, [r3, #0]
     776:	2340      	movs	r3, #64	; 0x40
     778:	400b      	ands	r3, r1
     77a:	d001      	beq.n	780 <stage_handle_array+0xe8>
     77c:	23c0      	movs	r3, #192	; 0xc0
     77e:	e000      	b.n	782 <stage_handle_array+0xea>
     780:	2380      	movs	r3, #128	; 0x80
     782:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x10) ? BLACK2  : WHITE2);
     784:	4b96      	ldr	r3, [pc, #600]	; (9e0 <stage_handle_array+0x348>)
     786:	681a      	ldr	r2, [r3, #0]
     788:	1c3b      	adds	r3, r7, #0
     78a:	3346      	adds	r3, #70	; 0x46
     78c:	881b      	ldrh	r3, [r3, #0]
     78e:	18d2      	adds	r2, r2, r3
     790:	4b93      	ldr	r3, [pc, #588]	; (9e0 <stage_handle_array+0x348>)
     792:	6819      	ldr	r1, [r3, #0]
     794:	1c3b      	adds	r3, r7, #0
     796:	3346      	adds	r3, #70	; 0x46
     798:	881b      	ldrh	r3, [r3, #0]
     79a:	18cb      	adds	r3, r1, r3
     79c:	781b      	ldrb	r3, [r3, #0]
     79e:	b2d9      	uxtb	r1, r3
     7a0:	1c3b      	adds	r3, r7, #0
     7a2:	3337      	adds	r3, #55	; 0x37
     7a4:	7818      	ldrb	r0, [r3, #0]
     7a6:	2310      	movs	r3, #16
     7a8:	4003      	ands	r3, r0
     7aa:	d001      	beq.n	7b0 <stage_handle_array+0x118>
     7ac:	2330      	movs	r3, #48	; 0x30
     7ae:	e000      	b.n	7b2 <stage_handle_array+0x11a>
     7b0:	2320      	movs	r3, #32
     7b2:	430b      	orrs	r3, r1
     7b4:	b2db      	uxtb	r3, r3
     7b6:	b2db      	uxtb	r3, r3
     7b8:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x04) ? BLACK1  : WHITE1);
     7ba:	4b89      	ldr	r3, [pc, #548]	; (9e0 <stage_handle_array+0x348>)
     7bc:	681a      	ldr	r2, [r3, #0]
     7be:	1c3b      	adds	r3, r7, #0
     7c0:	3346      	adds	r3, #70	; 0x46
     7c2:	881b      	ldrh	r3, [r3, #0]
     7c4:	18d2      	adds	r2, r2, r3
     7c6:	4b86      	ldr	r3, [pc, #536]	; (9e0 <stage_handle_array+0x348>)
     7c8:	6819      	ldr	r1, [r3, #0]
     7ca:	1c3b      	adds	r3, r7, #0
     7cc:	3346      	adds	r3, #70	; 0x46
     7ce:	881b      	ldrh	r3, [r3, #0]
     7d0:	18cb      	adds	r3, r1, r3
     7d2:	781b      	ldrb	r3, [r3, #0]
     7d4:	b2d9      	uxtb	r1, r3
     7d6:	1c3b      	adds	r3, r7, #0
     7d8:	3337      	adds	r3, #55	; 0x37
     7da:	7818      	ldrb	r0, [r3, #0]
     7dc:	2304      	movs	r3, #4
     7de:	4003      	ands	r3, r0
     7e0:	d001      	beq.n	7e6 <stage_handle_array+0x14e>
     7e2:	230c      	movs	r3, #12
     7e4:	e000      	b.n	7e8 <stage_handle_array+0x150>
     7e6:	2308      	movs	r3, #8
     7e8:	430b      	orrs	r3, r1
     7ea:	b2db      	uxtb	r3, r3
     7ec:	b2db      	uxtb	r3, r3
     7ee:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x01) ? BLACK0  : WHITE0);
     7f0:	4b7b      	ldr	r3, [pc, #492]	; (9e0 <stage_handle_array+0x348>)
     7f2:	681a      	ldr	r2, [r3, #0]
     7f4:	1c3b      	adds	r3, r7, #0
     7f6:	3346      	adds	r3, #70	; 0x46
     7f8:	881b      	ldrh	r3, [r3, #0]
     7fa:	18d2      	adds	r2, r2, r3
     7fc:	4b78      	ldr	r3, [pc, #480]	; (9e0 <stage_handle_array+0x348>)
     7fe:	6819      	ldr	r1, [r3, #0]
     800:	1c3b      	adds	r3, r7, #0
     802:	3346      	adds	r3, #70	; 0x46
     804:	881b      	ldrh	r3, [r3, #0]
     806:	18cb      	adds	r3, r1, r3
     808:	781b      	ldrb	r3, [r3, #0]
     80a:	b2d9      	uxtb	r1, r3
     80c:	1c3b      	adds	r3, r7, #0
     80e:	3337      	adds	r3, #55	; 0x37
     810:	7818      	ldrb	r0, [r3, #0]
     812:	2301      	movs	r3, #1
     814:	4003      	ands	r3, r0
     816:	d001      	beq.n	81c <stage_handle_array+0x184>
     818:	2303      	movs	r3, #3
     81a:	e000      	b.n	81e <stage_handle_array+0x186>
     81c:	2302      	movs	r3, #2
     81e:	430b      	orrs	r3, r1
     820:	b2db      	uxtb	r3, r3
     822:	b2db      	uxtb	r3, r3
     824:	7013      	strb	r3, [r2, #0]

					data_line_even[k]    = ((temp_byte & 0x80) ? BLACK0  : WHITE0);
     826:	4b6f      	ldr	r3, [pc, #444]	; (9e4 <stage_handle_array+0x34c>)
     828:	681a      	ldr	r2, [r3, #0]
     82a:	1c3b      	adds	r3, r7, #0
     82c:	3342      	adds	r3, #66	; 0x42
     82e:	881b      	ldrh	r3, [r3, #0]
     830:	18d2      	adds	r2, r2, r3
     832:	1c3b      	adds	r3, r7, #0
     834:	3337      	adds	r3, #55	; 0x37
     836:	781b      	ldrb	r3, [r3, #0]
     838:	b25b      	sxtb	r3, r3
     83a:	2b00      	cmp	r3, #0
     83c:	da01      	bge.n	842 <stage_handle_array+0x1aa>
     83e:	2303      	movs	r3, #3
     840:	e000      	b.n	844 <stage_handle_array+0x1ac>
     842:	2302      	movs	r3, #2
     844:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x20) ? BLACK1  : WHITE1);
     846:	4b67      	ldr	r3, [pc, #412]	; (9e4 <stage_handle_array+0x34c>)
     848:	681a      	ldr	r2, [r3, #0]
     84a:	1c3b      	adds	r3, r7, #0
     84c:	3342      	adds	r3, #66	; 0x42
     84e:	881b      	ldrh	r3, [r3, #0]
     850:	18d2      	adds	r2, r2, r3
     852:	4b64      	ldr	r3, [pc, #400]	; (9e4 <stage_handle_array+0x34c>)
     854:	6819      	ldr	r1, [r3, #0]
     856:	1c3b      	adds	r3, r7, #0
     858:	3342      	adds	r3, #66	; 0x42
     85a:	881b      	ldrh	r3, [r3, #0]
     85c:	18cb      	adds	r3, r1, r3
     85e:	781b      	ldrb	r3, [r3, #0]
     860:	b2d9      	uxtb	r1, r3
     862:	1c3b      	adds	r3, r7, #0
     864:	3337      	adds	r3, #55	; 0x37
     866:	7818      	ldrb	r0, [r3, #0]
     868:	2320      	movs	r3, #32
     86a:	4003      	ands	r3, r0
     86c:	d001      	beq.n	872 <stage_handle_array+0x1da>
     86e:	230c      	movs	r3, #12
     870:	e000      	b.n	874 <stage_handle_array+0x1dc>
     872:	2308      	movs	r3, #8
     874:	430b      	orrs	r3, r1
     876:	b2db      	uxtb	r3, r3
     878:	b2db      	uxtb	r3, r3
     87a:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x08) ? BLACK2  : WHITE2);
     87c:	4b59      	ldr	r3, [pc, #356]	; (9e4 <stage_handle_array+0x34c>)
     87e:	681a      	ldr	r2, [r3, #0]
     880:	1c3b      	adds	r3, r7, #0
     882:	3342      	adds	r3, #66	; 0x42
     884:	881b      	ldrh	r3, [r3, #0]
     886:	18d2      	adds	r2, r2, r3
     888:	4b56      	ldr	r3, [pc, #344]	; (9e4 <stage_handle_array+0x34c>)
     88a:	6819      	ldr	r1, [r3, #0]
     88c:	1c3b      	adds	r3, r7, #0
     88e:	3342      	adds	r3, #66	; 0x42
     890:	881b      	ldrh	r3, [r3, #0]
     892:	18cb      	adds	r3, r1, r3
     894:	781b      	ldrb	r3, [r3, #0]
     896:	b2d9      	uxtb	r1, r3
     898:	1c3b      	adds	r3, r7, #0
     89a:	3337      	adds	r3, #55	; 0x37
     89c:	7818      	ldrb	r0, [r3, #0]
     89e:	2308      	movs	r3, #8
     8a0:	4003      	ands	r3, r0
     8a2:	d001      	beq.n	8a8 <stage_handle_array+0x210>
     8a4:	2330      	movs	r3, #48	; 0x30
     8a6:	e000      	b.n	8aa <stage_handle_array+0x212>
     8a8:	2320      	movs	r3, #32
     8aa:	430b      	orrs	r3, r1
     8ac:	b2db      	uxtb	r3, r3
     8ae:	b2db      	uxtb	r3, r3
     8b0:	7013      	strb	r3, [r2, #0]
					data_line_even[k--] |= ((temp_byte & 0x02) ? BLACK3  : WHITE3);
     8b2:	4b4c      	ldr	r3, [pc, #304]	; (9e4 <stage_handle_array+0x34c>)
     8b4:	6819      	ldr	r1, [r3, #0]
     8b6:	1c3b      	adds	r3, r7, #0
     8b8:	3342      	adds	r3, #66	; 0x42
     8ba:	881b      	ldrh	r3, [r3, #0]
     8bc:	1c3a      	adds	r2, r7, #0
     8be:	3242      	adds	r2, #66	; 0x42
     8c0:	1e58      	subs	r0, r3, #1
     8c2:	8010      	strh	r0, [r2, #0]
     8c4:	1c1a      	adds	r2, r3, #0
     8c6:	1889      	adds	r1, r1, r2
     8c8:	4a46      	ldr	r2, [pc, #280]	; (9e4 <stage_handle_array+0x34c>)
     8ca:	6812      	ldr	r2, [r2, #0]
     8cc:	18d3      	adds	r3, r2, r3
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	b2da      	uxtb	r2, r3
     8d2:	1c3b      	adds	r3, r7, #0
     8d4:	3337      	adds	r3, #55	; 0x37
     8d6:	7818      	ldrb	r0, [r3, #0]
     8d8:	2302      	movs	r3, #2
     8da:	4003      	ands	r3, r0
     8dc:	d001      	beq.n	8e2 <stage_handle_array+0x24a>
     8de:	23c0      	movs	r3, #192	; 0xc0
     8e0:	e000      	b.n	8e4 <stage_handle_array+0x24c>
     8e2:	2380      	movs	r3, #128	; 0x80
     8e4:	4313      	orrs	r3, r2
     8e6:	b2db      	uxtb	r3, r3
     8e8:	b2db      	uxtb	r3, r3
     8ea:	700b      	strb	r3, [r1, #0]
						break;
     8ec:	e260      	b.n	db0 <stage_handle_array+0x718>
					case Stage2: // White
					data_line_odd[x]     = ((temp_byte & 0x40) ?  WHITE3 : NOTHING3);
     8ee:	4b3c      	ldr	r3, [pc, #240]	; (9e0 <stage_handle_array+0x348>)
     8f0:	681a      	ldr	r2, [r3, #0]
     8f2:	1c3b      	adds	r3, r7, #0
     8f4:	3346      	adds	r3, #70	; 0x46
     8f6:	881b      	ldrh	r3, [r3, #0]
     8f8:	18d2      	adds	r2, r2, r3
     8fa:	1c3b      	adds	r3, r7, #0
     8fc:	3337      	adds	r3, #55	; 0x37
     8fe:	7819      	ldrb	r1, [r3, #0]
     900:	2340      	movs	r3, #64	; 0x40
     902:	400b      	ands	r3, r1
     904:	d001      	beq.n	90a <stage_handle_array+0x272>
     906:	2380      	movs	r3, #128	; 0x80
     908:	e000      	b.n	90c <stage_handle_array+0x274>
     90a:	2300      	movs	r3, #0
     90c:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x10) ?  WHITE2 : NOTHING2);
     90e:	4b34      	ldr	r3, [pc, #208]	; (9e0 <stage_handle_array+0x348>)
     910:	681a      	ldr	r2, [r3, #0]
     912:	1c3b      	adds	r3, r7, #0
     914:	3346      	adds	r3, #70	; 0x46
     916:	881b      	ldrh	r3, [r3, #0]
     918:	18d2      	adds	r2, r2, r3
     91a:	4b31      	ldr	r3, [pc, #196]	; (9e0 <stage_handle_array+0x348>)
     91c:	6819      	ldr	r1, [r3, #0]
     91e:	1c3b      	adds	r3, r7, #0
     920:	3346      	adds	r3, #70	; 0x46
     922:	881b      	ldrh	r3, [r3, #0]
     924:	18cb      	adds	r3, r1, r3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	b2d9      	uxtb	r1, r3
     92a:	1c3b      	adds	r3, r7, #0
     92c:	3337      	adds	r3, #55	; 0x37
     92e:	7818      	ldrb	r0, [r3, #0]
     930:	2310      	movs	r3, #16
     932:	4003      	ands	r3, r0
     934:	d001      	beq.n	93a <stage_handle_array+0x2a2>
     936:	2320      	movs	r3, #32
     938:	e000      	b.n	93c <stage_handle_array+0x2a4>
     93a:	2300      	movs	r3, #0
     93c:	430b      	orrs	r3, r1
     93e:	b2db      	uxtb	r3, r3
     940:	b2db      	uxtb	r3, r3
     942:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x04) ?  WHITE1 : NOTHING1);
     944:	4b26      	ldr	r3, [pc, #152]	; (9e0 <stage_handle_array+0x348>)
     946:	681a      	ldr	r2, [r3, #0]
     948:	1c3b      	adds	r3, r7, #0
     94a:	3346      	adds	r3, #70	; 0x46
     94c:	881b      	ldrh	r3, [r3, #0]
     94e:	18d2      	adds	r2, r2, r3
     950:	4b23      	ldr	r3, [pc, #140]	; (9e0 <stage_handle_array+0x348>)
     952:	6819      	ldr	r1, [r3, #0]
     954:	1c3b      	adds	r3, r7, #0
     956:	3346      	adds	r3, #70	; 0x46
     958:	881b      	ldrh	r3, [r3, #0]
     95a:	18cb      	adds	r3, r1, r3
     95c:	781b      	ldrb	r3, [r3, #0]
     95e:	b2d9      	uxtb	r1, r3
     960:	1c3b      	adds	r3, r7, #0
     962:	3337      	adds	r3, #55	; 0x37
     964:	7818      	ldrb	r0, [r3, #0]
     966:	2304      	movs	r3, #4
     968:	4003      	ands	r3, r0
     96a:	d001      	beq.n	970 <stage_handle_array+0x2d8>
     96c:	2308      	movs	r3, #8
     96e:	e000      	b.n	972 <stage_handle_array+0x2da>
     970:	2300      	movs	r3, #0
     972:	430b      	orrs	r3, r1
     974:	b2db      	uxtb	r3, r3
     976:	b2db      	uxtb	r3, r3
     978:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x01) ?  WHITE0 : NOTHING0);
     97a:	4b19      	ldr	r3, [pc, #100]	; (9e0 <stage_handle_array+0x348>)
     97c:	681a      	ldr	r2, [r3, #0]
     97e:	1c3b      	adds	r3, r7, #0
     980:	3346      	adds	r3, #70	; 0x46
     982:	881b      	ldrh	r3, [r3, #0]
     984:	18d2      	adds	r2, r2, r3
     986:	4b16      	ldr	r3, [pc, #88]	; (9e0 <stage_handle_array+0x348>)
     988:	6819      	ldr	r1, [r3, #0]
     98a:	1c3b      	adds	r3, r7, #0
     98c:	3346      	adds	r3, #70	; 0x46
     98e:	881b      	ldrh	r3, [r3, #0]
     990:	18cb      	adds	r3, r1, r3
     992:	781b      	ldrb	r3, [r3, #0]
     994:	b2d9      	uxtb	r1, r3
     996:	1c3b      	adds	r3, r7, #0
     998:	3337      	adds	r3, #55	; 0x37
     99a:	7818      	ldrb	r0, [r3, #0]
     99c:	2301      	movs	r3, #1
     99e:	4003      	ands	r3, r0
     9a0:	d001      	beq.n	9a6 <stage_handle_array+0x30e>
     9a2:	2302      	movs	r3, #2
     9a4:	e000      	b.n	9a8 <stage_handle_array+0x310>
     9a6:	2300      	movs	r3, #0
     9a8:	430b      	orrs	r3, r1
     9aa:	b2db      	uxtb	r3, r3
     9ac:	b2db      	uxtb	r3, r3
     9ae:	7013      	strb	r3, [r2, #0]

					data_line_even[k]    = ((temp_byte & 0x80) ?  WHITE0 : NOTHING0);
     9b0:	4b0c      	ldr	r3, [pc, #48]	; (9e4 <stage_handle_array+0x34c>)
     9b2:	681a      	ldr	r2, [r3, #0]
     9b4:	1c3b      	adds	r3, r7, #0
     9b6:	3342      	adds	r3, #66	; 0x42
     9b8:	881b      	ldrh	r3, [r3, #0]
     9ba:	18d2      	adds	r2, r2, r3
     9bc:	1c3b      	adds	r3, r7, #0
     9be:	3337      	adds	r3, #55	; 0x37
     9c0:	781b      	ldrb	r3, [r3, #0]
     9c2:	b25b      	sxtb	r3, r3
     9c4:	2b00      	cmp	r3, #0
     9c6:	da0f      	bge.n	9e8 <stage_handle_array+0x350>
     9c8:	2302      	movs	r3, #2
     9ca:	e00e      	b.n	9ea <stage_handle_array+0x352>
     9cc:	200000a8 	.word	0x200000a8
     9d0:	000021e5 	.word	0x000021e5
     9d4:	200000bc 	.word	0x200000bc
     9d8:	00006240 	.word	0x00006240
     9dc:	200000a4 	.word	0x200000a4
     9e0:	200000b0 	.word	0x200000b0
     9e4:	200000ac 	.word	0x200000ac
     9e8:	2300      	movs	r3, #0
     9ea:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x20) ?  WHITE1 : NOTHING1);
     9ec:	4bc3      	ldr	r3, [pc, #780]	; (cfc <stage_handle_array+0x664>)
     9ee:	681a      	ldr	r2, [r3, #0]
     9f0:	1c3b      	adds	r3, r7, #0
     9f2:	3342      	adds	r3, #66	; 0x42
     9f4:	881b      	ldrh	r3, [r3, #0]
     9f6:	18d2      	adds	r2, r2, r3
     9f8:	4bc0      	ldr	r3, [pc, #768]	; (cfc <stage_handle_array+0x664>)
     9fa:	6819      	ldr	r1, [r3, #0]
     9fc:	1c3b      	adds	r3, r7, #0
     9fe:	3342      	adds	r3, #66	; 0x42
     a00:	881b      	ldrh	r3, [r3, #0]
     a02:	18cb      	adds	r3, r1, r3
     a04:	781b      	ldrb	r3, [r3, #0]
     a06:	b2d9      	uxtb	r1, r3
     a08:	1c3b      	adds	r3, r7, #0
     a0a:	3337      	adds	r3, #55	; 0x37
     a0c:	7818      	ldrb	r0, [r3, #0]
     a0e:	2320      	movs	r3, #32
     a10:	4003      	ands	r3, r0
     a12:	d001      	beq.n	a18 <stage_handle_array+0x380>
     a14:	2308      	movs	r3, #8
     a16:	e000      	b.n	a1a <stage_handle_array+0x382>
     a18:	2300      	movs	r3, #0
     a1a:	430b      	orrs	r3, r1
     a1c:	b2db      	uxtb	r3, r3
     a1e:	b2db      	uxtb	r3, r3
     a20:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x08) ?  WHITE2 : NOTHING2);
     a22:	4bb6      	ldr	r3, [pc, #728]	; (cfc <stage_handle_array+0x664>)
     a24:	681a      	ldr	r2, [r3, #0]
     a26:	1c3b      	adds	r3, r7, #0
     a28:	3342      	adds	r3, #66	; 0x42
     a2a:	881b      	ldrh	r3, [r3, #0]
     a2c:	18d2      	adds	r2, r2, r3
     a2e:	4bb3      	ldr	r3, [pc, #716]	; (cfc <stage_handle_array+0x664>)
     a30:	6819      	ldr	r1, [r3, #0]
     a32:	1c3b      	adds	r3, r7, #0
     a34:	3342      	adds	r3, #66	; 0x42
     a36:	881b      	ldrh	r3, [r3, #0]
     a38:	18cb      	adds	r3, r1, r3
     a3a:	781b      	ldrb	r3, [r3, #0]
     a3c:	b2d9      	uxtb	r1, r3
     a3e:	1c3b      	adds	r3, r7, #0
     a40:	3337      	adds	r3, #55	; 0x37
     a42:	7818      	ldrb	r0, [r3, #0]
     a44:	2308      	movs	r3, #8
     a46:	4003      	ands	r3, r0
     a48:	d001      	beq.n	a4e <stage_handle_array+0x3b6>
     a4a:	2320      	movs	r3, #32
     a4c:	e000      	b.n	a50 <stage_handle_array+0x3b8>
     a4e:	2300      	movs	r3, #0
     a50:	430b      	orrs	r3, r1
     a52:	b2db      	uxtb	r3, r3
     a54:	b2db      	uxtb	r3, r3
     a56:	7013      	strb	r3, [r2, #0]
					data_line_even[k--] |= ((temp_byte & 0x02) ?  WHITE3 : NOTHING3);
     a58:	4ba8      	ldr	r3, [pc, #672]	; (cfc <stage_handle_array+0x664>)
     a5a:	6819      	ldr	r1, [r3, #0]
     a5c:	1c3b      	adds	r3, r7, #0
     a5e:	3342      	adds	r3, #66	; 0x42
     a60:	881b      	ldrh	r3, [r3, #0]
     a62:	1c3a      	adds	r2, r7, #0
     a64:	3242      	adds	r2, #66	; 0x42
     a66:	1e58      	subs	r0, r3, #1
     a68:	8010      	strh	r0, [r2, #0]
     a6a:	1c1a      	adds	r2, r3, #0
     a6c:	1889      	adds	r1, r1, r2
     a6e:	4aa3      	ldr	r2, [pc, #652]	; (cfc <stage_handle_array+0x664>)
     a70:	6812      	ldr	r2, [r2, #0]
     a72:	18d3      	adds	r3, r2, r3
     a74:	781b      	ldrb	r3, [r3, #0]
     a76:	b2da      	uxtb	r2, r3
     a78:	1c3b      	adds	r3, r7, #0
     a7a:	3337      	adds	r3, #55	; 0x37
     a7c:	7818      	ldrb	r0, [r3, #0]
     a7e:	2302      	movs	r3, #2
     a80:	4003      	ands	r3, r0
     a82:	d001      	beq.n	a88 <stage_handle_array+0x3f0>
     a84:	2380      	movs	r3, #128	; 0x80
     a86:	e000      	b.n	a8a <stage_handle_array+0x3f2>
     a88:	2300      	movs	r3, #0
     a8a:	4313      	orrs	r3, r2
     a8c:	b2db      	uxtb	r3, r3
     a8e:	b2db      	uxtb	r3, r3
     a90:	700b      	strb	r3, [r1, #0]
						break;
     a92:	e18d      	b.n	db0 <stage_handle_array+0x718>
					case Stage3: // Inverse new image
					data_line_odd[x]     = ((temp_byte & 0x40) ? BLACK3  : NOTHING3);
     a94:	4b9a      	ldr	r3, [pc, #616]	; (d00 <stage_handle_array+0x668>)
     a96:	681a      	ldr	r2, [r3, #0]
     a98:	1c3b      	adds	r3, r7, #0
     a9a:	3346      	adds	r3, #70	; 0x46
     a9c:	881b      	ldrh	r3, [r3, #0]
     a9e:	18d2      	adds	r2, r2, r3
     aa0:	1c3b      	adds	r3, r7, #0
     aa2:	3337      	adds	r3, #55	; 0x37
     aa4:	7819      	ldrb	r1, [r3, #0]
     aa6:	2340      	movs	r3, #64	; 0x40
     aa8:	400b      	ands	r3, r1
     aaa:	d001      	beq.n	ab0 <stage_handle_array+0x418>
     aac:	23c0      	movs	r3, #192	; 0xc0
     aae:	e000      	b.n	ab2 <stage_handle_array+0x41a>
     ab0:	2300      	movs	r3, #0
     ab2:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x10) ? BLACK2  : NOTHING2);
     ab4:	4b92      	ldr	r3, [pc, #584]	; (d00 <stage_handle_array+0x668>)
     ab6:	681a      	ldr	r2, [r3, #0]
     ab8:	1c3b      	adds	r3, r7, #0
     aba:	3346      	adds	r3, #70	; 0x46
     abc:	881b      	ldrh	r3, [r3, #0]
     abe:	18d2      	adds	r2, r2, r3
     ac0:	4b8f      	ldr	r3, [pc, #572]	; (d00 <stage_handle_array+0x668>)
     ac2:	6819      	ldr	r1, [r3, #0]
     ac4:	1c3b      	adds	r3, r7, #0
     ac6:	3346      	adds	r3, #70	; 0x46
     ac8:	881b      	ldrh	r3, [r3, #0]
     aca:	18cb      	adds	r3, r1, r3
     acc:	781b      	ldrb	r3, [r3, #0]
     ace:	b2d9      	uxtb	r1, r3
     ad0:	1c3b      	adds	r3, r7, #0
     ad2:	3337      	adds	r3, #55	; 0x37
     ad4:	7818      	ldrb	r0, [r3, #0]
     ad6:	2310      	movs	r3, #16
     ad8:	4003      	ands	r3, r0
     ada:	d001      	beq.n	ae0 <stage_handle_array+0x448>
     adc:	2330      	movs	r3, #48	; 0x30
     ade:	e000      	b.n	ae2 <stage_handle_array+0x44a>
     ae0:	2300      	movs	r3, #0
     ae2:	430b      	orrs	r3, r1
     ae4:	b2db      	uxtb	r3, r3
     ae6:	b2db      	uxtb	r3, r3
     ae8:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x04) ? BLACK1  : NOTHING1);
     aea:	4b85      	ldr	r3, [pc, #532]	; (d00 <stage_handle_array+0x668>)
     aec:	681a      	ldr	r2, [r3, #0]
     aee:	1c3b      	adds	r3, r7, #0
     af0:	3346      	adds	r3, #70	; 0x46
     af2:	881b      	ldrh	r3, [r3, #0]
     af4:	18d2      	adds	r2, r2, r3
     af6:	4b82      	ldr	r3, [pc, #520]	; (d00 <stage_handle_array+0x668>)
     af8:	6819      	ldr	r1, [r3, #0]
     afa:	1c3b      	adds	r3, r7, #0
     afc:	3346      	adds	r3, #70	; 0x46
     afe:	881b      	ldrh	r3, [r3, #0]
     b00:	18cb      	adds	r3, r1, r3
     b02:	781b      	ldrb	r3, [r3, #0]
     b04:	b2d9      	uxtb	r1, r3
     b06:	1c3b      	adds	r3, r7, #0
     b08:	3337      	adds	r3, #55	; 0x37
     b0a:	7818      	ldrb	r0, [r3, #0]
     b0c:	2304      	movs	r3, #4
     b0e:	4003      	ands	r3, r0
     b10:	d001      	beq.n	b16 <stage_handle_array+0x47e>
     b12:	230c      	movs	r3, #12
     b14:	e000      	b.n	b18 <stage_handle_array+0x480>
     b16:	2300      	movs	r3, #0
     b18:	430b      	orrs	r3, r1
     b1a:	b2db      	uxtb	r3, r3
     b1c:	b2db      	uxtb	r3, r3
     b1e:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x01) ? BLACK0  : NOTHING0);
     b20:	4b77      	ldr	r3, [pc, #476]	; (d00 <stage_handle_array+0x668>)
     b22:	681a      	ldr	r2, [r3, #0]
     b24:	1c3b      	adds	r3, r7, #0
     b26:	3346      	adds	r3, #70	; 0x46
     b28:	881b      	ldrh	r3, [r3, #0]
     b2a:	18d2      	adds	r2, r2, r3
     b2c:	4b74      	ldr	r3, [pc, #464]	; (d00 <stage_handle_array+0x668>)
     b2e:	6819      	ldr	r1, [r3, #0]
     b30:	1c3b      	adds	r3, r7, #0
     b32:	3346      	adds	r3, #70	; 0x46
     b34:	881b      	ldrh	r3, [r3, #0]
     b36:	18cb      	adds	r3, r1, r3
     b38:	781b      	ldrb	r3, [r3, #0]
     b3a:	b2d9      	uxtb	r1, r3
     b3c:	1c3b      	adds	r3, r7, #0
     b3e:	3337      	adds	r3, #55	; 0x37
     b40:	7818      	ldrb	r0, [r3, #0]
     b42:	2301      	movs	r3, #1
     b44:	4003      	ands	r3, r0
     b46:	d001      	beq.n	b4c <stage_handle_array+0x4b4>
     b48:	2303      	movs	r3, #3
     b4a:	e000      	b.n	b4e <stage_handle_array+0x4b6>
     b4c:	2300      	movs	r3, #0
     b4e:	430b      	orrs	r3, r1
     b50:	b2db      	uxtb	r3, r3
     b52:	b2db      	uxtb	r3, r3
     b54:	7013      	strb	r3, [r2, #0]

					data_line_even[k]    = ((temp_byte & 0x80) ? BLACK0  : NOTHING0);
     b56:	4b69      	ldr	r3, [pc, #420]	; (cfc <stage_handle_array+0x664>)
     b58:	681a      	ldr	r2, [r3, #0]
     b5a:	1c3b      	adds	r3, r7, #0
     b5c:	3342      	adds	r3, #66	; 0x42
     b5e:	881b      	ldrh	r3, [r3, #0]
     b60:	18d2      	adds	r2, r2, r3
     b62:	1c3b      	adds	r3, r7, #0
     b64:	3337      	adds	r3, #55	; 0x37
     b66:	781b      	ldrb	r3, [r3, #0]
     b68:	b25b      	sxtb	r3, r3
     b6a:	2b00      	cmp	r3, #0
     b6c:	da01      	bge.n	b72 <stage_handle_array+0x4da>
     b6e:	2303      	movs	r3, #3
     b70:	e000      	b.n	b74 <stage_handle_array+0x4dc>
     b72:	2300      	movs	r3, #0
     b74:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x20) ? BLACK1  : NOTHING1);
     b76:	4b61      	ldr	r3, [pc, #388]	; (cfc <stage_handle_array+0x664>)
     b78:	681a      	ldr	r2, [r3, #0]
     b7a:	1c3b      	adds	r3, r7, #0
     b7c:	3342      	adds	r3, #66	; 0x42
     b7e:	881b      	ldrh	r3, [r3, #0]
     b80:	18d2      	adds	r2, r2, r3
     b82:	4b5e      	ldr	r3, [pc, #376]	; (cfc <stage_handle_array+0x664>)
     b84:	6819      	ldr	r1, [r3, #0]
     b86:	1c3b      	adds	r3, r7, #0
     b88:	3342      	adds	r3, #66	; 0x42
     b8a:	881b      	ldrh	r3, [r3, #0]
     b8c:	18cb      	adds	r3, r1, r3
     b8e:	781b      	ldrb	r3, [r3, #0]
     b90:	b2d9      	uxtb	r1, r3
     b92:	1c3b      	adds	r3, r7, #0
     b94:	3337      	adds	r3, #55	; 0x37
     b96:	7818      	ldrb	r0, [r3, #0]
     b98:	2320      	movs	r3, #32
     b9a:	4003      	ands	r3, r0
     b9c:	d001      	beq.n	ba2 <stage_handle_array+0x50a>
     b9e:	230c      	movs	r3, #12
     ba0:	e000      	b.n	ba4 <stage_handle_array+0x50c>
     ba2:	2300      	movs	r3, #0
     ba4:	430b      	orrs	r3, r1
     ba6:	b2db      	uxtb	r3, r3
     ba8:	b2db      	uxtb	r3, r3
     baa:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x08) ? BLACK2  : NOTHING2);
     bac:	4b53      	ldr	r3, [pc, #332]	; (cfc <stage_handle_array+0x664>)
     bae:	681a      	ldr	r2, [r3, #0]
     bb0:	1c3b      	adds	r3, r7, #0
     bb2:	3342      	adds	r3, #66	; 0x42
     bb4:	881b      	ldrh	r3, [r3, #0]
     bb6:	18d2      	adds	r2, r2, r3
     bb8:	4b50      	ldr	r3, [pc, #320]	; (cfc <stage_handle_array+0x664>)
     bba:	6819      	ldr	r1, [r3, #0]
     bbc:	1c3b      	adds	r3, r7, #0
     bbe:	3342      	adds	r3, #66	; 0x42
     bc0:	881b      	ldrh	r3, [r3, #0]
     bc2:	18cb      	adds	r3, r1, r3
     bc4:	781b      	ldrb	r3, [r3, #0]
     bc6:	b2d9      	uxtb	r1, r3
     bc8:	1c3b      	adds	r3, r7, #0
     bca:	3337      	adds	r3, #55	; 0x37
     bcc:	7818      	ldrb	r0, [r3, #0]
     bce:	2308      	movs	r3, #8
     bd0:	4003      	ands	r3, r0
     bd2:	d001      	beq.n	bd8 <stage_handle_array+0x540>
     bd4:	2330      	movs	r3, #48	; 0x30
     bd6:	e000      	b.n	bda <stage_handle_array+0x542>
     bd8:	2300      	movs	r3, #0
     bda:	430b      	orrs	r3, r1
     bdc:	b2db      	uxtb	r3, r3
     bde:	b2db      	uxtb	r3, r3
     be0:	7013      	strb	r3, [r2, #0]
					data_line_even[k--] |= ((temp_byte & 0x02) ? BLACK3  : NOTHING3);
     be2:	4b46      	ldr	r3, [pc, #280]	; (cfc <stage_handle_array+0x664>)
     be4:	6819      	ldr	r1, [r3, #0]
     be6:	1c3b      	adds	r3, r7, #0
     be8:	3342      	adds	r3, #66	; 0x42
     bea:	881b      	ldrh	r3, [r3, #0]
     bec:	1c3a      	adds	r2, r7, #0
     bee:	3242      	adds	r2, #66	; 0x42
     bf0:	1e58      	subs	r0, r3, #1
     bf2:	8010      	strh	r0, [r2, #0]
     bf4:	1c1a      	adds	r2, r3, #0
     bf6:	1889      	adds	r1, r1, r2
     bf8:	4a40      	ldr	r2, [pc, #256]	; (cfc <stage_handle_array+0x664>)
     bfa:	6812      	ldr	r2, [r2, #0]
     bfc:	18d3      	adds	r3, r2, r3
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	b2da      	uxtb	r2, r3
     c02:	1c3b      	adds	r3, r7, #0
     c04:	3337      	adds	r3, #55	; 0x37
     c06:	7818      	ldrb	r0, [r3, #0]
     c08:	2302      	movs	r3, #2
     c0a:	4003      	ands	r3, r0
     c0c:	d001      	beq.n	c12 <stage_handle_array+0x57a>
     c0e:	23c0      	movs	r3, #192	; 0xc0
     c10:	e000      	b.n	c14 <stage_handle_array+0x57c>
     c12:	2300      	movs	r3, #0
     c14:	4313      	orrs	r3, r2
     c16:	b2db      	uxtb	r3, r3
     c18:	b2db      	uxtb	r3, r3
     c1a:	700b      	strb	r3, [r1, #0]
						break;
     c1c:	e0c8      	b.n	db0 <stage_handle_array+0x718>
					case Stage4: // New image
					data_line_odd[x]     = ((temp_byte & 0x40) ? WHITE3  : BLACK3 );
     c1e:	4b38      	ldr	r3, [pc, #224]	; (d00 <stage_handle_array+0x668>)
     c20:	681a      	ldr	r2, [r3, #0]
     c22:	1c3b      	adds	r3, r7, #0
     c24:	3346      	adds	r3, #70	; 0x46
     c26:	881b      	ldrh	r3, [r3, #0]
     c28:	18d2      	adds	r2, r2, r3
     c2a:	1c3b      	adds	r3, r7, #0
     c2c:	3337      	adds	r3, #55	; 0x37
     c2e:	7819      	ldrb	r1, [r3, #0]
     c30:	2340      	movs	r3, #64	; 0x40
     c32:	400b      	ands	r3, r1
     c34:	d001      	beq.n	c3a <stage_handle_array+0x5a2>
     c36:	2380      	movs	r3, #128	; 0x80
     c38:	e000      	b.n	c3c <stage_handle_array+0x5a4>
     c3a:	23c0      	movs	r3, #192	; 0xc0
     c3c:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x10) ? WHITE2  : BLACK2 );
     c3e:	4b30      	ldr	r3, [pc, #192]	; (d00 <stage_handle_array+0x668>)
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	1c3b      	adds	r3, r7, #0
     c44:	3346      	adds	r3, #70	; 0x46
     c46:	881b      	ldrh	r3, [r3, #0]
     c48:	18d2      	adds	r2, r2, r3
     c4a:	4b2d      	ldr	r3, [pc, #180]	; (d00 <stage_handle_array+0x668>)
     c4c:	6819      	ldr	r1, [r3, #0]
     c4e:	1c3b      	adds	r3, r7, #0
     c50:	3346      	adds	r3, #70	; 0x46
     c52:	881b      	ldrh	r3, [r3, #0]
     c54:	18cb      	adds	r3, r1, r3
     c56:	781b      	ldrb	r3, [r3, #0]
     c58:	b2d9      	uxtb	r1, r3
     c5a:	1c3b      	adds	r3, r7, #0
     c5c:	3337      	adds	r3, #55	; 0x37
     c5e:	7818      	ldrb	r0, [r3, #0]
     c60:	2310      	movs	r3, #16
     c62:	4003      	ands	r3, r0
     c64:	d001      	beq.n	c6a <stage_handle_array+0x5d2>
     c66:	2320      	movs	r3, #32
     c68:	e000      	b.n	c6c <stage_handle_array+0x5d4>
     c6a:	2330      	movs	r3, #48	; 0x30
     c6c:	430b      	orrs	r3, r1
     c6e:	b2db      	uxtb	r3, r3
     c70:	b2db      	uxtb	r3, r3
     c72:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x04) ? WHITE1  : BLACK1 );
     c74:	4b22      	ldr	r3, [pc, #136]	; (d00 <stage_handle_array+0x668>)
     c76:	681a      	ldr	r2, [r3, #0]
     c78:	1c3b      	adds	r3, r7, #0
     c7a:	3346      	adds	r3, #70	; 0x46
     c7c:	881b      	ldrh	r3, [r3, #0]
     c7e:	18d2      	adds	r2, r2, r3
     c80:	4b1f      	ldr	r3, [pc, #124]	; (d00 <stage_handle_array+0x668>)
     c82:	6819      	ldr	r1, [r3, #0]
     c84:	1c3b      	adds	r3, r7, #0
     c86:	3346      	adds	r3, #70	; 0x46
     c88:	881b      	ldrh	r3, [r3, #0]
     c8a:	18cb      	adds	r3, r1, r3
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	b2d9      	uxtb	r1, r3
     c90:	1c3b      	adds	r3, r7, #0
     c92:	3337      	adds	r3, #55	; 0x37
     c94:	7818      	ldrb	r0, [r3, #0]
     c96:	2304      	movs	r3, #4
     c98:	4003      	ands	r3, r0
     c9a:	d001      	beq.n	ca0 <stage_handle_array+0x608>
     c9c:	2308      	movs	r3, #8
     c9e:	e000      	b.n	ca2 <stage_handle_array+0x60a>
     ca0:	230c      	movs	r3, #12
     ca2:	430b      	orrs	r3, r1
     ca4:	b2db      	uxtb	r3, r3
     ca6:	b2db      	uxtb	r3, r3
     ca8:	7013      	strb	r3, [r2, #0]
					data_line_odd[x]    |= ((temp_byte & 0x01) ? WHITE0  : BLACK0 );
     caa:	4b15      	ldr	r3, [pc, #84]	; (d00 <stage_handle_array+0x668>)
     cac:	681a      	ldr	r2, [r3, #0]
     cae:	1c3b      	adds	r3, r7, #0
     cb0:	3346      	adds	r3, #70	; 0x46
     cb2:	881b      	ldrh	r3, [r3, #0]
     cb4:	18d2      	adds	r2, r2, r3
     cb6:	4b12      	ldr	r3, [pc, #72]	; (d00 <stage_handle_array+0x668>)
     cb8:	6819      	ldr	r1, [r3, #0]
     cba:	1c3b      	adds	r3, r7, #0
     cbc:	3346      	adds	r3, #70	; 0x46
     cbe:	881b      	ldrh	r3, [r3, #0]
     cc0:	18cb      	adds	r3, r1, r3
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	b2d9      	uxtb	r1, r3
     cc6:	1c3b      	adds	r3, r7, #0
     cc8:	3337      	adds	r3, #55	; 0x37
     cca:	7818      	ldrb	r0, [r3, #0]
     ccc:	2301      	movs	r3, #1
     cce:	4003      	ands	r3, r0
     cd0:	d001      	beq.n	cd6 <stage_handle_array+0x63e>
     cd2:	2302      	movs	r3, #2
     cd4:	e000      	b.n	cd8 <stage_handle_array+0x640>
     cd6:	2303      	movs	r3, #3
     cd8:	430b      	orrs	r3, r1
     cda:	b2db      	uxtb	r3, r3
     cdc:	b2db      	uxtb	r3, r3
     cde:	7013      	strb	r3, [r2, #0]

					data_line_even[k]    = ((temp_byte & 0x80) ? WHITE0  : BLACK0 );
     ce0:	4b06      	ldr	r3, [pc, #24]	; (cfc <stage_handle_array+0x664>)
     ce2:	681a      	ldr	r2, [r3, #0]
     ce4:	1c3b      	adds	r3, r7, #0
     ce6:	3342      	adds	r3, #66	; 0x42
     ce8:	881b      	ldrh	r3, [r3, #0]
     cea:	18d2      	adds	r2, r2, r3
     cec:	1c3b      	adds	r3, r7, #0
     cee:	3337      	adds	r3, #55	; 0x37
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	b25b      	sxtb	r3, r3
     cf4:	2b00      	cmp	r3, #0
     cf6:	da05      	bge.n	d04 <stage_handle_array+0x66c>
     cf8:	2302      	movs	r3, #2
     cfa:	e004      	b.n	d06 <stage_handle_array+0x66e>
     cfc:	200000ac 	.word	0x200000ac
     d00:	200000b0 	.word	0x200000b0
     d04:	2303      	movs	r3, #3
     d06:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x20) ? WHITE1  : BLACK1 );
     d08:	4b7f      	ldr	r3, [pc, #508]	; (f08 <stage_handle_array+0x870>)
     d0a:	681a      	ldr	r2, [r3, #0]
     d0c:	1c3b      	adds	r3, r7, #0
     d0e:	3342      	adds	r3, #66	; 0x42
     d10:	881b      	ldrh	r3, [r3, #0]
     d12:	18d2      	adds	r2, r2, r3
     d14:	4b7c      	ldr	r3, [pc, #496]	; (f08 <stage_handle_array+0x870>)
     d16:	6819      	ldr	r1, [r3, #0]
     d18:	1c3b      	adds	r3, r7, #0
     d1a:	3342      	adds	r3, #66	; 0x42
     d1c:	881b      	ldrh	r3, [r3, #0]
     d1e:	18cb      	adds	r3, r1, r3
     d20:	781b      	ldrb	r3, [r3, #0]
     d22:	b2d9      	uxtb	r1, r3
     d24:	1c3b      	adds	r3, r7, #0
     d26:	3337      	adds	r3, #55	; 0x37
     d28:	7818      	ldrb	r0, [r3, #0]
     d2a:	2320      	movs	r3, #32
     d2c:	4003      	ands	r3, r0
     d2e:	d001      	beq.n	d34 <stage_handle_array+0x69c>
     d30:	2308      	movs	r3, #8
     d32:	e000      	b.n	d36 <stage_handle_array+0x69e>
     d34:	230c      	movs	r3, #12
     d36:	430b      	orrs	r3, r1
     d38:	b2db      	uxtb	r3, r3
     d3a:	b2db      	uxtb	r3, r3
     d3c:	7013      	strb	r3, [r2, #0]
					data_line_even[k]   |= ((temp_byte & 0x08) ? WHITE2  : BLACK2 );
     d3e:	4b72      	ldr	r3, [pc, #456]	; (f08 <stage_handle_array+0x870>)
     d40:	681a      	ldr	r2, [r3, #0]
     d42:	1c3b      	adds	r3, r7, #0
     d44:	3342      	adds	r3, #66	; 0x42
     d46:	881b      	ldrh	r3, [r3, #0]
     d48:	18d2      	adds	r2, r2, r3
     d4a:	4b6f      	ldr	r3, [pc, #444]	; (f08 <stage_handle_array+0x870>)
     d4c:	6819      	ldr	r1, [r3, #0]
     d4e:	1c3b      	adds	r3, r7, #0
     d50:	3342      	adds	r3, #66	; 0x42
     d52:	881b      	ldrh	r3, [r3, #0]
     d54:	18cb      	adds	r3, r1, r3
     d56:	781b      	ldrb	r3, [r3, #0]
     d58:	b2d9      	uxtb	r1, r3
     d5a:	1c3b      	adds	r3, r7, #0
     d5c:	3337      	adds	r3, #55	; 0x37
     d5e:	7818      	ldrb	r0, [r3, #0]
     d60:	2308      	movs	r3, #8
     d62:	4003      	ands	r3, r0
     d64:	d001      	beq.n	d6a <stage_handle_array+0x6d2>
     d66:	2320      	movs	r3, #32
     d68:	e000      	b.n	d6c <stage_handle_array+0x6d4>
     d6a:	2330      	movs	r3, #48	; 0x30
     d6c:	430b      	orrs	r3, r1
     d6e:	b2db      	uxtb	r3, r3
     d70:	b2db      	uxtb	r3, r3
     d72:	7013      	strb	r3, [r2, #0]
					data_line_even[k--] |= ((temp_byte & 0x02) ? WHITE3  : BLACK3 );
     d74:	4b64      	ldr	r3, [pc, #400]	; (f08 <stage_handle_array+0x870>)
     d76:	6819      	ldr	r1, [r3, #0]
     d78:	1c3b      	adds	r3, r7, #0
     d7a:	3342      	adds	r3, #66	; 0x42
     d7c:	881b      	ldrh	r3, [r3, #0]
     d7e:	1c3a      	adds	r2, r7, #0
     d80:	3242      	adds	r2, #66	; 0x42
     d82:	1e58      	subs	r0, r3, #1
     d84:	8010      	strh	r0, [r2, #0]
     d86:	1c1a      	adds	r2, r3, #0
     d88:	1889      	adds	r1, r1, r2
     d8a:	4a5f      	ldr	r2, [pc, #380]	; (f08 <stage_handle_array+0x870>)
     d8c:	6812      	ldr	r2, [r2, #0]
     d8e:	18d3      	adds	r3, r2, r3
     d90:	781b      	ldrb	r3, [r3, #0]
     d92:	b2da      	uxtb	r2, r3
     d94:	1c3b      	adds	r3, r7, #0
     d96:	3337      	adds	r3, #55	; 0x37
     d98:	7818      	ldrb	r0, [r3, #0]
     d9a:	2302      	movs	r3, #2
     d9c:	4003      	ands	r3, r0
     d9e:	d001      	beq.n	da4 <stage_handle_array+0x70c>
     da0:	2380      	movs	r3, #128	; 0x80
     da2:	e000      	b.n	da6 <stage_handle_array+0x70e>
     da4:	23c0      	movs	r3, #192	; 0xc0
     da6:	4313      	orrs	r3, r2
     da8:	b2db      	uxtb	r3, r3
     daa:	b2db      	uxtb	r3, r3
     dac:	700b      	strb	r3, [r1, #0]
						break;
     dae:	46c0      	nop			; (mov r8, r8)
            if(_On_EPD_read_flash!=NULL) {
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
				COG_parameters[cur_EPD_type_index].horizontal_size);
                image_prt=&byte_array[0];
			}
			for (x = 0; x < COG_parameters[cur_EPD_type_index].horizontal_size; x++) {
     db0:	1c3b      	adds	r3, r7, #0
     db2:	3346      	adds	r3, #70	; 0x46
     db4:	881a      	ldrh	r2, [r3, #0]
     db6:	1c3b      	adds	r3, r7, #0
     db8:	3346      	adds	r3, #70	; 0x46
     dba:	3201      	adds	r2, #1
     dbc:	801a      	strh	r2, [r3, #0]
     dbe:	4b53      	ldr	r3, [pc, #332]	; (f0c <stage_handle_array+0x874>)
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	1c1a      	adds	r2, r3, #0
     dc4:	4952      	ldr	r1, [pc, #328]	; (f10 <stage_handle_array+0x878>)
     dc6:	1c13      	adds	r3, r2, #0
     dc8:	009b      	lsls	r3, r3, #2
     dca:	189b      	adds	r3, r3, r2
     dcc:	009b      	lsls	r3, r3, #2
     dce:	18cb      	adds	r3, r1, r3
     dd0:	3308      	adds	r3, #8
     dd2:	885b      	ldrh	r3, [r3, #2]
     dd4:	1c3a      	adds	r2, r7, #0
     dd6:	3246      	adds	r2, #70	; 0x46
     dd8:	8812      	ldrh	r2, [r2, #0]
     dda:	429a      	cmp	r2, r3
     ddc:	d200      	bcs.n	de0 <stage_handle_array+0x748>
     dde:	e4aa      	b.n	736 <stage_handle_array+0x9e>
						break;
				}

			}

            image_data_address+=Line_Offset(cur_EPD_type_index);
     de0:	4b4a      	ldr	r3, [pc, #296]	; (f0c <stage_handle_array+0x874>)
     de2:	781b      	ldrb	r3, [r3, #0]
     de4:	1c1a      	adds	r2, r3, #0
     de6:	494a      	ldr	r1, [pc, #296]	; (f10 <stage_handle_array+0x878>)
     de8:	1c13      	adds	r3, r2, #0
     dea:	009b      	lsls	r3, r3, #2
     dec:	189b      	adds	r3, r3, r2
     dee:	009b      	lsls	r3, r3, #2
     df0:	18cb      	adds	r3, r1, r3
     df2:	3308      	adds	r3, #8
     df4:	885b      	ldrh	r3, [r3, #2]
     df6:	68ba      	ldr	r2, [r7, #8]
     df8:	18d3      	adds	r3, r2, r3
     dfa:	60bb      	str	r3, [r7, #8]

            scanline_no= (COG_parameters[cur_EPD_type_index].vertical_size-1)-y;
     dfc:	4b43      	ldr	r3, [pc, #268]	; (f0c <stage_handle_array+0x874>)
     dfe:	781b      	ldrb	r3, [r3, #0]
     e00:	1c1a      	adds	r2, r3, #0
     e02:	4943      	ldr	r1, [pc, #268]	; (f10 <stage_handle_array+0x878>)
     e04:	1c13      	adds	r3, r2, #0
     e06:	009b      	lsls	r3, r3, #2
     e08:	189b      	adds	r3, r3, r2
     e0a:	009b      	lsls	r3, r3, #2
     e0c:	18cb      	adds	r3, r1, r3
     e0e:	3308      	adds	r3, #8
     e10:	889a      	ldrh	r2, [r3, #4]
     e12:	1c3b      	adds	r3, r7, #0
     e14:	3344      	adds	r3, #68	; 0x44
     e16:	881b      	ldrh	r3, [r3, #0]
     e18:	1ad3      	subs	r3, r2, r3
     e1a:	b29b      	uxth	r3, r3
     e1c:	3b01      	subs	r3, #1
     e1e:	b29a      	uxth	r2, r3
     e20:	1c3b      	adds	r3, r7, #0
     e22:	3340      	adds	r3, #64	; 0x40
     e24:	801a      	strh	r2, [r3, #0]

			/* Scan byte shift per data line */
			data_line_scan[(scanline_no>>2)] = SCAN_TABLE[(scanline_no%4)];
     e26:	4b3b      	ldr	r3, [pc, #236]	; (f14 <stage_handle_array+0x87c>)
     e28:	681a      	ldr	r2, [r3, #0]
     e2a:	1c3b      	adds	r3, r7, #0
     e2c:	3340      	adds	r3, #64	; 0x40
     e2e:	2000      	movs	r0, #0
     e30:	5e1b      	ldrsh	r3, [r3, r0]
     e32:	109b      	asrs	r3, r3, #2
     e34:	b29b      	uxth	r3, r3
     e36:	b21b      	sxth	r3, r3
     e38:	18d2      	adds	r2, r2, r3
     e3a:	1c3b      	adds	r3, r7, #0
     e3c:	3340      	adds	r3, #64	; 0x40
     e3e:	2000      	movs	r0, #0
     e40:	5e19      	ldrsh	r1, [r3, r0]
     e42:	4b35      	ldr	r3, [pc, #212]	; (f18 <stage_handle_array+0x880>)
     e44:	400b      	ands	r3, r1
     e46:	d504      	bpl.n	e52 <stage_handle_array+0x7ba>
     e48:	3b01      	subs	r3, #1
     e4a:	2104      	movs	r1, #4
     e4c:	4249      	negs	r1, r1
     e4e:	430b      	orrs	r3, r1
     e50:	3301      	adds	r3, #1
     e52:	b29b      	uxth	r3, r3
     e54:	b21b      	sxth	r3, r3
     e56:	4931      	ldr	r1, [pc, #196]	; (f1c <stage_handle_array+0x884>)
     e58:	5ccb      	ldrb	r3, [r1, r3]
     e5a:	7013      	strb	r3, [r2, #0]

			/* Sending data */
			epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8,
			COG_parameters[cur_EPD_type_index].data_line_size);
     e5c:	4b2b      	ldr	r3, [pc, #172]	; (f0c <stage_handle_array+0x874>)
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	1c1a      	adds	r2, r3, #0
     e62:	492b      	ldr	r1, [pc, #172]	; (f10 <stage_handle_array+0x878>)
     e64:	1c13      	adds	r3, r2, #0
     e66:	009b      	lsls	r3, r3, #2
     e68:	189b      	adds	r3, r3, r2
     e6a:	009b      	lsls	r3, r3, #2
     e6c:	18cb      	adds	r3, r1, r3
     e6e:	3308      	adds	r3, #8
     e70:	799b      	ldrb	r3, [r3, #6]

			/* Scan byte shift per data line */
			data_line_scan[(scanline_no>>2)] = SCAN_TABLE[(scanline_no%4)];

			/* Sending data */
			epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8,
     e72:	4a2b      	ldr	r2, [pc, #172]	; (f20 <stage_handle_array+0x888>)
     e74:	200a      	movs	r0, #10
     e76:	1c11      	adds	r1, r2, #0
     e78:	1c1a      	adds	r2, r3, #0
     e7a:	4b2a      	ldr	r3, [pc, #168]	; (f24 <stage_handle_array+0x88c>)
     e7c:	4798      	blx	r3
			COG_parameters[cur_EPD_type_index].data_line_size);

			/* Turn on Output Enable */
			epd_spi_send_byte (0x02, 0x07);
     e7e:	2002      	movs	r0, #2
     e80:	2107      	movs	r1, #7
     e82:	4b29      	ldr	r3, [pc, #164]	; (f28 <stage_handle_array+0x890>)
     e84:	4798      	blx	r3

			data_line_scan[(scanline_no>>2)]=0;
     e86:	4b23      	ldr	r3, [pc, #140]	; (f14 <stage_handle_array+0x87c>)
     e88:	681a      	ldr	r2, [r3, #0]
     e8a:	1c3b      	adds	r3, r7, #0
     e8c:	3340      	adds	r3, #64	; 0x40
     e8e:	2100      	movs	r1, #0
     e90:	5e5b      	ldrsh	r3, [r3, r1]
     e92:	109b      	asrs	r3, r3, #2
     e94:	b29b      	uxth	r3, r3
     e96:	b21b      	sxth	r3, r3
     e98:	18d3      	adds	r3, r2, r3
     e9a:	2200      	movs	r2, #0
     e9c:	701a      	strb	r2, [r3, #0]
	* Per frame */
	do {
		image_prt=backup_image_prt;
        image_data_address=original_image_address;
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {			
     e9e:	1c3b      	adds	r3, r7, #0
     ea0:	3344      	adds	r3, #68	; 0x44
     ea2:	881a      	ldrh	r2, [r3, #0]
     ea4:	1c3b      	adds	r3, r7, #0
     ea6:	3344      	adds	r3, #68	; 0x44
     ea8:	3201      	adds	r2, #1
     eaa:	801a      	strh	r2, [r3, #0]
     eac:	4b17      	ldr	r3, [pc, #92]	; (f0c <stage_handle_array+0x874>)
     eae:	781b      	ldrb	r3, [r3, #0]
     eb0:	1c1a      	adds	r2, r3, #0
     eb2:	4917      	ldr	r1, [pc, #92]	; (f10 <stage_handle_array+0x878>)
     eb4:	1c13      	adds	r3, r2, #0
     eb6:	009b      	lsls	r3, r3, #2
     eb8:	189b      	adds	r3, r3, r2
     eba:	009b      	lsls	r3, r3, #2
     ebc:	18cb      	adds	r3, r1, r3
     ebe:	3308      	adds	r3, #8
     ec0:	889b      	ldrh	r3, [r3, #4]
     ec2:	1c3a      	adds	r2, r7, #0
     ec4:	3244      	adds	r2, #68	; 0x44
     ec6:	8812      	ldrh	r2, [r2, #0]
     ec8:	429a      	cmp	r2, r3
     eca:	d201      	bcs.n	ed0 <stage_handle_array+0x838>
     ecc:	f7ff fc02 	bl	6d4 <stage_handle_array+0x3c>
			epd_spi_send_byte (0x02, 0x07);

			data_line_scan[(scanline_no>>2)]=0;
		}
		/* Count the frame time with offset */
		current_frame_time=(uint16_t)get_current_time_tick();
     ed0:	4b16      	ldr	r3, [pc, #88]	; (f2c <stage_handle_array+0x894>)
     ed2:	4798      	blx	r3
     ed4:	1c03      	adds	r3, r0, #0
     ed6:	b29a      	uxth	r2, r3
     ed8:	4b15      	ldr	r3, [pc, #84]	; (f30 <stage_handle_array+0x898>)
     eda:	801a      	strh	r2, [r3, #0]

	} while (stage_time>current_frame_time);
     edc:	4b15      	ldr	r3, [pc, #84]	; (f34 <stage_handle_array+0x89c>)
     ede:	881a      	ldrh	r2, [r3, #0]
     ee0:	4b13      	ldr	r3, [pc, #76]	; (f30 <stage_handle_array+0x898>)
     ee2:	881b      	ldrh	r3, [r3, #0]
     ee4:	429a      	cmp	r2, r3
     ee6:	d901      	bls.n	eec <stage_handle_array+0x854>
     ee8:	f7ff fbea 	bl	6c0 <stage_handle_array+0x28>

	/* Do while the SysTick timer fulfills the stage time */
	while(stage_time>get_current_time_tick());
     eec:	46c0      	nop			; (mov r8, r8)
     eee:	4b11      	ldr	r3, [pc, #68]	; (f34 <stage_handle_array+0x89c>)
     ef0:	881b      	ldrh	r3, [r3, #0]
     ef2:	1c1c      	adds	r4, r3, #0
     ef4:	4b0d      	ldr	r3, [pc, #52]	; (f2c <stage_handle_array+0x894>)
     ef6:	4798      	blx	r3
     ef8:	1c03      	adds	r3, r0, #0
     efa:	429c      	cmp	r4, r3
     efc:	d8f7      	bhi.n	eee <stage_handle_array+0x856>

	/* Stop system timer */
	stop_EPD_timer();
     efe:	4b0e      	ldr	r3, [pc, #56]	; (f38 <stage_handle_array+0x8a0>)
     f00:	4798      	blx	r3
}
     f02:	46bd      	mov	sp, r7
     f04:	b013      	add	sp, #76	; 0x4c
     f06:	bd90      	pop	{r4, r7, pc}
     f08:	200000ac 	.word	0x200000ac
     f0c:	200000bc 	.word	0x200000bc
     f10:	00006240 	.word	0x00006240
     f14:	200000b4 	.word	0x200000b4
     f18:	80000003 	.word	0x80000003
     f1c:	00006340 	.word	0x00006340
     f20:	20000034 	.word	0x20000034
     f24:	000024f9 	.word	0x000024f9
     f28:	00002589 	.word	0x00002589
     f2c:	00002219 	.word	0x00002219
     f30:	200000a8 	.word	0x200000a8
     f34:	20000030 	.word	0x20000030
     f38:	000021f5 	.word	0x000021f5

00000f3c <stage_handle_array_for_19_26>:
 * \note For 1.9" and 2.6", the line data flow is half_Scan-Data-half_Scan
 *
 * \param image_ptr The pointer of memory that stores image that will send to COG
 * \param stage_no The assigned stage number that will proceed
 */
static void stage_handle_array_for_19_26(uint8_t *image_prt,long image_data_address,uint8_t stage_no) {
     f3c:	b590      	push	{r4, r7, lr}
     f3e:	b093      	sub	sp, #76	; 0x4c
     f40:	af00      	add	r7, sp, #0
     f42:	60f8      	str	r0, [r7, #12]
     f44:	60b9      	str	r1, [r7, #8]
     f46:	1dfb      	adds	r3, r7, #7
     f48:	701a      	strb	r2, [r3, #0]
    uint8_t s_index,b_index,line_len;
    long original_image_address; // Backup original image address
    uint8_t	temp_byte; // Temporary storage for image data check
	uint8_t *backup_image_prt; // Backup image address pointer
	uint8_t byte_array[COG_line_Max_Size];
	backup_image_prt = image_prt;
     f4a:	68fb      	ldr	r3, [r7, #12]
     f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    original_image_address=image_data_address;
     f4e:	68bb      	ldr	r3, [r7, #8]
     f50:	63bb      	str	r3, [r7, #56]	; 0x38
	current_frame_time = COG_parameters[cur_EPD_type_index].frame_time_offset;
     f52:	4baf      	ldr	r3, [pc, #700]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	1c1a      	adds	r2, r3, #0
     f58:	49ae      	ldr	r1, [pc, #696]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
     f5a:	1c13      	adds	r3, r2, #0
     f5c:	009b      	lsls	r3, r3, #2
     f5e:	189b      	adds	r3, r3, r2
     f60:	009b      	lsls	r3, r3, #2
     f62:	18cb      	adds	r3, r1, r3
     f64:	3310      	adds	r3, #16
     f66:	881a      	ldrh	r2, [r3, #0]
     f68:	4bab      	ldr	r3, [pc, #684]	; (1218 <stage_handle_array_for_19_26+0x2dc>)
     f6a:	801a      	strh	r2, [r3, #0]
	/* Start a system SysTick timer to ensure the same duration of each stage  */
	start_EPD_timer();
     f6c:	4bab      	ldr	r3, [pc, #684]	; (121c <stage_handle_array_for_19_26+0x2e0>)
     f6e:	4798      	blx	r3
    line_len=(COG_parameters[cur_EPD_type_index].vertical_size/8)-1;
     f70:	4ba7      	ldr	r3, [pc, #668]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	1c1a      	adds	r2, r3, #0
     f76:	49a7      	ldr	r1, [pc, #668]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
     f78:	1c13      	adds	r3, r2, #0
     f7a:	009b      	lsls	r3, r3, #2
     f7c:	189b      	adds	r3, r3, r2
     f7e:	009b      	lsls	r3, r3, #2
     f80:	18cb      	adds	r3, r1, r3
     f82:	3308      	adds	r3, #8
     f84:	889b      	ldrh	r3, [r3, #4]
     f86:	08db      	lsrs	r3, r3, #3
     f88:	b29b      	uxth	r3, r3
     f8a:	b2da      	uxtb	r2, r3
     f8c:	1c3b      	adds	r3, r7, #0
     f8e:	3337      	adds	r3, #55	; 0x37
     f90:	3a01      	subs	r2, #1
     f92:	701a      	strb	r2, [r3, #0]
	/* Do while total time of frames exceed stage time
	* Per frame */
	do {
		image_prt=backup_image_prt;
     f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f96:	60fb      	str	r3, [r7, #12]
        image_data_address=original_image_address;
     f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f9a:	60bb      	str	r3, [r7, #8]
        *data_line_border_byte=BORDER_TABLE[stage_no];
     f9c:	4ba0      	ldr	r3, [pc, #640]	; (1220 <stage_handle_array_for_19_26+0x2e4>)
     f9e:	681b      	ldr	r3, [r3, #0]
     fa0:	1dfa      	adds	r2, r7, #7
     fa2:	7812      	ldrb	r2, [r2, #0]
     fa4:	499f      	ldr	r1, [pc, #636]	; (1224 <stage_handle_array_for_19_26+0x2e8>)
     fa6:	5c8a      	ldrb	r2, [r1, r2]
     fa8:	701a      	strb	r2, [r3, #0]
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {
     faa:	1c3b      	adds	r3, r7, #0
     fac:	3344      	adds	r3, #68	; 0x44
     fae:	2200      	movs	r2, #0
     fb0:	801a      	strh	r2, [r3, #0]
     fb2:	e0f3      	b.n	119c <stage_handle_array_for_19_26+0x260>
          if(_On_EPD_read_flash!=NULL) {
     fb4:	4b9c      	ldr	r3, [pc, #624]	; (1228 <stage_handle_array_for_19_26+0x2ec>)
     fb6:	681b      	ldr	r3, [r3, #0]
     fb8:	2b00      	cmp	r3, #0
     fba:	d017      	beq.n	fec <stage_handle_array_for_19_26+0xb0>
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
     fbc:	4b9a      	ldr	r3, [pc, #616]	; (1228 <stage_handle_array_for_19_26+0x2ec>)
     fbe:	681c      	ldr	r4, [r3, #0]
				COG_parameters[cur_EPD_type_index].horizontal_size);
     fc0:	4b93      	ldr	r3, [pc, #588]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	1c1a      	adds	r2, r3, #0
     fc6:	4993      	ldr	r1, [pc, #588]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
     fc8:	1c13      	adds	r3, r2, #0
     fca:	009b      	lsls	r3, r3, #2
     fcc:	189b      	adds	r3, r3, r2
     fce:	009b      	lsls	r3, r3, #2
     fd0:	18cb      	adds	r3, r1, r3
     fd2:	3308      	adds	r3, #8
     fd4:	885b      	ldrh	r3, [r3, #2]
        image_data_address=original_image_address;
        *data_line_border_byte=BORDER_TABLE[stage_no];
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {
          if(_On_EPD_read_flash!=NULL) {
				_On_EPD_read_flash(image_data_address,(uint8_t *)&byte_array,
     fd6:	b2db      	uxtb	r3, r3
     fd8:	68b9      	ldr	r1, [r7, #8]
     fda:	1c3a      	adds	r2, r7, #0
     fdc:	3210      	adds	r2, #16
     fde:	1c08      	adds	r0, r1, #0
     fe0:	1c11      	adds	r1, r2, #0
     fe2:	1c1a      	adds	r2, r3, #0
     fe4:	47a0      	blx	r4
				COG_parameters[cur_EPD_type_index].horizontal_size);
                image_prt=&byte_array[0];
     fe6:	1c3b      	adds	r3, r7, #0
     fe8:	3310      	adds	r3, #16
     fea:	60fb      	str	r3, [r7, #12]
			}

            cnt=(COG_parameters[cur_EPD_type_index].horizontal_size*2)-1;
     fec:	4b88      	ldr	r3, [pc, #544]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
     fee:	781b      	ldrb	r3, [r3, #0]
     ff0:	1c1a      	adds	r2, r3, #0
     ff2:	4988      	ldr	r1, [pc, #544]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
     ff4:	1c13      	adds	r3, r2, #0
     ff6:	009b      	lsls	r3, r3, #2
     ff8:	189b      	adds	r3, r3, r2
     ffa:	009b      	lsls	r3, r3, #2
     ffc:	18cb      	adds	r3, r1, r3
     ffe:	3308      	adds	r3, #8
    1000:	885b      	ldrh	r3, [r3, #2]
    1002:	b2db      	uxtb	r3, r3
    1004:	18db      	adds	r3, r3, r3
    1006:	b2da      	uxtb	r2, r3
    1008:	1c3b      	adds	r3, r7, #0
    100a:	3343      	adds	r3, #67	; 0x43
    100c:	3a01      	subs	r2, #1
    100e:	701a      	strb	r2, [r3, #0]
			for (x = 0; x < COG_parameters[cur_EPD_type_index].horizontal_size; x++) {
    1010:	1c3b      	adds	r3, r7, #0
    1012:	3346      	adds	r3, #70	; 0x46
    1014:	2200      	movs	r2, #0
    1016:	801a      	strh	r2, [r3, #0]
    1018:	e03c      	b.n	1094 <stage_handle_array_for_19_26+0x158>
				temp_byte =*image_prt++;
    101a:	68fb      	ldr	r3, [r7, #12]
    101c:	1c5a      	adds	r2, r3, #1
    101e:	60fa      	str	r2, [r7, #12]
    1020:	1c3a      	adds	r2, r7, #0
    1022:	3236      	adds	r2, #54	; 0x36
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	7013      	strb	r3, [r2, #0]
				data_line_scan[cnt--]=data_lookuptable[stage_no][((temp_byte>>4) &0x0f)];
    1028:	4b80      	ldr	r3, [pc, #512]	; (122c <stage_handle_array_for_19_26+0x2f0>)
    102a:	681a      	ldr	r2, [r3, #0]
    102c:	1c3b      	adds	r3, r7, #0
    102e:	3343      	adds	r3, #67	; 0x43
    1030:	781b      	ldrb	r3, [r3, #0]
    1032:	1c39      	adds	r1, r7, #0
    1034:	3143      	adds	r1, #67	; 0x43
    1036:	1e58      	subs	r0, r3, #1
    1038:	7008      	strb	r0, [r1, #0]
    103a:	18d3      	adds	r3, r2, r3
    103c:	1dfa      	adds	r2, r7, #7
    103e:	7810      	ldrb	r0, [r2, #0]
    1040:	1c3a      	adds	r2, r7, #0
    1042:	3236      	adds	r2, #54	; 0x36
    1044:	7812      	ldrb	r2, [r2, #0]
    1046:	0912      	lsrs	r2, r2, #4
    1048:	b2d2      	uxtb	r2, r2
    104a:	1c11      	adds	r1, r2, #0
    104c:	220f      	movs	r2, #15
    104e:	4011      	ands	r1, r2
    1050:	4a77      	ldr	r2, [pc, #476]	; (1230 <stage_handle_array_for_19_26+0x2f4>)
    1052:	0100      	lsls	r0, r0, #4
    1054:	1841      	adds	r1, r0, r1
    1056:	5c8a      	ldrb	r2, [r1, r2]
    1058:	701a      	strb	r2, [r3, #0]
				data_line_scan[(cnt--)]=data_lookuptable[stage_no][(temp_byte&0x0f)];
    105a:	4b74      	ldr	r3, [pc, #464]	; (122c <stage_handle_array_for_19_26+0x2f0>)
    105c:	681a      	ldr	r2, [r3, #0]
    105e:	1c3b      	adds	r3, r7, #0
    1060:	3343      	adds	r3, #67	; 0x43
    1062:	781b      	ldrb	r3, [r3, #0]
    1064:	1c39      	adds	r1, r7, #0
    1066:	3143      	adds	r1, #67	; 0x43
    1068:	1e58      	subs	r0, r3, #1
    106a:	7008      	strb	r0, [r1, #0]
    106c:	18d3      	adds	r3, r2, r3
    106e:	1dfa      	adds	r2, r7, #7
    1070:	7810      	ldrb	r0, [r2, #0]
    1072:	1c3a      	adds	r2, r7, #0
    1074:	3236      	adds	r2, #54	; 0x36
    1076:	7811      	ldrb	r1, [r2, #0]
    1078:	220f      	movs	r2, #15
    107a:	4011      	ands	r1, r2
    107c:	4a6c      	ldr	r2, [pc, #432]	; (1230 <stage_handle_array_for_19_26+0x2f4>)
    107e:	0100      	lsls	r0, r0, #4
    1080:	1841      	adds	r1, r0, r1
    1082:	5c8a      	ldrb	r2, [r1, r2]
    1084:	701a      	strb	r2, [r3, #0]
				COG_parameters[cur_EPD_type_index].horizontal_size);
                image_prt=&byte_array[0];
			}

            cnt=(COG_parameters[cur_EPD_type_index].horizontal_size*2)-1;
			for (x = 0; x < COG_parameters[cur_EPD_type_index].horizontal_size; x++) {
    1086:	1c3b      	adds	r3, r7, #0
    1088:	3346      	adds	r3, #70	; 0x46
    108a:	881a      	ldrh	r2, [r3, #0]
    108c:	1c3b      	adds	r3, r7, #0
    108e:	3346      	adds	r3, #70	; 0x46
    1090:	3201      	adds	r2, #1
    1092:	801a      	strh	r2, [r3, #0]
    1094:	4b5e      	ldr	r3, [pc, #376]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
    1096:	781b      	ldrb	r3, [r3, #0]
    1098:	1c1a      	adds	r2, r3, #0
    109a:	495e      	ldr	r1, [pc, #376]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
    109c:	1c13      	adds	r3, r2, #0
    109e:	009b      	lsls	r3, r3, #2
    10a0:	189b      	adds	r3, r3, r2
    10a2:	009b      	lsls	r3, r3, #2
    10a4:	18cb      	adds	r3, r1, r3
    10a6:	3308      	adds	r3, #8
    10a8:	885b      	ldrh	r3, [r3, #2]
    10aa:	1c3a      	adds	r2, r7, #0
    10ac:	3246      	adds	r2, #70	; 0x46
    10ae:	8812      	ldrh	r2, [r2, #0]
    10b0:	429a      	cmp	r2, r3
    10b2:	d3b2      	bcc.n	101a <stage_handle_array_for_19_26+0xde>
				temp_byte =*image_prt++;
				data_line_scan[cnt--]=data_lookuptable[stage_no][((temp_byte>>4) &0x0f)];
				data_line_scan[(cnt--)]=data_lookuptable[stage_no][(temp_byte&0x0f)];
			}
            s_index=y>>3;
    10b4:	1c3b      	adds	r3, r7, #0
    10b6:	3344      	adds	r3, #68	; 0x44
    10b8:	881b      	ldrh	r3, [r3, #0]
    10ba:	08db      	lsrs	r3, r3, #3
    10bc:	b29a      	uxth	r2, r3
    10be:	1c3b      	adds	r3, r7, #0
    10c0:	3335      	adds	r3, #53	; 0x35
    10c2:	701a      	strb	r2, [r3, #0]
            b_index=(y%8);
    10c4:	1c3b      	adds	r3, r7, #0
    10c6:	3344      	adds	r3, #68	; 0x44
    10c8:	881b      	ldrh	r3, [r3, #0]
    10ca:	b2d9      	uxtb	r1, r3
    10cc:	1c3b      	adds	r3, r7, #0
    10ce:	3334      	adds	r3, #52	; 0x34
    10d0:	2207      	movs	r2, #7
    10d2:	400a      	ands	r2, r1
    10d4:	701a      	strb	r2, [r3, #0]
            if((y%2)==0)
    10d6:	1c3b      	adds	r3, r7, #0
    10d8:	3344      	adds	r3, #68	; 0x44
    10da:	881a      	ldrh	r2, [r3, #0]
    10dc:	2301      	movs	r3, #1
    10de:	4013      	ands	r3, r2
    10e0:	b29b      	uxth	r3, r3
    10e2:	2b00      	cmp	r3, #0
    10e4:	d110      	bne.n	1108 <stage_handle_array_for_19_26+0x1cc>
            {//odd
                    data_line_even[line_len-s_index]=scan_lookuptable[b_index];
    10e6:	4b53      	ldr	r3, [pc, #332]	; (1234 <stage_handle_array_for_19_26+0x2f8>)
    10e8:	681a      	ldr	r2, [r3, #0]
    10ea:	1c3b      	adds	r3, r7, #0
    10ec:	3337      	adds	r3, #55	; 0x37
    10ee:	7819      	ldrb	r1, [r3, #0]
    10f0:	1c3b      	adds	r3, r7, #0
    10f2:	3335      	adds	r3, #53	; 0x35
    10f4:	781b      	ldrb	r3, [r3, #0]
    10f6:	1acb      	subs	r3, r1, r3
    10f8:	18d3      	adds	r3, r2, r3
    10fa:	1c3a      	adds	r2, r7, #0
    10fc:	3234      	adds	r2, #52	; 0x34
    10fe:	7812      	ldrb	r2, [r2, #0]
    1100:	494d      	ldr	r1, [pc, #308]	; (1238 <stage_handle_array_for_19_26+0x2fc>)
    1102:	5c8a      	ldrb	r2, [r1, r2]
    1104:	701a      	strb	r2, [r3, #0]
    1106:	e00b      	b.n	1120 <stage_handle_array_for_19_26+0x1e4>
            }
            else
            {//even
            		data_line_odd[s_index]=scan_lookuptable[b_index];
    1108:	4b4c      	ldr	r3, [pc, #304]	; (123c <stage_handle_array_for_19_26+0x300>)
    110a:	681a      	ldr	r2, [r3, #0]
    110c:	1c3b      	adds	r3, r7, #0
    110e:	3335      	adds	r3, #53	; 0x35
    1110:	781b      	ldrb	r3, [r3, #0]
    1112:	18d3      	adds	r3, r2, r3
    1114:	1c3a      	adds	r2, r7, #0
    1116:	3234      	adds	r2, #52	; 0x34
    1118:	7812      	ldrb	r2, [r2, #0]
    111a:	4947      	ldr	r1, [pc, #284]	; (1238 <stage_handle_array_for_19_26+0x2fc>)
    111c:	5c8a      	ldrb	r2, [r1, r2]
    111e:	701a      	strb	r2, [r3, #0]
            }
            //image_data_address+=COG_parameters[cur_EPD_type_index].horizontal_size;
            image_data_address+=Line_Offset(cur_EPD_type_index);
    1120:	4b3b      	ldr	r3, [pc, #236]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
    1122:	781b      	ldrb	r3, [r3, #0]
    1124:	1c1a      	adds	r2, r3, #0
    1126:	493b      	ldr	r1, [pc, #236]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
    1128:	1c13      	adds	r3, r2, #0
    112a:	009b      	lsls	r3, r3, #2
    112c:	189b      	adds	r3, r3, r2
    112e:	009b      	lsls	r3, r3, #2
    1130:	18cb      	adds	r3, r1, r3
    1132:	3308      	adds	r3, #8
    1134:	885b      	ldrh	r3, [r3, #2]
    1136:	68ba      	ldr	r2, [r7, #8]
    1138:	18d3      	adds	r3, r2, r3
    113a:	60bb      	str	r3, [r7, #8]
            /* Sending data */
			epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8,
				COG_parameters[cur_EPD_type_index].data_line_size);
    113c:	4b34      	ldr	r3, [pc, #208]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
    113e:	781b      	ldrb	r3, [r3, #0]
    1140:	1c1a      	adds	r2, r3, #0
    1142:	4934      	ldr	r1, [pc, #208]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
    1144:	1c13      	adds	r3, r2, #0
    1146:	009b      	lsls	r3, r3, #2
    1148:	189b      	adds	r3, r3, r2
    114a:	009b      	lsls	r3, r3, #2
    114c:	18cb      	adds	r3, r1, r3
    114e:	3308      	adds	r3, #8
    1150:	799b      	ldrb	r3, [r3, #6]
            		data_line_odd[s_index]=scan_lookuptable[b_index];
            }
            //image_data_address+=COG_parameters[cur_EPD_type_index].horizontal_size;
            image_data_address+=Line_Offset(cur_EPD_type_index);
            /* Sending data */
			epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8,
    1152:	4a3b      	ldr	r2, [pc, #236]	; (1240 <stage_handle_array_for_19_26+0x304>)
    1154:	200a      	movs	r0, #10
    1156:	1c11      	adds	r1, r2, #0
    1158:	1c1a      	adds	r2, r3, #0
    115a:	4b3a      	ldr	r3, [pc, #232]	; (1244 <stage_handle_array_for_19_26+0x308>)
    115c:	4798      	blx	r3
				COG_parameters[cur_EPD_type_index].data_line_size);

			/* Turn on Output Enable */
			epd_spi_send_byte (0x02, 0x07);
    115e:	2002      	movs	r0, #2
    1160:	2107      	movs	r1, #7
    1162:	4b39      	ldr	r3, [pc, #228]	; (1248 <stage_handle_array_for_19_26+0x30c>)
    1164:	4798      	blx	r3

			data_line_odd[s_index]=0;
    1166:	4b35      	ldr	r3, [pc, #212]	; (123c <stage_handle_array_for_19_26+0x300>)
    1168:	681a      	ldr	r2, [r3, #0]
    116a:	1c3b      	adds	r3, r7, #0
    116c:	3335      	adds	r3, #53	; 0x35
    116e:	781b      	ldrb	r3, [r3, #0]
    1170:	18d3      	adds	r3, r2, r3
    1172:	2200      	movs	r2, #0
    1174:	701a      	strb	r2, [r3, #0]
            data_line_even[line_len-s_index]=0;
    1176:	4b2f      	ldr	r3, [pc, #188]	; (1234 <stage_handle_array_for_19_26+0x2f8>)
    1178:	681a      	ldr	r2, [r3, #0]
    117a:	1c3b      	adds	r3, r7, #0
    117c:	3337      	adds	r3, #55	; 0x37
    117e:	7819      	ldrb	r1, [r3, #0]
    1180:	1c3b      	adds	r3, r7, #0
    1182:	3335      	adds	r3, #53	; 0x35
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	1acb      	subs	r3, r1, r3
    1188:	18d3      	adds	r3, r2, r3
    118a:	2200      	movs	r2, #0
    118c:	701a      	strb	r2, [r3, #0]
	do {
		image_prt=backup_image_prt;
        image_data_address=original_image_address;
        *data_line_border_byte=BORDER_TABLE[stage_no];
		/* Per data line (vertical size) */
		for (y = 0; y < COG_parameters[cur_EPD_type_index].vertical_size; y++) {
    118e:	1c3b      	adds	r3, r7, #0
    1190:	3344      	adds	r3, #68	; 0x44
    1192:	881a      	ldrh	r2, [r3, #0]
    1194:	1c3b      	adds	r3, r7, #0
    1196:	3344      	adds	r3, #68	; 0x44
    1198:	3201      	adds	r2, #1
    119a:	801a      	strh	r2, [r3, #0]
    119c:	4b1c      	ldr	r3, [pc, #112]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
    119e:	781b      	ldrb	r3, [r3, #0]
    11a0:	1c1a      	adds	r2, r3, #0
    11a2:	491c      	ldr	r1, [pc, #112]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
    11a4:	1c13      	adds	r3, r2, #0
    11a6:	009b      	lsls	r3, r3, #2
    11a8:	189b      	adds	r3, r3, r2
    11aa:	009b      	lsls	r3, r3, #2
    11ac:	18cb      	adds	r3, r1, r3
    11ae:	3308      	adds	r3, #8
    11b0:	889b      	ldrh	r3, [r3, #4]
    11b2:	1c3a      	adds	r2, r7, #0
    11b4:	3244      	adds	r2, #68	; 0x44
    11b6:	8812      	ldrh	r2, [r2, #0]
    11b8:	429a      	cmp	r2, r3
    11ba:	d200      	bcs.n	11be <stage_handle_array_for_19_26+0x282>
    11bc:	e6fa      	b.n	fb4 <stage_handle_array_for_19_26+0x78>

			data_line_odd[s_index]=0;
            data_line_even[line_len-s_index]=0;
		}
		/* Count the frame time with offset */
		current_frame_time=(uint16_t)get_current_time_tick()+
    11be:	4b23      	ldr	r3, [pc, #140]	; (124c <stage_handle_array_for_19_26+0x310>)
    11c0:	4798      	blx	r3
    11c2:	1c03      	adds	r3, r0, #0
    11c4:	b299      	uxth	r1, r3
			COG_parameters[cur_EPD_type_index].frame_time_offset;
    11c6:	4b12      	ldr	r3, [pc, #72]	; (1210 <stage_handle_array_for_19_26+0x2d4>)
    11c8:	781b      	ldrb	r3, [r3, #0]
    11ca:	1c1a      	adds	r2, r3, #0
    11cc:	4811      	ldr	r0, [pc, #68]	; (1214 <stage_handle_array_for_19_26+0x2d8>)
    11ce:	1c13      	adds	r3, r2, #0
    11d0:	009b      	lsls	r3, r3, #2
    11d2:	189b      	adds	r3, r3, r2
    11d4:	009b      	lsls	r3, r3, #2
    11d6:	18c3      	adds	r3, r0, r3
    11d8:	3310      	adds	r3, #16
    11da:	881b      	ldrh	r3, [r3, #0]

			data_line_odd[s_index]=0;
            data_line_even[line_len-s_index]=0;
		}
		/* Count the frame time with offset */
		current_frame_time=(uint16_t)get_current_time_tick()+
    11dc:	18cb      	adds	r3, r1, r3
    11de:	b29a      	uxth	r2, r3
    11e0:	4b0d      	ldr	r3, [pc, #52]	; (1218 <stage_handle_array_for_19_26+0x2dc>)
    11e2:	801a      	strh	r2, [r3, #0]
			COG_parameters[cur_EPD_type_index].frame_time_offset;
	} while (stage_time>current_frame_time);
    11e4:	4b1a      	ldr	r3, [pc, #104]	; (1250 <stage_handle_array_for_19_26+0x314>)
    11e6:	881a      	ldrh	r2, [r3, #0]
    11e8:	4b0b      	ldr	r3, [pc, #44]	; (1218 <stage_handle_array_for_19_26+0x2dc>)
    11ea:	881b      	ldrh	r3, [r3, #0]
    11ec:	429a      	cmp	r2, r3
    11ee:	d900      	bls.n	11f2 <stage_handle_array_for_19_26+0x2b6>
    11f0:	e6d0      	b.n	f94 <stage_handle_array_for_19_26+0x58>

	/* Do while the SysTick timer fulfills the stage time */
	while(stage_time>get_current_time_tick());
    11f2:	46c0      	nop			; (mov r8, r8)
    11f4:	4b16      	ldr	r3, [pc, #88]	; (1250 <stage_handle_array_for_19_26+0x314>)
    11f6:	881b      	ldrh	r3, [r3, #0]
    11f8:	1c1c      	adds	r4, r3, #0
    11fa:	4b14      	ldr	r3, [pc, #80]	; (124c <stage_handle_array_for_19_26+0x310>)
    11fc:	4798      	blx	r3
    11fe:	1c03      	adds	r3, r0, #0
    1200:	429c      	cmp	r4, r3
    1202:	d8f7      	bhi.n	11f4 <stage_handle_array_for_19_26+0x2b8>

	/* Stop system timer */
	stop_EPD_timer();
    1204:	4b13      	ldr	r3, [pc, #76]	; (1254 <stage_handle_array_for_19_26+0x318>)
    1206:	4798      	blx	r3
}
    1208:	46bd      	mov	sp, r7
    120a:	b013      	add	sp, #76	; 0x4c
    120c:	bd90      	pop	{r4, r7, pc}
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	200000bc 	.word	0x200000bc
    1214:	00006240 	.word	0x00006240
    1218:	200000a8 	.word	0x200000a8
    121c:	000021e5 	.word	0x000021e5
    1220:	200000b8 	.word	0x200000b8
    1224:	0000633c 	.word	0x0000633c
    1228:	200000a4 	.word	0x200000a4
    122c:	200000b4 	.word	0x200000b4
    1230:	000062f4 	.word	0x000062f4
    1234:	200000ac 	.word	0x200000ac
    1238:	00006334 	.word	0x00006334
    123c:	200000b0 	.word	0x200000b0
    1240:	20000034 	.word	0x20000034
    1244:	000024f9 	.word	0x000024f9
    1248:	00002589 	.word	0x00002589
    124c:	00002219 	.word	0x00002219
    1250:	20000030 	.word	0x20000030
    1254:	000021f5 	.word	0x000021f5

00001258 <EPD_display_from_array_prt>:
 * - For more detail on driving stages, please refer to COG G2 document Section 5.
 *
 * \param previous_image_ptr The pointer of memory that stores previous image
 * \param new_image_ptr The pointer of memory that stores new image
 */
void EPD_display_from_array_prt (uint8_t *previous_image_ptr,uint8_t *new_image_ptr) {
    1258:	b580      	push	{r7, lr}
    125a:	b082      	sub	sp, #8
    125c:	af00      	add	r7, sp, #0
    125e:	6078      	str	r0, [r7, #4]
    1260:	6039      	str	r1, [r7, #0]
    _On_EPD_read_flash=NULL;
    1262:	4b27      	ldr	r3, [pc, #156]	; (1300 <EPD_display_from_array_prt+0xa8>)
    1264:	2200      	movs	r2, #0
    1266:	601a      	str	r2, [r3, #0]
    if(cur_EPD_type_index ==EPD_190 || cur_EPD_type_index ==EPD_260)
    1268:	4b26      	ldr	r3, [pc, #152]	; (1304 <EPD_display_from_array_prt+0xac>)
    126a:	781b      	ldrb	r3, [r3, #0]
    126c:	2b03      	cmp	r3, #3
    126e:	d003      	beq.n	1278 <EPD_display_from_array_prt+0x20>
    1270:	4b24      	ldr	r3, [pc, #144]	; (1304 <EPD_display_from_array_prt+0xac>)
    1272:	781b      	ldrb	r3, [r3, #0]
    1274:	2b04      	cmp	r3, #4
    1276:	d120      	bne.n	12ba <EPD_display_from_array_prt+0x62>
    {
    	stage_handle_array_for_19_26(previous_image_ptr,ADDRESS_NULL,Stage1);
    1278:	687a      	ldr	r2, [r7, #4]
    127a:	2301      	movs	r3, #1
    127c:	425b      	negs	r3, r3
    127e:	1c10      	adds	r0, r2, #0
    1280:	1c19      	adds	r1, r3, #0
    1282:	2200      	movs	r2, #0
    1284:	4b20      	ldr	r3, [pc, #128]	; (1308 <EPD_display_from_array_prt+0xb0>)
    1286:	4798      	blx	r3
    	stage_handle_array_for_19_26(previous_image_ptr,ADDRESS_NULL,Stage2);
    1288:	687a      	ldr	r2, [r7, #4]
    128a:	2301      	movs	r3, #1
    128c:	425b      	negs	r3, r3
    128e:	1c10      	adds	r0, r2, #0
    1290:	1c19      	adds	r1, r3, #0
    1292:	2201      	movs	r2, #1
    1294:	4b1c      	ldr	r3, [pc, #112]	; (1308 <EPD_display_from_array_prt+0xb0>)
    1296:	4798      	blx	r3
    	stage_handle_array_for_19_26(new_image_ptr,ADDRESS_NULL,Stage3);
    1298:	683a      	ldr	r2, [r7, #0]
    129a:	2301      	movs	r3, #1
    129c:	425b      	negs	r3, r3
    129e:	1c10      	adds	r0, r2, #0
    12a0:	1c19      	adds	r1, r3, #0
    12a2:	2202      	movs	r2, #2
    12a4:	4b18      	ldr	r3, [pc, #96]	; (1308 <EPD_display_from_array_prt+0xb0>)
    12a6:	4798      	blx	r3
    	stage_handle_array_for_19_26(new_image_ptr,ADDRESS_NULL,Stage4);
    12a8:	683a      	ldr	r2, [r7, #0]
    12aa:	2301      	movs	r3, #1
    12ac:	425b      	negs	r3, r3
    12ae:	1c10      	adds	r0, r2, #0
    12b0:	1c19      	adds	r1, r3, #0
    12b2:	2203      	movs	r2, #3
    12b4:	4b14      	ldr	r3, [pc, #80]	; (1308 <EPD_display_from_array_prt+0xb0>)
    12b6:	4798      	blx	r3
    12b8:	e01f      	b.n	12fa <EPD_display_from_array_prt+0xa2>
    }
    else
    {
        stage_handle_array(previous_image_ptr,ADDRESS_NULL,Stage1);
    12ba:	687a      	ldr	r2, [r7, #4]
    12bc:	2301      	movs	r3, #1
    12be:	425b      	negs	r3, r3
    12c0:	1c10      	adds	r0, r2, #0
    12c2:	1c19      	adds	r1, r3, #0
    12c4:	2200      	movs	r2, #0
    12c6:	4b11      	ldr	r3, [pc, #68]	; (130c <EPD_display_from_array_prt+0xb4>)
    12c8:	4798      	blx	r3
    	stage_handle_array(previous_image_ptr,ADDRESS_NULL,Stage2);
    12ca:	687a      	ldr	r2, [r7, #4]
    12cc:	2301      	movs	r3, #1
    12ce:	425b      	negs	r3, r3
    12d0:	1c10      	adds	r0, r2, #0
    12d2:	1c19      	adds	r1, r3, #0
    12d4:	2201      	movs	r2, #1
    12d6:	4b0d      	ldr	r3, [pc, #52]	; (130c <EPD_display_from_array_prt+0xb4>)
    12d8:	4798      	blx	r3
    	stage_handle_array(new_image_ptr,ADDRESS_NULL,Stage3);
    12da:	683a      	ldr	r2, [r7, #0]
    12dc:	2301      	movs	r3, #1
    12de:	425b      	negs	r3, r3
    12e0:	1c10      	adds	r0, r2, #0
    12e2:	1c19      	adds	r1, r3, #0
    12e4:	2202      	movs	r2, #2
    12e6:	4b09      	ldr	r3, [pc, #36]	; (130c <EPD_display_from_array_prt+0xb4>)
    12e8:	4798      	blx	r3
    	stage_handle_array(new_image_ptr,ADDRESS_NULL,Stage4);
    12ea:	683a      	ldr	r2, [r7, #0]
    12ec:	2301      	movs	r3, #1
    12ee:	425b      	negs	r3, r3
    12f0:	1c10      	adds	r0, r2, #0
    12f2:	1c19      	adds	r1, r3, #0
    12f4:	2203      	movs	r2, #3
    12f6:	4b05      	ldr	r3, [pc, #20]	; (130c <EPD_display_from_array_prt+0xb4>)
    12f8:	4798      	blx	r3
    }
}
    12fa:	46bd      	mov	sp, r7
    12fc:	b002      	add	sp, #8
    12fe:	bd80      	pop	{r7, pc}
    1300:	200000a4 	.word	0x200000a4
    1304:	200000bc 	.word	0x200000bc
    1308:	00000f3d 	.word	0x00000f3d
    130c:	00000699 	.word	0x00000699

00001310 <nothing_frame>:

/**
 * \brief Write Nothing Frame to COG
 * \note A frame that all D(x,y) are N(01). 0101=0x55=NOTHING
 */
void nothing_frame (void) {
    1310:	b580      	push	{r7, lr}
    1312:	b082      	sub	sp, #8
    1314:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i <  COG_parameters[cur_EPD_type_index].horizontal_size; i++) {
    1316:	1dbb      	adds	r3, r7, #6
    1318:	2200      	movs	r2, #0
    131a:	801a      	strh	r2, [r3, #0]
    131c:	e012      	b.n	1344 <nothing_frame+0x34>
		data_line_even[i]=NOTHING;
    131e:	4b34      	ldr	r3, [pc, #208]	; (13f0 <nothing_frame+0xe0>)
    1320:	681a      	ldr	r2, [r3, #0]
    1322:	1dbb      	adds	r3, r7, #6
    1324:	881b      	ldrh	r3, [r3, #0]
    1326:	18d3      	adds	r3, r2, r3
    1328:	2200      	movs	r2, #0
    132a:	701a      	strb	r2, [r3, #0]
		data_line_odd[i]=NOTHING;
    132c:	4b31      	ldr	r3, [pc, #196]	; (13f4 <nothing_frame+0xe4>)
    132e:	681a      	ldr	r2, [r3, #0]
    1330:	1dbb      	adds	r3, r7, #6
    1332:	881b      	ldrh	r3, [r3, #0]
    1334:	18d3      	adds	r3, r2, r3
    1336:	2200      	movs	r2, #0
    1338:	701a      	strb	r2, [r3, #0]
 * \brief Write Nothing Frame to COG
 * \note A frame that all D(x,y) are N(01). 0101=0x55=NOTHING
 */
void nothing_frame (void) {
	uint16_t i;
	for (i = 0; i <  COG_parameters[cur_EPD_type_index].horizontal_size; i++) {
    133a:	1dbb      	adds	r3, r7, #6
    133c:	881a      	ldrh	r2, [r3, #0]
    133e:	1dbb      	adds	r3, r7, #6
    1340:	3201      	adds	r2, #1
    1342:	801a      	strh	r2, [r3, #0]
    1344:	4b2c      	ldr	r3, [pc, #176]	; (13f8 <nothing_frame+0xe8>)
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	1c1a      	adds	r2, r3, #0
    134a:	492c      	ldr	r1, [pc, #176]	; (13fc <nothing_frame+0xec>)
    134c:	1c13      	adds	r3, r2, #0
    134e:	009b      	lsls	r3, r3, #2
    1350:	189b      	adds	r3, r3, r2
    1352:	009b      	lsls	r3, r3, #2
    1354:	18cb      	adds	r3, r1, r3
    1356:	3308      	adds	r3, #8
    1358:	885b      	ldrh	r3, [r3, #2]
    135a:	1dba      	adds	r2, r7, #6
    135c:	8812      	ldrh	r2, [r2, #0]
    135e:	429a      	cmp	r2, r3
    1360:	d3dd      	bcc.n	131e <nothing_frame+0xe>
		data_line_even[i]=NOTHING;
		data_line_odd[i]=NOTHING;
	}

	for (i = 0; i < COG_parameters[cur_EPD_type_index].vertical_size; i++) {
    1362:	1dbb      	adds	r3, r7, #6
    1364:	2200      	movs	r2, #0
    1366:	801a      	strh	r2, [r3, #0]
    1368:	e030      	b.n	13cc <nothing_frame+0xbc>

		/* Scan byte shift per data line */
		data_line_scan[(i>>2)]=SCAN_TABLE[(i%4)];
    136a:	4b25      	ldr	r3, [pc, #148]	; (1400 <nothing_frame+0xf0>)
    136c:	681a      	ldr	r2, [r3, #0]
    136e:	1dbb      	adds	r3, r7, #6
    1370:	881b      	ldrh	r3, [r3, #0]
    1372:	089b      	lsrs	r3, r3, #2
    1374:	b29b      	uxth	r3, r3
    1376:	18d3      	adds	r3, r2, r3
    1378:	1dba      	adds	r2, r7, #6
    137a:	8811      	ldrh	r1, [r2, #0]
    137c:	2203      	movs	r2, #3
    137e:	400a      	ands	r2, r1
    1380:	4920      	ldr	r1, [pc, #128]	; (1404 <nothing_frame+0xf4>)
    1382:	5c8a      	ldrb	r2, [r1, r2]
    1384:	701a      	strb	r2, [r3, #0]

		/* Sending data */
		epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8, COG_parameters[cur_EPD_type_index].data_line_size);
    1386:	4b1c      	ldr	r3, [pc, #112]	; (13f8 <nothing_frame+0xe8>)
    1388:	781b      	ldrb	r3, [r3, #0]
    138a:	1c1a      	adds	r2, r3, #0
    138c:	491b      	ldr	r1, [pc, #108]	; (13fc <nothing_frame+0xec>)
    138e:	1c13      	adds	r3, r2, #0
    1390:	009b      	lsls	r3, r3, #2
    1392:	189b      	adds	r3, r3, r2
    1394:	009b      	lsls	r3, r3, #2
    1396:	18cb      	adds	r3, r1, r3
    1398:	3308      	adds	r3, #8
    139a:	799b      	ldrb	r3, [r3, #6]
    139c:	4a1a      	ldr	r2, [pc, #104]	; (1408 <nothing_frame+0xf8>)
    139e:	200a      	movs	r0, #10
    13a0:	1c11      	adds	r1, r2, #0
    13a2:	1c1a      	adds	r2, r3, #0
    13a4:	4b19      	ldr	r3, [pc, #100]	; (140c <nothing_frame+0xfc>)
    13a6:	4798      	blx	r3

		/* Turn on Output Enable */
		epd_spi_send_byte (0x02, 0x07);
    13a8:	2002      	movs	r0, #2
    13aa:	2107      	movs	r1, #7
    13ac:	4b18      	ldr	r3, [pc, #96]	; (1410 <nothing_frame+0x100>)
    13ae:	4798      	blx	r3

		data_line_scan[(i>>2)]=0;
    13b0:	4b13      	ldr	r3, [pc, #76]	; (1400 <nothing_frame+0xf0>)
    13b2:	681a      	ldr	r2, [r3, #0]
    13b4:	1dbb      	adds	r3, r7, #6
    13b6:	881b      	ldrh	r3, [r3, #0]
    13b8:	089b      	lsrs	r3, r3, #2
    13ba:	b29b      	uxth	r3, r3
    13bc:	18d3      	adds	r3, r2, r3
    13be:	2200      	movs	r2, #0
    13c0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i <  COG_parameters[cur_EPD_type_index].horizontal_size; i++) {
		data_line_even[i]=NOTHING;
		data_line_odd[i]=NOTHING;
	}

	for (i = 0; i < COG_parameters[cur_EPD_type_index].vertical_size; i++) {
    13c2:	1dbb      	adds	r3, r7, #6
    13c4:	881a      	ldrh	r2, [r3, #0]
    13c6:	1dbb      	adds	r3, r7, #6
    13c8:	3201      	adds	r2, #1
    13ca:	801a      	strh	r2, [r3, #0]
    13cc:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <nothing_frame+0xe8>)
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	1c1a      	adds	r2, r3, #0
    13d2:	490a      	ldr	r1, [pc, #40]	; (13fc <nothing_frame+0xec>)
    13d4:	1c13      	adds	r3, r2, #0
    13d6:	009b      	lsls	r3, r3, #2
    13d8:	189b      	adds	r3, r3, r2
    13da:	009b      	lsls	r3, r3, #2
    13dc:	18cb      	adds	r3, r1, r3
    13de:	3308      	adds	r3, #8
    13e0:	889b      	ldrh	r3, [r3, #4]
    13e2:	1dba      	adds	r2, r7, #6
    13e4:	8812      	ldrh	r2, [r2, #0]
    13e6:	429a      	cmp	r2, r3
    13e8:	d3bf      	bcc.n	136a <nothing_frame+0x5a>
		/* Turn on Output Enable */
		epd_spi_send_byte (0x02, 0x07);

		data_line_scan[(i>>2)]=0;
	}
}
    13ea:	46bd      	mov	sp, r7
    13ec:	b002      	add	sp, #8
    13ee:	bd80      	pop	{r7, pc}
    13f0:	200000ac 	.word	0x200000ac
    13f4:	200000b0 	.word	0x200000b0
    13f8:	200000bc 	.word	0x200000bc
    13fc:	00006240 	.word	0x00006240
    1400:	200000b4 	.word	0x200000b4
    1404:	00006340 	.word	0x00006340
    1408:	20000034 	.word	0x20000034
    140c:	000024f9 	.word	0x000024f9
    1410:	00002589 	.word	0x00002589

00001414 <nothing_frame_for_19_26>:

/**
 * \brief Write Nothing Frame to COG for 1.9" and 2.6"
 */
void nothing_frame_for_19_26 (void) {
    1414:	b580      	push	{r7, lr}
    1416:	b082      	sub	sp, #8
    1418:	af00      	add	r7, sp, #0
	uint16_t i;
    uint8_t s_index,b_index,line_len;
	for (i = 0; i <  (COG_parameters[cur_EPD_type_index].horizontal_size*2); i++) {
    141a:	1dbb      	adds	r3, r7, #6
    141c:	2200      	movs	r2, #0
    141e:	801a      	strh	r2, [r3, #0]
    1420:	e00b      	b.n	143a <nothing_frame_for_19_26+0x26>
		data_line_scan[i]=NOTHING;
    1422:	4b4d      	ldr	r3, [pc, #308]	; (1558 <nothing_frame_for_19_26+0x144>)
    1424:	681a      	ldr	r2, [r3, #0]
    1426:	1dbb      	adds	r3, r7, #6
    1428:	881b      	ldrh	r3, [r3, #0]
    142a:	18d3      	adds	r3, r2, r3
    142c:	2200      	movs	r2, #0
    142e:	701a      	strb	r2, [r3, #0]
 * \brief Write Nothing Frame to COG for 1.9" and 2.6"
 */
void nothing_frame_for_19_26 (void) {
	uint16_t i;
    uint8_t s_index,b_index,line_len;
	for (i = 0; i <  (COG_parameters[cur_EPD_type_index].horizontal_size*2); i++) {
    1430:	1dbb      	adds	r3, r7, #6
    1432:	881a      	ldrh	r2, [r3, #0]
    1434:	1dbb      	adds	r3, r7, #6
    1436:	3201      	adds	r2, #1
    1438:	801a      	strh	r2, [r3, #0]
    143a:	1dbb      	adds	r3, r7, #6
    143c:	8819      	ldrh	r1, [r3, #0]
    143e:	4b47      	ldr	r3, [pc, #284]	; (155c <nothing_frame_for_19_26+0x148>)
    1440:	781b      	ldrb	r3, [r3, #0]
    1442:	1c1a      	adds	r2, r3, #0
    1444:	4846      	ldr	r0, [pc, #280]	; (1560 <nothing_frame_for_19_26+0x14c>)
    1446:	1c13      	adds	r3, r2, #0
    1448:	009b      	lsls	r3, r3, #2
    144a:	189b      	adds	r3, r3, r2
    144c:	009b      	lsls	r3, r3, #2
    144e:	18c3      	adds	r3, r0, r3
    1450:	3308      	adds	r3, #8
    1452:	885b      	ldrh	r3, [r3, #2]
    1454:	005b      	lsls	r3, r3, #1
    1456:	4299      	cmp	r1, r3
    1458:	dbe3      	blt.n	1422 <nothing_frame_for_19_26+0xe>
		data_line_scan[i]=NOTHING;
	}
    line_len=(COG_parameters[cur_EPD_type_index].vertical_size/8)-1;
    145a:	4b40      	ldr	r3, [pc, #256]	; (155c <nothing_frame_for_19_26+0x148>)
    145c:	781b      	ldrb	r3, [r3, #0]
    145e:	1c1a      	adds	r2, r3, #0
    1460:	493f      	ldr	r1, [pc, #252]	; (1560 <nothing_frame_for_19_26+0x14c>)
    1462:	1c13      	adds	r3, r2, #0
    1464:	009b      	lsls	r3, r3, #2
    1466:	189b      	adds	r3, r3, r2
    1468:	009b      	lsls	r3, r3, #2
    146a:	18cb      	adds	r3, r1, r3
    146c:	3308      	adds	r3, #8
    146e:	889b      	ldrh	r3, [r3, #4]
    1470:	08db      	lsrs	r3, r3, #3
    1472:	b29b      	uxth	r3, r3
    1474:	b2da      	uxtb	r2, r3
    1476:	1d7b      	adds	r3, r7, #5
    1478:	3a01      	subs	r2, #1
    147a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < COG_parameters[cur_EPD_type_index].vertical_size; i++) {
    147c:	1dbb      	adds	r3, r7, #6
    147e:	2200      	movs	r2, #0
    1480:	801a      	strh	r2, [r3, #0]
    1482:	e056      	b.n	1532 <nothing_frame_for_19_26+0x11e>

        s_index=i>>3;
    1484:	1dbb      	adds	r3, r7, #6
    1486:	881b      	ldrh	r3, [r3, #0]
    1488:	08db      	lsrs	r3, r3, #3
    148a:	b29a      	uxth	r2, r3
    148c:	1d3b      	adds	r3, r7, #4
    148e:	701a      	strb	r2, [r3, #0]
        b_index=(i%8);
    1490:	1dbb      	adds	r3, r7, #6
    1492:	881b      	ldrh	r3, [r3, #0]
    1494:	b2d9      	uxtb	r1, r3
    1496:	1cfb      	adds	r3, r7, #3
    1498:	2207      	movs	r2, #7
    149a:	400a      	ands	r2, r1
    149c:	701a      	strb	r2, [r3, #0]
        if((i%2)==0)
    149e:	1dbb      	adds	r3, r7, #6
    14a0:	881a      	ldrh	r2, [r3, #0]
    14a2:	2301      	movs	r3, #1
    14a4:	4013      	ands	r3, r2
    14a6:	b29b      	uxth	r3, r3
    14a8:	2b00      	cmp	r3, #0
    14aa:	d10d      	bne.n	14c8 <nothing_frame_for_19_26+0xb4>
        {//odd
             data_line_even[line_len-s_index]=scan_lookuptable[b_index];
    14ac:	4b2d      	ldr	r3, [pc, #180]	; (1564 <nothing_frame_for_19_26+0x150>)
    14ae:	681a      	ldr	r2, [r3, #0]
    14b0:	1d7b      	adds	r3, r7, #5
    14b2:	7819      	ldrb	r1, [r3, #0]
    14b4:	1d3b      	adds	r3, r7, #4
    14b6:	781b      	ldrb	r3, [r3, #0]
    14b8:	1acb      	subs	r3, r1, r3
    14ba:	18d3      	adds	r3, r2, r3
    14bc:	1cfa      	adds	r2, r7, #3
    14be:	7812      	ldrb	r2, [r2, #0]
    14c0:	4929      	ldr	r1, [pc, #164]	; (1568 <nothing_frame_for_19_26+0x154>)
    14c2:	5c8a      	ldrb	r2, [r1, r2]
    14c4:	701a      	strb	r2, [r3, #0]
    14c6:	e009      	b.n	14dc <nothing_frame_for_19_26+0xc8>
        }
        else
        {//even
             data_line_odd[s_index]=scan_lookuptable[b_index];
    14c8:	4b28      	ldr	r3, [pc, #160]	; (156c <nothing_frame_for_19_26+0x158>)
    14ca:	681a      	ldr	r2, [r3, #0]
    14cc:	1d3b      	adds	r3, r7, #4
    14ce:	781b      	ldrb	r3, [r3, #0]
    14d0:	18d3      	adds	r3, r2, r3
    14d2:	1cfa      	adds	r2, r7, #3
    14d4:	7812      	ldrb	r2, [r2, #0]
    14d6:	4924      	ldr	r1, [pc, #144]	; (1568 <nothing_frame_for_19_26+0x154>)
    14d8:	5c8a      	ldrb	r2, [r1, r2]
    14da:	701a      	strb	r2, [r3, #0]
        }

		/* Sending data */
		epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8, COG_parameters[cur_EPD_type_index].data_line_size);
    14dc:	4b1f      	ldr	r3, [pc, #124]	; (155c <nothing_frame_for_19_26+0x148>)
    14de:	781b      	ldrb	r3, [r3, #0]
    14e0:	1c1a      	adds	r2, r3, #0
    14e2:	491f      	ldr	r1, [pc, #124]	; (1560 <nothing_frame_for_19_26+0x14c>)
    14e4:	1c13      	adds	r3, r2, #0
    14e6:	009b      	lsls	r3, r3, #2
    14e8:	189b      	adds	r3, r3, r2
    14ea:	009b      	lsls	r3, r3, #2
    14ec:	18cb      	adds	r3, r1, r3
    14ee:	3308      	adds	r3, #8
    14f0:	799b      	ldrb	r3, [r3, #6]
    14f2:	4a1f      	ldr	r2, [pc, #124]	; (1570 <nothing_frame_for_19_26+0x15c>)
    14f4:	200a      	movs	r0, #10
    14f6:	1c11      	adds	r1, r2, #0
    14f8:	1c1a      	adds	r2, r3, #0
    14fa:	4b1e      	ldr	r3, [pc, #120]	; (1574 <nothing_frame_for_19_26+0x160>)
    14fc:	4798      	blx	r3

		/* Turn on Output Enable */
		epd_spi_send_byte (0x02, 0x07);
    14fe:	2002      	movs	r0, #2
    1500:	2107      	movs	r1, #7
    1502:	4b1d      	ldr	r3, [pc, #116]	; (1578 <nothing_frame_for_19_26+0x164>)
    1504:	4798      	blx	r3

        data_line_odd[s_index]=0;
    1506:	4b19      	ldr	r3, [pc, #100]	; (156c <nothing_frame_for_19_26+0x158>)
    1508:	681a      	ldr	r2, [r3, #0]
    150a:	1d3b      	adds	r3, r7, #4
    150c:	781b      	ldrb	r3, [r3, #0]
    150e:	18d3      	adds	r3, r2, r3
    1510:	2200      	movs	r2, #0
    1512:	701a      	strb	r2, [r3, #0]
        data_line_even[line_len-s_index]=0;
    1514:	4b13      	ldr	r3, [pc, #76]	; (1564 <nothing_frame_for_19_26+0x150>)
    1516:	681a      	ldr	r2, [r3, #0]
    1518:	1d7b      	adds	r3, r7, #5
    151a:	7819      	ldrb	r1, [r3, #0]
    151c:	1d3b      	adds	r3, r7, #4
    151e:	781b      	ldrb	r3, [r3, #0]
    1520:	1acb      	subs	r3, r1, r3
    1522:	18d3      	adds	r3, r2, r3
    1524:	2200      	movs	r2, #0
    1526:	701a      	strb	r2, [r3, #0]
    uint8_t s_index,b_index,line_len;
	for (i = 0; i <  (COG_parameters[cur_EPD_type_index].horizontal_size*2); i++) {
		data_line_scan[i]=NOTHING;
	}
    line_len=(COG_parameters[cur_EPD_type_index].vertical_size/8)-1;
	for (i = 0; i < COG_parameters[cur_EPD_type_index].vertical_size; i++) {
    1528:	1dbb      	adds	r3, r7, #6
    152a:	881a      	ldrh	r2, [r3, #0]
    152c:	1dbb      	adds	r3, r7, #6
    152e:	3201      	adds	r2, #1
    1530:	801a      	strh	r2, [r3, #0]
    1532:	4b0a      	ldr	r3, [pc, #40]	; (155c <nothing_frame_for_19_26+0x148>)
    1534:	781b      	ldrb	r3, [r3, #0]
    1536:	1c1a      	adds	r2, r3, #0
    1538:	4909      	ldr	r1, [pc, #36]	; (1560 <nothing_frame_for_19_26+0x14c>)
    153a:	1c13      	adds	r3, r2, #0
    153c:	009b      	lsls	r3, r3, #2
    153e:	189b      	adds	r3, r3, r2
    1540:	009b      	lsls	r3, r3, #2
    1542:	18cb      	adds	r3, r1, r3
    1544:	3308      	adds	r3, #8
    1546:	889b      	ldrh	r3, [r3, #4]
    1548:	1dba      	adds	r2, r7, #6
    154a:	8812      	ldrh	r2, [r2, #0]
    154c:	429a      	cmp	r2, r3
    154e:	d399      	bcc.n	1484 <nothing_frame_for_19_26+0x70>

        data_line_odd[s_index]=0;
        data_line_even[line_len-s_index]=0;

	}
}
    1550:	46bd      	mov	sp, r7
    1552:	b002      	add	sp, #8
    1554:	bd80      	pop	{r7, pc}
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	200000b4 	.word	0x200000b4
    155c:	200000bc 	.word	0x200000bc
    1560:	00006240 	.word	0x00006240
    1564:	200000ac 	.word	0x200000ac
    1568:	00006334 	.word	0x00006334
    156c:	200000b0 	.word	0x200000b0
    1570:	20000034 	.word	0x20000034
    1574:	000024f9 	.word	0x000024f9
    1578:	00002589 	.word	0x00002589

0000157c <border_dummy_line>:

/**
 * \brief BORDER Dummy Line for 1.44",1.9", 2" or 2.6"
 */
void border_dummy_line(void)
{
    157c:	b580      	push	{r7, lr}
    157e:	b082      	sub	sp, #8
    1580:	af00      	add	r7, sp, #0
	uint16_t	i;
	for (i =0 ; i < COG_parameters[cur_EPD_type_index].horizontal_size ; i++)
    1582:	1dbb      	adds	r3, r7, #6
    1584:	2200      	movs	r2, #0
    1586:	801a      	strh	r2, [r3, #0]
    1588:	e012      	b.n	15b0 <border_dummy_line+0x34>
	{
		data_line_odd[i]=0x55;
    158a:	4b2f      	ldr	r3, [pc, #188]	; (1648 <border_dummy_line+0xcc>)
    158c:	681a      	ldr	r2, [r3, #0]
    158e:	1dbb      	adds	r3, r7, #6
    1590:	881b      	ldrh	r3, [r3, #0]
    1592:	18d3      	adds	r3, r2, r3
    1594:	2255      	movs	r2, #85	; 0x55
    1596:	701a      	strb	r2, [r3, #0]
		data_line_even[i]=0x55;
    1598:	4b2c      	ldr	r3, [pc, #176]	; (164c <border_dummy_line+0xd0>)
    159a:	681a      	ldr	r2, [r3, #0]
    159c:	1dbb      	adds	r3, r7, #6
    159e:	881b      	ldrh	r3, [r3, #0]
    15a0:	18d3      	adds	r3, r2, r3
    15a2:	2255      	movs	r2, #85	; 0x55
    15a4:	701a      	strb	r2, [r3, #0]
 * \brief BORDER Dummy Line for 1.44",1.9", 2" or 2.6"
 */
void border_dummy_line(void)
{
	uint16_t	i;
	for (i =0 ; i < COG_parameters[cur_EPD_type_index].horizontal_size ; i++)
    15a6:	1dbb      	adds	r3, r7, #6
    15a8:	881a      	ldrh	r2, [r3, #0]
    15aa:	1dbb      	adds	r3, r7, #6
    15ac:	3201      	adds	r2, #1
    15ae:	801a      	strh	r2, [r3, #0]
    15b0:	4b27      	ldr	r3, [pc, #156]	; (1650 <border_dummy_line+0xd4>)
    15b2:	781b      	ldrb	r3, [r3, #0]
    15b4:	1c1a      	adds	r2, r3, #0
    15b6:	4927      	ldr	r1, [pc, #156]	; (1654 <border_dummy_line+0xd8>)
    15b8:	1c13      	adds	r3, r2, #0
    15ba:	009b      	lsls	r3, r3, #2
    15bc:	189b      	adds	r3, r3, r2
    15be:	009b      	lsls	r3, r3, #2
    15c0:	18cb      	adds	r3, r1, r3
    15c2:	3308      	adds	r3, #8
    15c4:	885b      	ldrh	r3, [r3, #2]
    15c6:	1dba      	adds	r2, r7, #6
    15c8:	8812      	ldrh	r2, [r2, #0]
    15ca:	429a      	cmp	r2, r3
    15cc:	d3dd      	bcc.n	158a <border_dummy_line+0xe>
	{
		data_line_odd[i]=0x55;
		data_line_even[i]=0x55;
	}

	for (i = 0; i < (COG_parameters[cur_EPD_type_index].vertical_size/8); i++)
    15ce:	1dbb      	adds	r3, r7, #6
    15d0:	2200      	movs	r2, #0
    15d2:	801a      	strh	r2, [r3, #0]
    15d4:	e00b      	b.n	15ee <border_dummy_line+0x72>
	{
		data_line_scan[i] =0x00;
    15d6:	4b20      	ldr	r3, [pc, #128]	; (1658 <border_dummy_line+0xdc>)
    15d8:	681a      	ldr	r2, [r3, #0]
    15da:	1dbb      	adds	r3, r7, #6
    15dc:	881b      	ldrh	r3, [r3, #0]
    15de:	18d3      	adds	r3, r2, r3
    15e0:	2200      	movs	r2, #0
    15e2:	701a      	strb	r2, [r3, #0]
	{
		data_line_odd[i]=0x55;
		data_line_even[i]=0x55;
	}

	for (i = 0; i < (COG_parameters[cur_EPD_type_index].vertical_size/8); i++)
    15e4:	1dbb      	adds	r3, r7, #6
    15e6:	881a      	ldrh	r2, [r3, #0]
    15e8:	1dbb      	adds	r3, r7, #6
    15ea:	3201      	adds	r2, #1
    15ec:	801a      	strh	r2, [r3, #0]
    15ee:	4b18      	ldr	r3, [pc, #96]	; (1650 <border_dummy_line+0xd4>)
    15f0:	781b      	ldrb	r3, [r3, #0]
    15f2:	1c1a      	adds	r2, r3, #0
    15f4:	4917      	ldr	r1, [pc, #92]	; (1654 <border_dummy_line+0xd8>)
    15f6:	1c13      	adds	r3, r2, #0
    15f8:	009b      	lsls	r3, r3, #2
    15fa:	189b      	adds	r3, r3, r2
    15fc:	009b      	lsls	r3, r3, #2
    15fe:	18cb      	adds	r3, r1, r3
    1600:	3308      	adds	r3, #8
    1602:	889b      	ldrh	r3, [r3, #4]
    1604:	08db      	lsrs	r3, r3, #3
    1606:	b29b      	uxth	r3, r3
    1608:	1dba      	adds	r2, r7, #6
    160a:	8812      	ldrh	r2, [r2, #0]
    160c:	429a      	cmp	r2, r3
    160e:	d3e2      	bcc.n	15d6 <border_dummy_line+0x5a>
	{
		data_line_scan[i] =0x00;
	}

	*data_line_border_byte=BORDER_BYTE_W;
    1610:	4b12      	ldr	r3, [pc, #72]	; (165c <border_dummy_line+0xe0>)
    1612:	681b      	ldr	r3, [r3, #0]
    1614:	22aa      	movs	r2, #170	; 0xaa
    1616:	701a      	strb	r2, [r3, #0]
	//Write a Borde(B) Dummy Line
	epd_spi_send (0x0a, (uint8_t *)&COG_Line.uint8, COG_parameters[cur_EPD_type_index].data_line_size);
    1618:	4b0d      	ldr	r3, [pc, #52]	; (1650 <border_dummy_line+0xd4>)
    161a:	781b      	ldrb	r3, [r3, #0]
    161c:	1c1a      	adds	r2, r3, #0
    161e:	490d      	ldr	r1, [pc, #52]	; (1654 <border_dummy_line+0xd8>)
    1620:	1c13      	adds	r3, r2, #0
    1622:	009b      	lsls	r3, r3, #2
    1624:	189b      	adds	r3, r3, r2
    1626:	009b      	lsls	r3, r3, #2
    1628:	18cb      	adds	r3, r1, r3
    162a:	3308      	adds	r3, #8
    162c:	799b      	ldrb	r3, [r3, #6]
    162e:	4a0c      	ldr	r2, [pc, #48]	; (1660 <border_dummy_line+0xe4>)
    1630:	200a      	movs	r0, #10
    1632:	1c11      	adds	r1, r2, #0
    1634:	1c1a      	adds	r2, r3, #0
    1636:	4b0b      	ldr	r3, [pc, #44]	; (1664 <border_dummy_line+0xe8>)
    1638:	4798      	blx	r3
	//Turn on OE
	epd_spi_send_byte (0x02, 0x07);
    163a:	2002      	movs	r0, #2
    163c:	2107      	movs	r1, #7
    163e:	4b0a      	ldr	r3, [pc, #40]	; (1668 <border_dummy_line+0xec>)
    1640:	4798      	blx	r3

}
    1642:	46bd      	mov	sp, r7
    1644:	b002      	add	sp, #8
    1646:	bd80      	pop	{r7, pc}
    1648:	200000b0 	.word	0x200000b0
    164c:	200000ac 	.word	0x200000ac
    1650:	200000bc 	.word	0x200000bc
    1654:	00006240 	.word	0x00006240
    1658:	200000b4 	.word	0x200000b4
    165c:	200000b8 	.word	0x200000b8
    1660:	20000034 	.word	0x20000034
    1664:	000024f9 	.word	0x000024f9
    1668:	00002589 	.word	0x00002589

0000166c <dummy_line>:

/**
 * \brief Write Dummy Line to COG
 * \note A line that all Data and Scan Bytes are 0x00
 */
void dummy_line(void) {
    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
	uint8_t	i;
	for (i = 0; i < (COG_parameters[cur_EPD_type_index].vertical_size/8); i++) {
    1672:	1dfb      	adds	r3, r7, #7
    1674:	2200      	movs	r2, #0
    1676:	701a      	strb	r2, [r3, #0]
    1678:	e009      	b.n	168e <dummy_line+0x22>
		COG_Line.uint8[i] = 0x00;
    167a:	1dfb      	adds	r3, r7, #7
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	4a19      	ldr	r2, [pc, #100]	; (16e4 <dummy_line+0x78>)
    1680:	2100      	movs	r1, #0
    1682:	54d1      	strb	r1, [r2, r3]
 * \brief Write Dummy Line to COG
 * \note A line that all Data and Scan Bytes are 0x00
 */
void dummy_line(void) {
	uint8_t	i;
	for (i = 0; i < (COG_parameters[cur_EPD_type_index].vertical_size/8); i++) {
    1684:	1dfb      	adds	r3, r7, #7
    1686:	781a      	ldrb	r2, [r3, #0]
    1688:	1dfb      	adds	r3, r7, #7
    168a:	3201      	adds	r2, #1
    168c:	701a      	strb	r2, [r3, #0]
    168e:	1dfb      	adds	r3, r7, #7
    1690:	781b      	ldrb	r3, [r3, #0]
    1692:	b299      	uxth	r1, r3
    1694:	4b14      	ldr	r3, [pc, #80]	; (16e8 <dummy_line+0x7c>)
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	1c1a      	adds	r2, r3, #0
    169a:	4814      	ldr	r0, [pc, #80]	; (16ec <dummy_line+0x80>)
    169c:	1c13      	adds	r3, r2, #0
    169e:	009b      	lsls	r3, r3, #2
    16a0:	189b      	adds	r3, r3, r2
    16a2:	009b      	lsls	r3, r3, #2
    16a4:	18c3      	adds	r3, r0, r3
    16a6:	3308      	adds	r3, #8
    16a8:	889b      	ldrh	r3, [r3, #4]
    16aa:	08db      	lsrs	r3, r3, #3
    16ac:	b29b      	uxth	r3, r3
    16ae:	4299      	cmp	r1, r3
    16b0:	d3e3      	bcc.n	167a <dummy_line+0xe>
		COG_Line.uint8[i] = 0x00;
	}

	/* Sending data */
	epd_spi_send (0x0A, (uint8_t *)&COG_Line.uint8, COG_parameters[cur_EPD_type_index].data_line_size);
    16b2:	4b0d      	ldr	r3, [pc, #52]	; (16e8 <dummy_line+0x7c>)
    16b4:	781b      	ldrb	r3, [r3, #0]
    16b6:	1c1a      	adds	r2, r3, #0
    16b8:	490c      	ldr	r1, [pc, #48]	; (16ec <dummy_line+0x80>)
    16ba:	1c13      	adds	r3, r2, #0
    16bc:	009b      	lsls	r3, r3, #2
    16be:	189b      	adds	r3, r3, r2
    16c0:	009b      	lsls	r3, r3, #2
    16c2:	18cb      	adds	r3, r1, r3
    16c4:	3308      	adds	r3, #8
    16c6:	799b      	ldrb	r3, [r3, #6]
    16c8:	4a06      	ldr	r2, [pc, #24]	; (16e4 <dummy_line+0x78>)
    16ca:	200a      	movs	r0, #10
    16cc:	1c11      	adds	r1, r2, #0
    16ce:	1c1a      	adds	r2, r3, #0
    16d0:	4b07      	ldr	r3, [pc, #28]	; (16f0 <dummy_line+0x84>)
    16d2:	4798      	blx	r3

	/* Turn on Output Enable */
	epd_spi_send_byte (0x02, 0x07);
    16d4:	2002      	movs	r0, #2
    16d6:	2107      	movs	r1, #7
    16d8:	4b06      	ldr	r3, [pc, #24]	; (16f4 <dummy_line+0x88>)
    16da:	4798      	blx	r3
}
    16dc:	46bd      	mov	sp, r7
    16de:	b002      	add	sp, #8
    16e0:	bd80      	pop	{r7, pc}
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	20000034 	.word	0x20000034
    16e8:	200000bc 	.word	0x200000bc
    16ec:	00006240 	.word	0x00006240
    16f0:	000024f9 	.word	0x000024f9
    16f4:	00002589 	.word	0x00002589

000016f8 <EPD_power_off>:

/**
 * \brief Power Off COG Driver
 * \note For detailed flow and description, please refer to the COG G2 document Section 6.
 */
uint8_t EPD_power_off (void) {
    16f8:	b580      	push	{r7, lr}
    16fa:	af00      	add	r7, sp, #0

	if(cur_EPD_type_index ==EPD_190 || cur_EPD_type_index ==EPD_260)
    16fc:	4b3b      	ldr	r3, [pc, #236]	; (17ec <EPD_power_off+0xf4>)
    16fe:	781b      	ldrb	r3, [r3, #0]
    1700:	2b03      	cmp	r3, #3
    1702:	d003      	beq.n	170c <EPD_power_off+0x14>
    1704:	4b39      	ldr	r3, [pc, #228]	; (17ec <EPD_power_off+0xf4>)
    1706:	781b      	ldrb	r3, [r3, #0]
    1708:	2b04      	cmp	r3, #4
    170a:	d102      	bne.n	1712 <EPD_power_off+0x1a>
	{
		nothing_frame_for_19_26();
    170c:	4b38      	ldr	r3, [pc, #224]	; (17f0 <EPD_power_off+0xf8>)
    170e:	4798      	blx	r3
    1710:	e001      	b.n	1716 <EPD_power_off+0x1e>
	}
	else
	{
		nothing_frame();
    1712:	4b38      	ldr	r3, [pc, #224]	; (17f4 <EPD_power_off+0xfc>)
    1714:	4798      	blx	r3
	}

	if(cur_EPD_type_index==EPD_270)
    1716:	4b35      	ldr	r3, [pc, #212]	; (17ec <EPD_power_off+0xf4>)
    1718:	781b      	ldrb	r3, [r3, #0]
    171a:	2b02      	cmp	r3, #2
    171c:	d110      	bne.n	1740 <EPD_power_off+0x48>
	{
		dummy_line();
    171e:	4b36      	ldr	r3, [pc, #216]	; (17f8 <EPD_power_off+0x100>)
    1720:	4798      	blx	r3
		delay_ms (25);
    1722:	2019      	movs	r0, #25
    1724:	4b35      	ldr	r3, [pc, #212]	; (17fc <EPD_power_off+0x104>)
    1726:	4798      	blx	r3
		EPD_border_low();
    1728:	2021      	movs	r0, #33	; 0x21
    172a:	2100      	movs	r1, #0
    172c:	4b34      	ldr	r3, [pc, #208]	; (1800 <EPD_power_off+0x108>)
    172e:	4798      	blx	r3
		delay_ms (200);
    1730:	20c8      	movs	r0, #200	; 0xc8
    1732:	4b32      	ldr	r3, [pc, #200]	; (17fc <EPD_power_off+0x104>)
    1734:	4798      	blx	r3
		EPD_border_high();
    1736:	2021      	movs	r0, #33	; 0x21
    1738:	2101      	movs	r1, #1
    173a:	4b31      	ldr	r3, [pc, #196]	; (1800 <EPD_power_off+0x108>)
    173c:	4798      	blx	r3
    173e:	e004      	b.n	174a <EPD_power_off+0x52>
	}
	else
	{
		border_dummy_line();
    1740:	4b30      	ldr	r3, [pc, #192]	; (1804 <EPD_power_off+0x10c>)
    1742:	4798      	blx	r3
		delay_ms (200);
    1744:	20c8      	movs	r0, #200	; 0xc8
    1746:	4b2d      	ldr	r3, [pc, #180]	; (17fc <EPD_power_off+0x104>)
    1748:	4798      	blx	r3
	}

	//Check DC/DC
	if((SPI_R(0x0F,0x00) & 0x40) == 0x00) return ERROR_DC;
    174a:	200f      	movs	r0, #15
    174c:	2100      	movs	r1, #0
    174e:	4b2e      	ldr	r3, [pc, #184]	; (1808 <EPD_power_off+0x110>)
    1750:	4798      	blx	r3
    1752:	1c03      	adds	r3, r0, #0
    1754:	1c1a      	adds	r2, r3, #0
    1756:	2340      	movs	r3, #64	; 0x40
    1758:	4013      	ands	r3, r2
    175a:	d101      	bne.n	1760 <EPD_power_off+0x68>
    175c:	23f3      	movs	r3, #243	; 0xf3
    175e:	e042      	b.n	17e6 <EPD_power_off+0xee>

	epd_spi_send_byte (0x0B, 0x00);
    1760:	200b      	movs	r0, #11
    1762:	2100      	movs	r1, #0
    1764:	4b29      	ldr	r3, [pc, #164]	; (180c <EPD_power_off+0x114>)
    1766:	4798      	blx	r3

	//Turn on Latch Reset
	epd_spi_send_byte (0x03, 0x01);
    1768:	2003      	movs	r0, #3
    176a:	2101      	movs	r1, #1
    176c:	4b27      	ldr	r3, [pc, #156]	; (180c <EPD_power_off+0x114>)
    176e:	4798      	blx	r3
	//Power off charge pump Vcom
	epd_spi_send_byte (0x05, 0x03);
    1770:	2005      	movs	r0, #5
    1772:	2103      	movs	r1, #3
    1774:	4b25      	ldr	r3, [pc, #148]	; (180c <EPD_power_off+0x114>)
    1776:	4798      	blx	r3
	//Power off charge pump neg voltage
	epd_spi_send_byte (0x05, 0x01);
    1778:	2005      	movs	r0, #5
    177a:	2101      	movs	r1, #1
    177c:	4b23      	ldr	r3, [pc, #140]	; (180c <EPD_power_off+0x114>)
    177e:	4798      	blx	r3
	delay_ms(120);
    1780:	2078      	movs	r0, #120	; 0x78
    1782:	4b1e      	ldr	r3, [pc, #120]	; (17fc <EPD_power_off+0x104>)
    1784:	4798      	blx	r3
	//Discharge internal SPI
	epd_spi_send_byte (0x04, 0x80);
    1786:	2004      	movs	r0, #4
    1788:	2180      	movs	r1, #128	; 0x80
    178a:	4b20      	ldr	r3, [pc, #128]	; (180c <EPD_power_off+0x114>)
    178c:	4798      	blx	r3
	//Turn off all charge pump
	epd_spi_send_byte (0x05, 0x00);
    178e:	2005      	movs	r0, #5
    1790:	2100      	movs	r1, #0
    1792:	4b1e      	ldr	r3, [pc, #120]	; (180c <EPD_power_off+0x114>)
    1794:	4798      	blx	r3
	//Turn off OSC
	epd_spi_send_byte (0x07, 0x01);
    1796:	2007      	movs	r0, #7
    1798:	2101      	movs	r1, #1
    179a:	4b1c      	ldr	r3, [pc, #112]	; (180c <EPD_power_off+0x114>)
    179c:	4798      	blx	r3
	delay_ms(50);
    179e:	2032      	movs	r0, #50	; 0x32
    17a0:	4b16      	ldr	r3, [pc, #88]	; (17fc <EPD_power_off+0x104>)
    17a2:	4798      	blx	r3

	epd_spi_detach ();
    17a4:	4b1a      	ldr	r3, [pc, #104]	; (1810 <EPD_power_off+0x118>)
    17a6:	4798      	blx	r3
	EPD_Vcc_turn_off ();
    17a8:	2023      	movs	r0, #35	; 0x23
    17aa:	2100      	movs	r1, #0
    17ac:	4b14      	ldr	r3, [pc, #80]	; (1800 <EPD_power_off+0x108>)
    17ae:	4798      	blx	r3
	EPD_border_low();
    17b0:	2021      	movs	r0, #33	; 0x21
    17b2:	2100      	movs	r1, #0
    17b4:	4b12      	ldr	r3, [pc, #72]	; (1800 <EPD_power_off+0x108>)
    17b6:	4798      	blx	r3
	delay_ms (10);
    17b8:	200a      	movs	r0, #10
    17ba:	4b10      	ldr	r3, [pc, #64]	; (17fc <EPD_power_off+0x104>)
    17bc:	4798      	blx	r3
	EPD_cs_low();
    17be:	2005      	movs	r0, #5
    17c0:	2100      	movs	r1, #0
    17c2:	4b0f      	ldr	r3, [pc, #60]	; (1800 <EPD_power_off+0x108>)
    17c4:	4798      	blx	r3
	EPD_rst_low();
    17c6:	2027      	movs	r0, #39	; 0x27
    17c8:	2100      	movs	r1, #0
    17ca:	4b0d      	ldr	r3, [pc, #52]	; (1800 <EPD_power_off+0x108>)
    17cc:	4798      	blx	r3

	EPD_discharge_high ();
    17ce:	2026      	movs	r0, #38	; 0x26
    17d0:	2101      	movs	r1, #1
    17d2:	4b0b      	ldr	r3, [pc, #44]	; (1800 <EPD_power_off+0x108>)
    17d4:	4798      	blx	r3
	delay_ms (150);
    17d6:	2096      	movs	r0, #150	; 0x96
    17d8:	4b08      	ldr	r3, [pc, #32]	; (17fc <EPD_power_off+0x104>)
    17da:	4798      	blx	r3
	EPD_discharge_low ();
    17dc:	2026      	movs	r0, #38	; 0x26
    17de:	2100      	movs	r1, #0
    17e0:	4b07      	ldr	r3, [pc, #28]	; (1800 <EPD_power_off+0x108>)
    17e2:	4798      	blx	r3

	return RES_OK;
    17e4:	2300      	movs	r3, #0
}
    17e6:	1c18      	adds	r0, r3, #0
    17e8:	46bd      	mov	sp, r7
    17ea:	bd80      	pop	{r7, pc}
    17ec:	200000bc 	.word	0x200000bc
    17f0:	00001415 	.word	0x00001415
    17f4:	00001311 	.word	0x00001311
    17f8:	0000166d 	.word	0x0000166d
    17fc:	000048c5 	.word	0x000048c5
    1800:	00000219 	.word	0x00000219
    1804:	0000157d 	.word	0x0000157d
    1808:	00002459 	.word	0x00002459
    180c:	00002589 	.word	0x00002589
    1810:	00002371 	.word	0x00002371

00001814 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1814:	b580      	push	{r7, lr}
    1816:	b082      	sub	sp, #8
    1818:	af00      	add	r7, sp, #0
    181a:	1c02      	adds	r2, r0, #0
    181c:	1dfb      	adds	r3, r7, #7
    181e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1820:	4b06      	ldr	r3, [pc, #24]	; (183c <system_interrupt_enable+0x28>)
    1822:	1dfa      	adds	r2, r7, #7
    1824:	7812      	ldrb	r2, [r2, #0]
    1826:	1c11      	adds	r1, r2, #0
    1828:	221f      	movs	r2, #31
    182a:	400a      	ands	r2, r1
    182c:	2101      	movs	r1, #1
    182e:	1c08      	adds	r0, r1, #0
    1830:	4090      	lsls	r0, r2
    1832:	1c02      	adds	r2, r0, #0
    1834:	601a      	str	r2, [r3, #0]
}
    1836:	46bd      	mov	sp, r7
    1838:	b002      	add	sp, #8
    183a:	bd80      	pop	{r7, pc}
    183c:	e000e100 	.word	0xe000e100

00001840 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1840:	b580      	push	{r7, lr}
    1842:	b082      	sub	sp, #8
    1844:	af00      	add	r7, sp, #0
    1846:	1c02      	adds	r2, r0, #0
    1848:	1dfb      	adds	r3, r7, #7
    184a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    184c:	4a07      	ldr	r2, [pc, #28]	; (186c <system_interrupt_disable+0x2c>)
    184e:	1dfb      	adds	r3, r7, #7
    1850:	781b      	ldrb	r3, [r3, #0]
    1852:	1c19      	adds	r1, r3, #0
    1854:	231f      	movs	r3, #31
    1856:	400b      	ands	r3, r1
    1858:	2101      	movs	r1, #1
    185a:	1c08      	adds	r0, r1, #0
    185c:	4098      	lsls	r0, r3
    185e:	1c03      	adds	r3, r0, #0
    1860:	1c19      	adds	r1, r3, #0
    1862:	2380      	movs	r3, #128	; 0x80
    1864:	50d1      	str	r1, [r2, r3]
}
    1866:	46bd      	mov	sp, r7
    1868:	b002      	add	sp, #8
    186a:	bd80      	pop	{r7, pc}
    186c:	e000e100 	.word	0xe000e100

00001870 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    1870:	b580      	push	{r7, lr}
    1872:	b084      	sub	sp, #16
    1874:	af00      	add	r7, sp, #0
    1876:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    187e:	68fb      	ldr	r3, [r7, #12]
    1880:	7e5b      	ldrb	r3, [r3, #25]
    1882:	b2db      	uxtb	r3, r3
    1884:	b2db      	uxtb	r3, r3
    1886:	b25b      	sxtb	r3, r3
    1888:	2b00      	cmp	r3, #0
    188a:	da01      	bge.n	1890 <adc_is_syncing+0x20>
		return true;
    188c:	2301      	movs	r3, #1
    188e:	e000      	b.n	1892 <adc_is_syncing+0x22>
	}

	return false;
    1890:	2300      	movs	r3, #0
}
    1892:	1c18      	adds	r0, r3, #0
    1894:	46bd      	mov	sp, r7
    1896:	b004      	add	sp, #16
    1898:	bd80      	pop	{r7, pc}
    189a:	46c0      	nop			; (mov r8, r8)

0000189c <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    189c:	b580      	push	{r7, lr}
    189e:	b086      	sub	sp, #24
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    18aa:	693b      	ldr	r3, [r7, #16]
    18ac:	7e1b      	ldrb	r3, [r3, #24]
    18ae:	b2db      	uxtb	r3, r3
    18b0:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    18b2:	2300      	movs	r3, #0
    18b4:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    18b6:	68fa      	ldr	r2, [r7, #12]
    18b8:	2301      	movs	r3, #1
    18ba:	4013      	ands	r3, r2
    18bc:	d003      	beq.n	18c6 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    18be:	697b      	ldr	r3, [r7, #20]
    18c0:	2201      	movs	r2, #1
    18c2:	4313      	orrs	r3, r2
    18c4:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    18c6:	68fa      	ldr	r2, [r7, #12]
    18c8:	2304      	movs	r3, #4
    18ca:	4013      	ands	r3, r2
    18cc:	d003      	beq.n	18d6 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    18ce:	697b      	ldr	r3, [r7, #20]
    18d0:	2202      	movs	r2, #2
    18d2:	4313      	orrs	r3, r2
    18d4:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    18d6:	68fa      	ldr	r2, [r7, #12]
    18d8:	2302      	movs	r3, #2
    18da:	4013      	ands	r3, r2
    18dc:	d003      	beq.n	18e6 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    18de:	697b      	ldr	r3, [r7, #20]
    18e0:	2204      	movs	r2, #4
    18e2:	4313      	orrs	r3, r2
    18e4:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    18e6:	697b      	ldr	r3, [r7, #20]
}
    18e8:	1c18      	adds	r0, r3, #0
    18ea:	46bd      	mov	sp, r7
    18ec:	b006      	add	sp, #24
    18ee:	bd80      	pop	{r7, pc}

000018f0 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    18f0:	b580      	push	{r7, lr}
    18f2:	b084      	sub	sp, #16
    18f4:	af00      	add	r7, sp, #0
    18f6:	6078      	str	r0, [r7, #4]
    18f8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	681b      	ldr	r3, [r3, #0]
    18fe:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    1900:	2300      	movs	r3, #0
    1902:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    1904:	683a      	ldr	r2, [r7, #0]
    1906:	2301      	movs	r3, #1
    1908:	4013      	ands	r3, r2
    190a:	d003      	beq.n	1914 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    190c:	68fb      	ldr	r3, [r7, #12]
    190e:	2201      	movs	r2, #1
    1910:	4313      	orrs	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    1914:	683a      	ldr	r2, [r7, #0]
    1916:	2302      	movs	r3, #2
    1918:	4013      	ands	r3, r2
    191a:	d003      	beq.n	1924 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    191c:	68fb      	ldr	r3, [r7, #12]
    191e:	2204      	movs	r2, #4
    1920:	4313      	orrs	r3, r2
    1922:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    1924:	683a      	ldr	r2, [r7, #0]
    1926:	2304      	movs	r3, #4
    1928:	4013      	ands	r3, r2
    192a:	d003      	beq.n	1934 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    192c:	68fb      	ldr	r3, [r7, #12]
    192e:	2202      	movs	r2, #2
    1930:	4313      	orrs	r3, r2
    1932:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    1934:	68fb      	ldr	r3, [r7, #12]
    1936:	b2da      	uxtb	r2, r3
    1938:	68bb      	ldr	r3, [r7, #8]
    193a:	761a      	strb	r2, [r3, #24]
}
    193c:	46bd      	mov	sp, r7
    193e:	b004      	add	sp, #16
    1940:	bd80      	pop	{r7, pc}
    1942:	46c0      	nop			; (mov r8, r8)

00001944 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    1944:	b580      	push	{r7, lr}
    1946:	b084      	sub	sp, #16
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	681b      	ldr	r3, [r3, #0]
    1950:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	687b      	ldr	r3, [r7, #4]
    1956:	1c18      	adds	r0, r3, #0
    1958:	4b0e      	ldr	r3, [pc, #56]	; (1994 <adc_enable+0x50>)
    195a:	4798      	blx	r3
    195c:	1c03      	adds	r3, r0, #0
    195e:	2b00      	cmp	r3, #0
    1960:	d1f8      	bne.n	1954 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    1962:	2017      	movs	r0, #23
    1964:	4b0c      	ldr	r3, [pc, #48]	; (1998 <adc_enable+0x54>)
    1966:	4798      	blx	r3
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1968:	68fb      	ldr	r3, [r7, #12]
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	b2db      	uxtb	r3, r3
    196e:	2202      	movs	r2, #2
    1970:	4313      	orrs	r3, r2
    1972:	b2da      	uxtb	r2, r3
    1974:	68fb      	ldr	r3, [r7, #12]
    1976:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    1978:	46c0      	nop			; (mov r8, r8)
    197a:	687b      	ldr	r3, [r7, #4]
    197c:	1c18      	adds	r0, r3, #0
    197e:	4b05      	ldr	r3, [pc, #20]	; (1994 <adc_enable+0x50>)
    1980:	4798      	blx	r3
    1982:	1c03      	adds	r3, r0, #0
    1984:	2b00      	cmp	r3, #0
    1986:	d1f8      	bne.n	197a <adc_enable+0x36>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    1988:	2300      	movs	r3, #0
}
    198a:	1c18      	adds	r0, r3, #0
    198c:	46bd      	mov	sp, r7
    198e:	b004      	add	sp, #16
    1990:	bd80      	pop	{r7, pc}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	00001871 	.word	0x00001871
    1998:	00001815 	.word	0x00001815

0000199c <adc_disable>:
 *
 * \param[in] module_inst Pointer to the ADC software instance struct
 */
static inline enum status_code adc_disable(
		struct adc_module *const module_inst)
{
    199c:	b580      	push	{r7, lr}
    199e:	b084      	sub	sp, #16
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	681b      	ldr	r3, [r3, #0]
    19a8:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_ADC);
    19aa:	2017      	movs	r0, #23
    19ac:	4b0f      	ldr	r3, [pc, #60]	; (19ec <adc_disable+0x50>)
    19ae:	4798      	blx	r3
#   endif
#endif

	while (adc_is_syncing(module_inst)) {
    19b0:	46c0      	nop			; (mov r8, r8)
    19b2:	687b      	ldr	r3, [r7, #4]
    19b4:	1c18      	adds	r0, r3, #0
    19b6:	4b0e      	ldr	r3, [pc, #56]	; (19f0 <adc_disable+0x54>)
    19b8:	4798      	blx	r3
    19ba:	1c03      	adds	r3, r0, #0
    19bc:	2b00      	cmp	r3, #0
    19be:	d1f8      	bne.n	19b2 <adc_disable+0x16>
		/* Wait for synchronization */
	}

	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    19c0:	68fb      	ldr	r3, [r7, #12]
    19c2:	781b      	ldrb	r3, [r3, #0]
    19c4:	b2db      	uxtb	r3, r3
    19c6:	2202      	movs	r2, #2
    19c8:	4393      	bics	r3, r2
    19ca:	b2da      	uxtb	r2, r3
    19cc:	68fb      	ldr	r3, [r7, #12]
    19ce:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    19d0:	46c0      	nop			; (mov r8, r8)
    19d2:	687b      	ldr	r3, [r7, #4]
    19d4:	1c18      	adds	r0, r3, #0
    19d6:	4b06      	ldr	r3, [pc, #24]	; (19f0 <adc_disable+0x54>)
    19d8:	4798      	blx	r3
    19da:	1c03      	adds	r3, r0, #0
    19dc:	2b00      	cmp	r3, #0
    19de:	d1f8      	bne.n	19d2 <adc_disable+0x36>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    19e0:	2300      	movs	r3, #0
}
    19e2:	1c18      	adds	r0, r3, #0
    19e4:	46bd      	mov	sp, r7
    19e6:	b004      	add	sp, #16
    19e8:	bd80      	pop	{r7, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	00001841 	.word	0x00001841
    19f0:	00001871 	.word	0x00001871

000019f4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    19f4:	b580      	push	{r7, lr}
    19f6:	b084      	sub	sp, #16
    19f8:	af00      	add	r7, sp, #0
    19fa:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	687b      	ldr	r3, [r7, #4]
    1a06:	1c18      	adds	r0, r3, #0
    1a08:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <adc_start_conversion+0x44>)
    1a0a:	4798      	blx	r3
    1a0c:	1c03      	adds	r3, r0, #0
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d1f8      	bne.n	1a04 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1a12:	68fb      	ldr	r3, [r7, #12]
    1a14:	7b1b      	ldrb	r3, [r3, #12]
    1a16:	b2db      	uxtb	r3, r3
    1a18:	2202      	movs	r2, #2
    1a1a:	4313      	orrs	r3, r2
    1a1c:	b2da      	uxtb	r2, r3
    1a1e:	68fb      	ldr	r3, [r7, #12]
    1a20:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	1c18      	adds	r0, r3, #0
    1a28:	4b03      	ldr	r3, [pc, #12]	; (1a38 <adc_start_conversion+0x44>)
    1a2a:	4798      	blx	r3
    1a2c:	1c03      	adds	r3, r0, #0
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d1f8      	bne.n	1a24 <adc_start_conversion+0x30>
		/* Wait for synchronization */
	}
}
    1a32:	46bd      	mov	sp, r7
    1a34:	b004      	add	sp, #16
    1a36:	bd80      	pop	{r7, pc}
    1a38:	00001871 	.word	0x00001871

00001a3c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    1a3c:	b580      	push	{r7, lr}
    1a3e:	b084      	sub	sp, #16
    1a40:	af00      	add	r7, sp, #0
    1a42:	6078      	str	r0, [r7, #4]
    1a44:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1a46:	687b      	ldr	r3, [r7, #4]
    1a48:	1c18      	adds	r0, r3, #0
    1a4a:	4b18      	ldr	r3, [pc, #96]	; (1aac <adc_read+0x70>)
    1a4c:	4798      	blx	r3
    1a4e:	1c02      	adds	r2, r0, #0
    1a50:	2301      	movs	r3, #1
    1a52:	4013      	ands	r3, r2
    1a54:	d101      	bne.n	1a5a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    1a56:	2305      	movs	r3, #5
    1a58:	e024      	b.n	1aa4 <adc_read+0x68>
	}

	Adc *const adc_module = module_inst->hw;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    1a60:	46c0      	nop			; (mov r8, r8)
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	1c18      	adds	r0, r3, #0
    1a66:	4b12      	ldr	r3, [pc, #72]	; (1ab0 <adc_read+0x74>)
    1a68:	4798      	blx	r3
    1a6a:	1c03      	adds	r3, r0, #0
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d1f8      	bne.n	1a62 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    1a70:	68fb      	ldr	r3, [r7, #12]
    1a72:	8b5b      	ldrh	r3, [r3, #26]
    1a74:	b29a      	uxth	r2, r3
    1a76:	683b      	ldr	r3, [r7, #0]
    1a78:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	1c18      	adds	r0, r3, #0
    1a7e:	2101      	movs	r1, #1
    1a80:	4b0c      	ldr	r3, [pc, #48]	; (1ab4 <adc_read+0x78>)
    1a82:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	1c18      	adds	r0, r3, #0
    1a88:	4b08      	ldr	r3, [pc, #32]	; (1aac <adc_read+0x70>)
    1a8a:	4798      	blx	r3
    1a8c:	1c02      	adds	r2, r0, #0
    1a8e:	2304      	movs	r3, #4
    1a90:	4013      	ands	r3, r2
    1a92:	d006      	beq.n	1aa2 <adc_read+0x66>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	1c18      	adds	r0, r3, #0
    1a98:	2104      	movs	r1, #4
    1a9a:	4b06      	ldr	r3, [pc, #24]	; (1ab4 <adc_read+0x78>)
    1a9c:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    1a9e:	231e      	movs	r3, #30
    1aa0:	e000      	b.n	1aa4 <adc_read+0x68>
	}

	return STATUS_OK;
    1aa2:	2300      	movs	r3, #0
}
    1aa4:	1c18      	adds	r0, r3, #0
    1aa6:	46bd      	mov	sp, r7
    1aa8:	b004      	add	sp, #16
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	0000189d 	.word	0x0000189d
    1ab0:	00001871 	.word	0x00001871
    1ab4:	000018f1 	.word	0x000018f1

00001ab8 <arch_ioport_pin_to_port_id>:
typedef uint32_t ioport_pin_t;
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
    1ab8:	b580      	push	{r7, lr}
    1aba:	b082      	sub	sp, #8
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
	return pin >> 5;
    1ac0:	687b      	ldr	r3, [r7, #4]
    1ac2:	095b      	lsrs	r3, r3, #5
}
    1ac4:	1c18      	adds	r0, r3, #0
    1ac6:	46bd      	mov	sp, r7
    1ac8:	b002      	add	sp, #8
    1aca:	bd80      	pop	{r7, pc}

00001acc <arch_ioport_port_to_base>:

inline static PortGroup *arch_ioport_port_to_base(
		ioport_port_t port)
{
    1acc:	b580      	push	{r7, lr}
    1ace:	b082      	sub	sp, #8
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	6078      	str	r0, [r7, #4]
	return &PORT->Group[port];
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	01db      	lsls	r3, r3, #7
    1ad8:	4a02      	ldr	r2, [pc, #8]	; (1ae4 <arch_ioport_port_to_base+0x18>)
    1ada:	189b      	adds	r3, r3, r2
}
    1adc:	1c18      	adds	r0, r3, #0
    1ade:	46bd      	mov	sp, r7
    1ae0:	b002      	add	sp, #8
    1ae2:	bd80      	pop	{r7, pc}
    1ae4:	41004400 	.word	0x41004400

00001ae8 <arch_ioport_pin_to_base>:

inline static PortGroup *arch_ioport_pin_to_base(ioport_pin_t pin)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	b082      	sub	sp, #8
    1aec:	af00      	add	r7, sp, #0
    1aee:	6078      	str	r0, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	1c18      	adds	r0, r3, #0
    1af4:	4b05      	ldr	r3, [pc, #20]	; (1b0c <arch_ioport_pin_to_base+0x24>)
    1af6:	4798      	blx	r3
    1af8:	1c03      	adds	r3, r0, #0
    1afa:	1c18      	adds	r0, r3, #0
    1afc:	4b04      	ldr	r3, [pc, #16]	; (1b10 <arch_ioport_pin_to_base+0x28>)
    1afe:	4798      	blx	r3
    1b00:	1c03      	adds	r3, r0, #0
}
    1b02:	1c18      	adds	r0, r3, #0
    1b04:	46bd      	mov	sp, r7
    1b06:	b002      	add	sp, #8
    1b08:	bd80      	pop	{r7, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	00001ab9 	.word	0x00001ab9
    1b10:	00001acd 	.word	0x00001acd

00001b14 <arch_ioport_pin_to_mask>:

inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	b082      	sub	sp, #8
    1b18:	af00      	add	r7, sp, #0
    1b1a:	6078      	str	r0, [r7, #4]
	return 1U << (pin & 0x1F);
    1b1c:	687a      	ldr	r2, [r7, #4]
    1b1e:	231f      	movs	r3, #31
    1b20:	4013      	ands	r3, r2
    1b22:	2201      	movs	r2, #1
    1b24:	1c11      	adds	r1, r2, #0
    1b26:	4099      	lsls	r1, r3
    1b28:	1c0b      	adds	r3, r1, #0
}
    1b2a:	1c18      	adds	r0, r3, #0
    1b2c:	46bd      	mov	sp, r7
    1b2e:	b002      	add	sp, #8
    1b30:	bd80      	pop	{r7, pc}
    1b32:	46c0      	nop			; (mov r8, r8)

00001b34 <arch_ioport_init>:

inline static void arch_ioport_init(void)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	af00      	add	r7, sp, #0
	/* No implementation for SAM0 */
}
    1b38:	46bd      	mov	sp, r7
    1b3a:	bd80      	pop	{r7, pc}

00001b3c <arch_ioport_enable_port>:


inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	b084      	sub	sp, #16
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	6039      	str	r1, [r7, #0]
	volatile PortGroup *base = arch_ioport_port_to_base(port);
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	1c18      	adds	r0, r3, #0
    1b4a:	4b14      	ldr	r3, [pc, #80]	; (1b9c <arch_ioport_enable_port+0x60>)
    1b4c:	4798      	blx	r3
    1b4e:	1c03      	adds	r3, r0, #0
    1b50:	60bb      	str	r3, [r7, #8]

	for (uint32_t i = 0; i < 32; i++) {
    1b52:	2300      	movs	r3, #0
    1b54:	60fb      	str	r3, [r7, #12]
    1b56:	e01a      	b.n	1b8e <arch_ioport_enable_port+0x52>
		if (mask & (1 << i)) {
    1b58:	68fb      	ldr	r3, [r7, #12]
    1b5a:	2201      	movs	r2, #1
    1b5c:	1c11      	adds	r1, r2, #0
    1b5e:	4099      	lsls	r1, r3
    1b60:	1c0b      	adds	r3, r1, #0
    1b62:	683a      	ldr	r2, [r7, #0]
    1b64:	4013      	ands	r3, r2
    1b66:	d00f      	beq.n	1b88 <arch_ioport_enable_port+0x4c>
			base->PINCFG[i].reg &= ~PORT_PINCFG_PMUXEN;
    1b68:	68b9      	ldr	r1, [r7, #8]
    1b6a:	2340      	movs	r3, #64	; 0x40
    1b6c:	68fa      	ldr	r2, [r7, #12]
    1b6e:	188a      	adds	r2, r1, r2
    1b70:	18d3      	adds	r3, r2, r3
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	b2db      	uxtb	r3, r3
    1b76:	2201      	movs	r2, #1
    1b78:	4393      	bics	r3, r2
    1b7a:	b2da      	uxtb	r2, r3
    1b7c:	68b8      	ldr	r0, [r7, #8]
    1b7e:	2340      	movs	r3, #64	; 0x40
    1b80:	68f9      	ldr	r1, [r7, #12]
    1b82:	1841      	adds	r1, r0, r1
    1b84:	18cb      	adds	r3, r1, r3
    1b86:	701a      	strb	r2, [r3, #0]
inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	volatile PortGroup *base = arch_ioport_port_to_base(port);

	for (uint32_t i = 0; i < 32; i++) {
    1b88:	68fb      	ldr	r3, [r7, #12]
    1b8a:	3301      	adds	r3, #1
    1b8c:	60fb      	str	r3, [r7, #12]
    1b8e:	68fb      	ldr	r3, [r7, #12]
    1b90:	2b1f      	cmp	r3, #31
    1b92:	d9e1      	bls.n	1b58 <arch_ioport_enable_port+0x1c>
		if (mask & (1 << i)) {
			base->PINCFG[i].reg &= ~PORT_PINCFG_PMUXEN;
		}
	}
}
    1b94:	46bd      	mov	sp, r7
    1b96:	b004      	add	sp, #16
    1b98:	bd80      	pop	{r7, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	00001acd 	.word	0x00001acd

00001ba0 <arch_ioport_enable_pin>:
		}
	}
}

inline static void arch_ioport_enable_pin(ioport_pin_t pin)
{
    1ba0:	b590      	push	{r4, r7, lr}
    1ba2:	b083      	sub	sp, #12
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	6078      	str	r0, [r7, #4]
	arch_ioport_enable_port(arch_ioport_pin_to_port_id(pin),
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	1c18      	adds	r0, r3, #0
    1bac:	4b07      	ldr	r3, [pc, #28]	; (1bcc <arch_ioport_enable_pin+0x2c>)
    1bae:	4798      	blx	r3
    1bb0:	1c04      	adds	r4, r0, #0
    1bb2:	687b      	ldr	r3, [r7, #4]
    1bb4:	1c18      	adds	r0, r3, #0
    1bb6:	4b06      	ldr	r3, [pc, #24]	; (1bd0 <arch_ioport_enable_pin+0x30>)
    1bb8:	4798      	blx	r3
    1bba:	1c03      	adds	r3, r0, #0
    1bbc:	1c20      	adds	r0, r4, #0
    1bbe:	1c19      	adds	r1, r3, #0
    1bc0:	4b04      	ldr	r3, [pc, #16]	; (1bd4 <arch_ioport_enable_pin+0x34>)
    1bc2:	4798      	blx	r3
			arch_ioport_pin_to_mask(pin));
}
    1bc4:	46bd      	mov	sp, r7
    1bc6:	b003      	add	sp, #12
    1bc8:	bd90      	pop	{r4, r7, pc}
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	00001ab9 	.word	0x00001ab9
    1bd0:	00001b15 	.word	0x00001b15
    1bd4:	00001b3d 	.word	0x00001b3d

00001bd8 <arch_ioport_set_pin_dir>:
	}
}

inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    1bd8:	b580      	push	{r7, lr}
    1bda:	b084      	sub	sp, #16
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
    1be0:	1c0a      	adds	r2, r1, #0
    1be2:	1cfb      	adds	r3, r7, #3
    1be4:	701a      	strb	r2, [r3, #0]
	PortGroup *base = arch_ioport_pin_to_base(pin);
    1be6:	687b      	ldr	r3, [r7, #4]
    1be8:	1c18      	adds	r0, r3, #0
    1bea:	4b18      	ldr	r3, [pc, #96]	; (1c4c <arch_ioport_set_pin_dir+0x74>)
    1bec:	4798      	blx	r3
    1bee:	1c03      	adds	r3, r0, #0
    1bf0:	60fb      	str	r3, [r7, #12]

	if (dir == IOPORT_DIR_OUTPUT) {
    1bf2:	1cfb      	adds	r3, r7, #3
    1bf4:	781b      	ldrb	r3, [r3, #0]
    1bf6:	2b01      	cmp	r3, #1
    1bf8:	d107      	bne.n	1c0a <arch_ioport_set_pin_dir+0x32>
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	1c18      	adds	r0, r3, #0
    1bfe:	4b14      	ldr	r3, [pc, #80]	; (1c50 <arch_ioport_set_pin_dir+0x78>)
    1c00:	4798      	blx	r3
    1c02:	1c02      	adds	r2, r0, #0
    1c04:	68fb      	ldr	r3, [r7, #12]
    1c06:	609a      	str	r2, [r3, #8]
    1c08:	e00a      	b.n	1c20 <arch_ioport_set_pin_dir+0x48>
	} else if (dir == IOPORT_DIR_INPUT) {
    1c0a:	1cfb      	adds	r3, r7, #3
    1c0c:	781b      	ldrb	r3, [r3, #0]
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d106      	bne.n	1c20 <arch_ioport_set_pin_dir+0x48>
		base->DIRCLR.reg = arch_ioport_pin_to_mask(pin);
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	1c18      	adds	r0, r3, #0
    1c16:	4b0e      	ldr	r3, [pc, #56]	; (1c50 <arch_ioport_set_pin_dir+0x78>)
    1c18:	4798      	blx	r3
    1c1a:	1c02      	adds	r2, r0, #0
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	605a      	str	r2, [r3, #4]
	}

	base->PINCFG[arch_ioport_pin_to_port_id(pin)].reg |= PORT_PINCFG_INEN;
    1c20:	687b      	ldr	r3, [r7, #4]
    1c22:	1c18      	adds	r0, r3, #0
    1c24:	4b0b      	ldr	r3, [pc, #44]	; (1c54 <arch_ioport_set_pin_dir+0x7c>)
    1c26:	4798      	blx	r3
    1c28:	1c03      	adds	r3, r0, #0
    1c2a:	68f9      	ldr	r1, [r7, #12]
    1c2c:	2240      	movs	r2, #64	; 0x40
    1c2e:	18c9      	adds	r1, r1, r3
    1c30:	188a      	adds	r2, r1, r2
    1c32:	7812      	ldrb	r2, [r2, #0]
    1c34:	b2d2      	uxtb	r2, r2
    1c36:	2102      	movs	r1, #2
    1c38:	430a      	orrs	r2, r1
    1c3a:	b2d2      	uxtb	r2, r2
    1c3c:	68f8      	ldr	r0, [r7, #12]
    1c3e:	2140      	movs	r1, #64	; 0x40
    1c40:	18c3      	adds	r3, r0, r3
    1c42:	185b      	adds	r3, r3, r1
    1c44:	701a      	strb	r2, [r3, #0]
}
    1c46:	46bd      	mov	sp, r7
    1c48:	b004      	add	sp, #16
    1c4a:	bd80      	pop	{r7, pc}
    1c4c:	00001ae9 	.word	0x00001ae9
    1c50:	00001b15 	.word	0x00001b15
    1c54:	00001ab9 	.word	0x00001ab9

00001c58 <arch_ioport_set_pin_level>:

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
    1c58:	b590      	push	{r4, r7, lr}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	1c0a      	adds	r2, r1, #0
    1c62:	1cfb      	adds	r3, r7, #3
    1c64:	701a      	strb	r2, [r3, #0]
	if (level) {
    1c66:	1cfb      	adds	r3, r7, #3
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d00b      	beq.n	1c86 <arch_ioport_set_pin_level+0x2e>
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	1c18      	adds	r0, r3, #0
    1c72:	4b0c      	ldr	r3, [pc, #48]	; (1ca4 <arch_ioport_set_pin_level+0x4c>)
    1c74:	4798      	blx	r3
    1c76:	1c04      	adds	r4, r0, #0
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	1c18      	adds	r0, r3, #0
    1c7c:	4b0a      	ldr	r3, [pc, #40]	; (1ca8 <arch_ioport_set_pin_level+0x50>)
    1c7e:	4798      	blx	r3
    1c80:	1c03      	adds	r3, r0, #0
    1c82:	61a3      	str	r3, [r4, #24]
    1c84:	e00a      	b.n	1c9c <arch_ioport_set_pin_level+0x44>
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	1c18      	adds	r0, r3, #0
    1c8a:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <arch_ioport_set_pin_level+0x4c>)
    1c8c:	4798      	blx	r3
    1c8e:	1c04      	adds	r4, r0, #0
    1c90:	687b      	ldr	r3, [r7, #4]
    1c92:	1c18      	adds	r0, r3, #0
    1c94:	4b04      	ldr	r3, [pc, #16]	; (1ca8 <arch_ioport_set_pin_level+0x50>)
    1c96:	4798      	blx	r3
    1c98:	1c03      	adds	r3, r0, #0
    1c9a:	6163      	str	r3, [r4, #20]
	}
}
    1c9c:	46bd      	mov	sp, r7
    1c9e:	b003      	add	sp, #12
    1ca0:	bd90      	pop	{r4, r7, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	00001ae9 	.word	0x00001ae9
    1ca8:	00001b15 	.word	0x00001b15

00001cac <arch_ioport_toggle_pin_level>:
{
	return arch_ioport_port_to_base(port)->IN.reg & mask;
}

inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
    1cac:	b590      	push	{r4, r7, lr}
    1cae:	b083      	sub	sp, #12
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
	arch_ioport_pin_to_base(pin)->OUTTGL.reg = arch_ioport_pin_to_mask(pin);
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	1c18      	adds	r0, r3, #0
    1cb8:	4b05      	ldr	r3, [pc, #20]	; (1cd0 <arch_ioport_toggle_pin_level+0x24>)
    1cba:	4798      	blx	r3
    1cbc:	1c04      	adds	r4, r0, #0
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	1c18      	adds	r0, r3, #0
    1cc2:	4b04      	ldr	r3, [pc, #16]	; (1cd4 <arch_ioport_toggle_pin_level+0x28>)
    1cc4:	4798      	blx	r3
    1cc6:	1c03      	adds	r3, r0, #0
    1cc8:	61e3      	str	r3, [r4, #28]
}
    1cca:	46bd      	mov	sp, r7
    1ccc:	b003      	add	sp, #12
    1cce:	bd90      	pop	{r4, r7, pc}
    1cd0:	00001ae9 	.word	0x00001ae9
    1cd4:	00001b15 	.word	0x00001b15

00001cd8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
    1cd8:	b580      	push	{r7, lr}
    1cda:	af00      	add	r7, sp, #0
	arch_ioport_init();
    1cdc:	4b01      	ldr	r3, [pc, #4]	; (1ce4 <ioport_init+0xc>)
    1cde:	4798      	blx	r3
}
    1ce0:	46bd      	mov	sp, r7
    1ce2:	bd80      	pop	{r7, pc}
    1ce4:	00001b35 	.word	0x00001b35

00001ce8 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
    1ce8:	b580      	push	{r7, lr}
    1cea:	b082      	sub	sp, #8
    1cec:	af00      	add	r7, sp, #0
    1cee:	6078      	str	r0, [r7, #4]
	arch_ioport_enable_pin(pin);
    1cf0:	687b      	ldr	r3, [r7, #4]
    1cf2:	1c18      	adds	r0, r3, #0
    1cf4:	4b02      	ldr	r3, [pc, #8]	; (1d00 <ioport_enable_pin+0x18>)
    1cf6:	4798      	blx	r3
}
    1cf8:	46bd      	mov	sp, r7
    1cfa:	b002      	add	sp, #8
    1cfc:	bd80      	pop	{r7, pc}
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	00001ba1 	.word	0x00001ba1

00001d04 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
    1d04:	b580      	push	{r7, lr}
    1d06:	b082      	sub	sp, #8
    1d08:	af00      	add	r7, sp, #0
    1d0a:	6078      	str	r0, [r7, #4]
    1d0c:	1c0a      	adds	r2, r1, #0
    1d0e:	1cfb      	adds	r3, r7, #3
    1d10:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_dir(pin, dir);
    1d12:	687a      	ldr	r2, [r7, #4]
    1d14:	1cfb      	adds	r3, r7, #3
    1d16:	781b      	ldrb	r3, [r3, #0]
    1d18:	1c10      	adds	r0, r2, #0
    1d1a:	1c19      	adds	r1, r3, #0
    1d1c:	4b02      	ldr	r3, [pc, #8]	; (1d28 <ioport_set_pin_dir+0x24>)
    1d1e:	4798      	blx	r3
}
    1d20:	46bd      	mov	sp, r7
    1d22:	b002      	add	sp, #8
    1d24:	bd80      	pop	{r7, pc}
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	00001bd9 	.word	0x00001bd9

00001d2c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
    1d2c:	b580      	push	{r7, lr}
    1d2e:	b082      	sub	sp, #8
    1d30:	af00      	add	r7, sp, #0
    1d32:	6078      	str	r0, [r7, #4]
    1d34:	1c0a      	adds	r2, r1, #0
    1d36:	1cfb      	adds	r3, r7, #3
    1d38:	701a      	strb	r2, [r3, #0]
	arch_ioport_set_pin_level(pin, level);
    1d3a:	687a      	ldr	r2, [r7, #4]
    1d3c:	1cfb      	adds	r3, r7, #3
    1d3e:	781b      	ldrb	r3, [r3, #0]
    1d40:	1c10      	adds	r0, r2, #0
    1d42:	1c19      	adds	r1, r3, #0
    1d44:	4b02      	ldr	r3, [pc, #8]	; (1d50 <ioport_set_pin_level+0x24>)
    1d46:	4798      	blx	r3
}
    1d48:	46bd      	mov	sp, r7
    1d4a:	b002      	add	sp, #8
    1d4c:	bd80      	pop	{r7, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	00001c59 	.word	0x00001c59

00001d54 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
    1d54:	b580      	push	{r7, lr}
    1d56:	b082      	sub	sp, #8
    1d58:	af00      	add	r7, sp, #0
    1d5a:	6078      	str	r0, [r7, #4]
	arch_ioport_toggle_pin_level(pin);
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	1c18      	adds	r0, r3, #0
    1d60:	4b02      	ldr	r3, [pc, #8]	; (1d6c <ioport_toggle_pin_level+0x18>)
    1d62:	4798      	blx	r3
}
    1d64:	46bd      	mov	sp, r7
    1d66:	b002      	add	sp, #8
    1d68:	bd80      	pop	{r7, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	00001cad 	.word	0x00001cad

00001d70 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1d70:	b580      	push	{r7, lr}
    1d72:	b084      	sub	sp, #16
    1d74:	af00      	add	r7, sp, #0
    1d76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	681b      	ldr	r3, [r3, #0]
    1d7c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1d7e:	68fb      	ldr	r3, [r7, #12]
    1d80:	69db      	ldr	r3, [r3, #28]
    1d82:	1e5a      	subs	r2, r3, #1
    1d84:	4193      	sbcs	r3, r2
    1d86:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1d88:	1c18      	adds	r0, r3, #0
    1d8a:	46bd      	mov	sp, r7
    1d8c:	b004      	add	sp, #16
    1d8e:	bd80      	pop	{r7, pc}

00001d90 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1d90:	b580      	push	{r7, lr}
    1d92:	b082      	sub	sp, #8
    1d94:	af00      	add	r7, sp, #0
    1d96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	2201      	movs	r2, #1
    1d9c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	2200      	movs	r2, #0
    1da2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1da4:	687b      	ldr	r3, [r7, #4]
    1da6:	2200      	movs	r2, #0
    1da8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1daa:	687b      	ldr	r3, [r7, #4]
    1dac:	22c0      	movs	r2, #192	; 0xc0
    1dae:	0392      	lsls	r2, r2, #14
    1db0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	2200      	movs	r2, #0
    1db6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	2200      	movs	r2, #0
    1dbc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    1dbe:	687b      	ldr	r3, [r7, #4]
    1dc0:	2201      	movs	r2, #1
    1dc2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	2201      	movs	r2, #1
    1dc8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1dca:	687b      	ldr	r3, [r7, #4]
    1dcc:	2200      	movs	r2, #0
    1dce:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1dd0:	687a      	ldr	r2, [r7, #4]
    1dd2:	2324      	movs	r3, #36	; 0x24
    1dd4:	2100      	movs	r1, #0
    1dd6:	54d1      	strb	r1, [r2, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1dd8:	687b      	ldr	r3, [r7, #4]
    1dda:	3318      	adds	r3, #24
    1ddc:	1c18      	adds	r0, r3, #0
    1dde:	2100      	movs	r1, #0
    1de0:	220c      	movs	r2, #12
    1de2:	4b0a      	ldr	r3, [pc, #40]	; (1e0c <spi_get_config_defaults+0x7c>)
    1de4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1de6:	687b      	ldr	r3, [r7, #4]
    1de8:	4a09      	ldr	r2, [pc, #36]	; (1e10 <spi_get_config_defaults+0x80>)
    1dea:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	2200      	movs	r2, #0
    1df0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    1df2:	687b      	ldr	r3, [r7, #4]
    1df4:	2200      	movs	r2, #0
    1df6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	2200      	movs	r2, #0
    1dfc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	2200      	movs	r2, #0
    1e02:	635a      	str	r2, [r3, #52]	; 0x34

};
    1e04:	46bd      	mov	sp, r7
    1e06:	b002      	add	sp, #8
    1e08:	bd80      	pop	{r7, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	0000622f 	.word	0x0000622f
    1e10:	000186a0 	.word	0x000186a0

00001e14 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b084      	sub	sp, #16
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	681b      	ldr	r3, [r3, #0]
    1e20:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	1c18      	adds	r0, r3, #0
    1e28:	4b06      	ldr	r3, [pc, #24]	; (1e44 <spi_enable+0x30>)
    1e2a:	4798      	blx	r3
    1e2c:	1c03      	adds	r3, r0, #0
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d1f8      	bne.n	1e24 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1e32:	68fb      	ldr	r3, [r7, #12]
    1e34:	681b      	ldr	r3, [r3, #0]
    1e36:	2202      	movs	r2, #2
    1e38:	431a      	orrs	r2, r3
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	601a      	str	r2, [r3, #0]
}
    1e3e:	46bd      	mov	sp, r7
    1e40:	b004      	add	sp, #16
    1e42:	bd80      	pop	{r7, pc}
    1e44:	00001d71 	.word	0x00001d71

00001e48 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    1e48:	b580      	push	{r7, lr}
    1e4a:	b084      	sub	sp, #16
    1e4c:	af00      	add	r7, sp, #0
    1e4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	681b      	ldr	r3, [r3, #0]
    1e54:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	1c18      	adds	r0, r3, #0
    1e5c:	4b07      	ldr	r3, [pc, #28]	; (1e7c <spi_disable+0x34>)
    1e5e:	4798      	blx	r3
    1e60:	1c03      	adds	r3, r0, #0
    1e62:	2b00      	cmp	r3, #0
    1e64:	d1f8      	bne.n	1e58 <spi_disable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1e66:	68fb      	ldr	r3, [r7, #12]
    1e68:	681b      	ldr	r3, [r3, #0]
    1e6a:	2202      	movs	r2, #2
    1e6c:	1c19      	adds	r1, r3, #0
    1e6e:	4391      	bics	r1, r2
    1e70:	1c0a      	adds	r2, r1, #0
    1e72:	68fb      	ldr	r3, [r7, #12]
    1e74:	601a      	str	r2, [r3, #0]
}
    1e76:	46bd      	mov	sp, r7
    1e78:	b004      	add	sp, #16
    1e7a:	bd80      	pop	{r7, pc}
    1e7c:	00001d71 	.word	0x00001d71

00001e80 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b084      	sub	sp, #16
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1e88:	687b      	ldr	r3, [r7, #4]
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1e8e:	68fb      	ldr	r3, [r7, #12]
    1e90:	7e1b      	ldrb	r3, [r3, #24]
    1e92:	b2db      	uxtb	r3, r3
    1e94:	1c1a      	adds	r2, r3, #0
    1e96:	2302      	movs	r3, #2
    1e98:	4013      	ands	r3, r2
    1e9a:	1e5a      	subs	r2, r3, #1
    1e9c:	4193      	sbcs	r3, r2
    1e9e:	b2db      	uxtb	r3, r3
}
    1ea0:	1c18      	adds	r0, r3, #0
    1ea2:	46bd      	mov	sp, r7
    1ea4:	b004      	add	sp, #16
    1ea6:	bd80      	pop	{r7, pc}

00001ea8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1ea8:	b580      	push	{r7, lr}
    1eaa:	b084      	sub	sp, #16
    1eac:	af00      	add	r7, sp, #0
    1eae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1eb6:	68fb      	ldr	r3, [r7, #12]
    1eb8:	7e1b      	ldrb	r3, [r3, #24]
    1eba:	b2db      	uxtb	r3, r3
    1ebc:	1c1a      	adds	r2, r3, #0
    1ebe:	2301      	movs	r3, #1
    1ec0:	4013      	ands	r3, r2
    1ec2:	1e5a      	subs	r2, r3, #1
    1ec4:	4193      	sbcs	r3, r2
    1ec6:	b2db      	uxtb	r3, r3
}
    1ec8:	1c18      	adds	r0, r3, #0
    1eca:	46bd      	mov	sp, r7
    1ecc:	b004      	add	sp, #16
    1ece:	bd80      	pop	{r7, pc}

00001ed0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1ed0:	b580      	push	{r7, lr}
    1ed2:	b084      	sub	sp, #16
    1ed4:	af00      	add	r7, sp, #0
    1ed6:	6078      	str	r0, [r7, #4]
    1ed8:	1c0a      	adds	r2, r1, #0
    1eda:	1cbb      	adds	r3, r7, #2
    1edc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ede:	687b      	ldr	r3, [r7, #4]
    1ee0:	681b      	ldr	r3, [r3, #0]
    1ee2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	1c18      	adds	r0, r3, #0
    1ee8:	4b0a      	ldr	r3, [pc, #40]	; (1f14 <spi_write+0x44>)
    1eea:	4798      	blx	r3
    1eec:	1c03      	adds	r3, r0, #0
    1eee:	2201      	movs	r2, #1
    1ef0:	4053      	eors	r3, r2
    1ef2:	b2db      	uxtb	r3, r3
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d001      	beq.n	1efc <spi_write+0x2c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    1ef8:	2305      	movs	r3, #5
    1efa:	e006      	b.n	1f0a <spi_write+0x3a>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1efc:	1cbb      	adds	r3, r7, #2
    1efe:	881b      	ldrh	r3, [r3, #0]
    1f00:	05db      	lsls	r3, r3, #23
    1f02:	0dda      	lsrs	r2, r3, #23
    1f04:	68fb      	ldr	r3, [r7, #12]
    1f06:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    1f08:	2300      	movs	r3, #0
}
    1f0a:	1c18      	adds	r0, r3, #0
    1f0c:	46bd      	mov	sp, r7
    1f0e:	b004      	add	sp, #16
    1f10:	bd80      	pop	{r7, pc}
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	00001ea9 	.word	0x00001ea9

00001f18 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b084      	sub	sp, #16
    1f1c:	af00      	add	r7, sp, #0
    1f1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f20:	687b      	ldr	r3, [r7, #4]
    1f22:	681b      	ldr	r3, [r3, #0]
    1f24:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1f26:	68fb      	ldr	r3, [r7, #12]
    1f28:	7bdb      	ldrb	r3, [r3, #15]
    1f2a:	b2db      	uxtb	r3, r3
    1f2c:	1c1a      	adds	r2, r3, #0
    1f2e:	2380      	movs	r3, #128	; 0x80
    1f30:	4013      	ands	r3, r2
    1f32:	1e5a      	subs	r2, r3, #1
    1f34:	4193      	sbcs	r3, r2
    1f36:	b2db      	uxtb	r3, r3
#endif
}
    1f38:	1c18      	adds	r0, r3, #0
    1f3a:	46bd      	mov	sp, r7
    1f3c:	b004      	add	sp, #16
    1f3e:	bd80      	pop	{r7, pc}

00001f40 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    1f40:	b580      	push	{r7, lr}
    1f42:	b082      	sub	sp, #8
    1f44:	af00      	add	r7, sp, #0
    1f46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1f48:	687b      	ldr	r3, [r7, #4]
    1f4a:	2200      	movs	r2, #0
    1f4c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	2200      	movs	r2, #0
    1f52:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    1f54:	687b      	ldr	r3, [r7, #4]
    1f56:	2200      	movs	r2, #0
    1f58:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	2200      	movs	r2, #0
    1f5e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1f60:	687b      	ldr	r3, [r7, #4]
    1f62:	2200      	movs	r2, #0
    1f64:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	2200      	movs	r2, #0
    1f6a:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	2200      	movs	r2, #0
    1f70:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	2200      	movs	r2, #0
    1f76:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	2200      	movs	r2, #0
    1f7c:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	2200      	movs	r2, #0
    1f82:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    1f84:	687b      	ldr	r3, [r7, #4]
    1f86:	2200      	movs	r2, #0
    1f88:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	2200      	movs	r2, #0
    1f8e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1f90:	687b      	ldr	r3, [r7, #4]
    1f92:	2200      	movs	r2, #0
    1f94:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	2200      	movs	r2, #0
    1f9a:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1f9c:	687b      	ldr	r3, [r7, #4]
    1f9e:	2200      	movs	r2, #0
    1fa0:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1fa2:	687b      	ldr	r3, [r7, #4]
    1fa4:	2200      	movs	r2, #0
    1fa6:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1fa8:	687b      	ldr	r3, [r7, #4]
    1faa:	2200      	movs	r2, #0
    1fac:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1fae:	687b      	ldr	r3, [r7, #4]
    1fb0:	2200      	movs	r2, #0
    1fb2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1fb4:	687b      	ldr	r3, [r7, #4]
    1fb6:	2200      	movs	r2, #0
    1fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1fba:	687b      	ldr	r3, [r7, #4]
    1fbc:	2200      	movs	r2, #0
    1fbe:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    1fc0:	46bd      	mov	sp, r7
    1fc2:	b002      	add	sp, #8
    1fc4:	bd80      	pop	{r7, pc}
    1fc6:	46c0      	nop			; (mov r8, r8)

00001fc8 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    1fc8:	b580      	push	{r7, lr}
    1fca:	b084      	sub	sp, #16
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1fd0:	687b      	ldr	r3, [r7, #4]
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	1c18      	adds	r0, r3, #0
    1fdc:	4b07      	ldr	r3, [pc, #28]	; (1ffc <tc_enable+0x34>)
    1fde:	4798      	blx	r3
    1fe0:	1c03      	adds	r3, r0, #0
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	d1f8      	bne.n	1fd8 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1fe6:	68fb      	ldr	r3, [r7, #12]
    1fe8:	881b      	ldrh	r3, [r3, #0]
    1fea:	b29b      	uxth	r3, r3
    1fec:	2202      	movs	r2, #2
    1fee:	4313      	orrs	r3, r2
    1ff0:	b29a      	uxth	r2, r3
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	801a      	strh	r2, [r3, #0]
}
    1ff6:	46bd      	mov	sp, r7
    1ff8:	b004      	add	sp, #16
    1ffa:	bd80      	pop	{r7, pc}
    1ffc:	00001f19 	.word	0x00001f19

00002000 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    2000:	b580      	push	{r7, lr}
    2002:	b084      	sub	sp, #16
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	681b      	ldr	r3, [r3, #0]
    200c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    200e:	46c0      	nop			; (mov r8, r8)
    2010:	687b      	ldr	r3, [r7, #4]
    2012:	1c18      	adds	r0, r3, #0
    2014:	4b07      	ldr	r3, [pc, #28]	; (2034 <STACK_SIZE+0x34>)
    2016:	4798      	blx	r3
    2018:	1c03      	adds	r3, r0, #0
    201a:	2b00      	cmp	r3, #0
    201c:	d1f8      	bne.n	2010 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    201e:	68fb      	ldr	r3, [r7, #12]
    2020:	881b      	ldrh	r3, [r3, #0]
    2022:	b29b      	uxth	r3, r3
    2024:	2202      	movs	r2, #2
    2026:	4393      	bics	r3, r2
    2028:	b29a      	uxth	r2, r3
    202a:	68fb      	ldr	r3, [r7, #12]
    202c:	801a      	strh	r2, [r3, #0]
}
    202e:	46bd      	mov	sp, r7
    2030:	b004      	add	sp, #16
    2032:	bd80      	pop	{r7, pc}
    2034:	00001f19 	.word	0x00001f19

00002038 <tc_stop_counter>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_stop_counter(
		const struct tc_module *const module_inst)
{
    2038:	b580      	push	{r7, lr}
    203a:	b084      	sub	sp, #16
    203c:	af00      	add	r7, sp, #0
    203e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2040:	687b      	ldr	r3, [r7, #4]
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	687b      	ldr	r3, [r7, #4]
    204a:	1c18      	adds	r0, r3, #0
    204c:	4b05      	ldr	r3, [pc, #20]	; (2064 <tc_stop_counter+0x2c>)
    204e:	4798      	blx	r3
    2050:	1c03      	adds	r3, r0, #0
    2052:	2b00      	cmp	r3, #0
    2054:	d1f8      	bne.n	2048 <tc_stop_counter+0x10>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_STOP_Val);
    2056:	68fb      	ldr	r3, [r7, #12]
    2058:	2280      	movs	r2, #128	; 0x80
    205a:	715a      	strb	r2, [r3, #5]
}
    205c:	46bd      	mov	sp, r7
    205e:	b004      	add	sp, #16
    2060:	bd80      	pop	{r7, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	00001f19 	.word	0x00001f19

00002068 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    2068:	b580      	push	{r7, lr}
    206a:	b082      	sub	sp, #8
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2070:	4a04      	ldr	r2, [pc, #16]	; (2084 <_tc_interrupt_get_interrupt_vector+0x1c>)
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	18d3      	adds	r3, r2, r3
    2076:	781b      	ldrb	r3, [r3, #0]
    2078:	b2db      	uxtb	r3, r3
    207a:	b25b      	sxtb	r3, r3
}
    207c:	1c18      	adds	r0, r3, #0
    207e:	46bd      	mov	sp, r7
    2080:	b002      	add	sp, #8
    2082:	bd80      	pop	{r7, pc}
    2084:	20000000 	.word	0x20000000

00002088 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    2088:	b580      	push	{r7, lr}
    208a:	b082      	sub	sp, #8
    208c:	af00      	add	r7, sp, #0
    208e:	6078      	str	r0, [r7, #4]
    2090:	1c0a      	adds	r2, r1, #0
    2092:	1cfb      	adds	r3, r7, #3
    2094:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	1c18      	adds	r0, r3, #0
    209c:	4b22      	ldr	r3, [pc, #136]	; (2128 <tc_enable_callback+0xa0>)
    209e:	4798      	blx	r3
    20a0:	1c03      	adds	r3, r0, #0
    20a2:	1c18      	adds	r0, r3, #0
    20a4:	4b21      	ldr	r3, [pc, #132]	; (212c <tc_enable_callback+0xa4>)
    20a6:	4798      	blx	r3
    20a8:	1c03      	adds	r3, r0, #0
    20aa:	1c18      	adds	r0, r3, #0
    20ac:	4b20      	ldr	r3, [pc, #128]	; (2130 <tc_enable_callback+0xa8>)
    20ae:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    20b0:	1cfb      	adds	r3, r7, #3
    20b2:	781b      	ldrb	r3, [r3, #0]
    20b4:	2b02      	cmp	r3, #2
    20b6:	d10b      	bne.n	20d0 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	7e5b      	ldrb	r3, [r3, #25]
    20bc:	2210      	movs	r2, #16
    20be:	4313      	orrs	r3, r2
    20c0:	b2da      	uxtb	r2, r3
    20c2:	687b      	ldr	r3, [r7, #4]
    20c4:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    20c6:	687b      	ldr	r3, [r7, #4]
    20c8:	681b      	ldr	r3, [r3, #0]
    20ca:	2210      	movs	r2, #16
    20cc:	735a      	strb	r2, [r3, #13]
    20ce:	e028      	b.n	2122 <tc_enable_callback+0x9a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    20d0:	1cfb      	adds	r3, r7, #3
    20d2:	781b      	ldrb	r3, [r3, #0]
    20d4:	2b03      	cmp	r3, #3
    20d6:	d10b      	bne.n	20f0 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    20d8:	687b      	ldr	r3, [r7, #4]
    20da:	7e5b      	ldrb	r3, [r3, #25]
    20dc:	2220      	movs	r2, #32
    20de:	4313      	orrs	r3, r2
    20e0:	b2da      	uxtb	r2, r3
    20e2:	687b      	ldr	r3, [r7, #4]
    20e4:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	681b      	ldr	r3, [r3, #0]
    20ea:	2220      	movs	r2, #32
    20ec:	735a      	strb	r2, [r3, #13]
    20ee:	e018      	b.n	2122 <tc_enable_callback+0x9a>
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    20f0:	687b      	ldr	r3, [r7, #4]
    20f2:	7e5b      	ldrb	r3, [r3, #25]
    20f4:	b2da      	uxtb	r2, r3
    20f6:	1cfb      	adds	r3, r7, #3
    20f8:	781b      	ldrb	r3, [r3, #0]
    20fa:	2101      	movs	r1, #1
    20fc:	1c08      	adds	r0, r1, #0
    20fe:	4098      	lsls	r0, r3
    2100:	1c03      	adds	r3, r0, #0
    2102:	b2db      	uxtb	r3, r3
    2104:	4313      	orrs	r3, r2
    2106:	b2db      	uxtb	r3, r3
    2108:	b2da      	uxtb	r2, r3
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    210e:	687b      	ldr	r3, [r7, #4]
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	1cfa      	adds	r2, r7, #3
    2114:	7812      	ldrb	r2, [r2, #0]
    2116:	2101      	movs	r1, #1
    2118:	1c08      	adds	r0, r1, #0
    211a:	4090      	lsls	r0, r2
    211c:	1c02      	adds	r2, r0, #0
    211e:	b2d2      	uxtb	r2, r2
    2120:	735a      	strb	r2, [r3, #13]
	}
}
    2122:	46bd      	mov	sp, r7
    2124:	b002      	add	sp, #8
    2126:	bd80      	pop	{r7, pc}
    2128:	00003731 	.word	0x00003731
    212c:	00002069 	.word	0x00002069
    2130:	00001815 	.word	0x00001815

00002134 <initialize_EPD_timer>:
*
* \note
* desired value: 1mSec
* actual value:  1.000mSec
*/
static void initialize_EPD_timer(void) {
    2134:	b580      	push	{r7, lr}
    2136:	b08e      	sub	sp, #56	; 0x38
    2138:	af00      	add	r7, sp, #0

	 struct tc_config config_tc;
	 
	 tc_reset(&tc_instance);
    213a:	4b1f      	ldr	r3, [pc, #124]	; (21b8 <initialize_EPD_timer+0x84>)
    213c:	1c18      	adds	r0, r3, #0
    213e:	4b1f      	ldr	r3, [pc, #124]	; (21bc <initialize_EPD_timer+0x88>)
    2140:	4798      	blx	r3
	 tc_get_config_defaults(&config_tc);
    2142:	1d3b      	adds	r3, r7, #4
    2144:	1c18      	adds	r0, r3, #0
    2146:	4b1e      	ldr	r3, [pc, #120]	; (21c0 <initialize_EPD_timer+0x8c>)
    2148:	4798      	blx	r3
	 config_tc.clock_source=TC_CLK_Source;
    214a:	1d3b      	adds	r3, r7, #4
    214c:	2201      	movs	r2, #1
    214e:	701a      	strb	r2, [r3, #0]
	 config_tc.clock_prescaler=TC_CLOCK_PRESCALER_DIV8;
    2150:	1d3b      	adds	r3, r7, #4
    2152:	22c0      	movs	r2, #192	; 0xc0
    2154:	0092      	lsls	r2, r2, #2
    2156:	809a      	strh	r2, [r3, #4]
	 config_tc.counter_size = TC_COUNTER_SIZE_32BIT;
    2158:	1d3b      	adds	r3, r7, #4
    215a:	2208      	movs	r2, #8
    215c:	709a      	strb	r2, [r3, #2]
	 config_tc.reload_action= TC_RELOAD_ACTION_RESYNC;
    215e:	1d3b      	adds	r3, r7, #4
    2160:	2280      	movs	r2, #128	; 0x80
    2162:	0192      	lsls	r2, r2, #6
    2164:	811a      	strh	r2, [r3, #8]
	 config_tc.count_direction= TC_COUNT_DIRECTION_UP;
    2166:	1d3b      	adds	r3, r7, #4
    2168:	2200      	movs	r2, #0
    216a:	739a      	strb	r2, [r3, #14]
	 config_tc.counter_32_bit.value=0;
    216c:	1d3b      	adds	r3, r7, #4
    216e:	2200      	movs	r2, #0
    2170:	629a      	str	r2, [r3, #40]	; 0x28

	 tc_init(&tc_instance, TC_HW, &config_tc);
    2172:	4911      	ldr	r1, [pc, #68]	; (21b8 <initialize_EPD_timer+0x84>)
    2174:	4a13      	ldr	r2, [pc, #76]	; (21c4 <initialize_EPD_timer+0x90>)
    2176:	1d3b      	adds	r3, r7, #4
    2178:	1c08      	adds	r0, r1, #0
    217a:	1c11      	adds	r1, r2, #0
    217c:	1c1a      	adds	r2, r3, #0
    217e:	4b12      	ldr	r3, [pc, #72]	; (21c8 <initialize_EPD_timer+0x94>)
    2180:	4798      	blx	r3
	 tc_register_callback(&tc_instance, tc_callback_Handler, TC_CALLBACK_CC_CHANNEL0);
    2182:	4a0d      	ldr	r2, [pc, #52]	; (21b8 <initialize_EPD_timer+0x84>)
    2184:	4b11      	ldr	r3, [pc, #68]	; (21cc <initialize_EPD_timer+0x98>)
    2186:	1c10      	adds	r0, r2, #0
    2188:	1c19      	adds	r1, r3, #0
    218a:	2202      	movs	r2, #2
    218c:	4b10      	ldr	r3, [pc, #64]	; (21d0 <initialize_EPD_timer+0x9c>)
    218e:	4798      	blx	r3
	 tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
    2190:	4b09      	ldr	r3, [pc, #36]	; (21b8 <initialize_EPD_timer+0x84>)
    2192:	1c18      	adds	r0, r3, #0
    2194:	2102      	movs	r1, #2
    2196:	4b0f      	ldr	r3, [pc, #60]	; (21d4 <initialize_EPD_timer+0xa0>)
    2198:	4798      	blx	r3
	 tc_set_count_value(&tc_instance, 0);
    219a:	4b07      	ldr	r3, [pc, #28]	; (21b8 <initialize_EPD_timer+0x84>)
    219c:	1c18      	adds	r0, r3, #0
    219e:	2100      	movs	r1, #0
    21a0:	4b0d      	ldr	r3, [pc, #52]	; (21d8 <initialize_EPD_timer+0xa4>)
    21a2:	4798      	blx	r3
	 tc_enable(&tc_instance);
    21a4:	4b04      	ldr	r3, [pc, #16]	; (21b8 <initialize_EPD_timer+0x84>)
    21a6:	1c18      	adds	r0, r3, #0
    21a8:	4b0c      	ldr	r3, [pc, #48]	; (21dc <initialize_EPD_timer+0xa8>)
    21aa:	4798      	blx	r3

	 EPD_Counter=0;
    21ac:	4b0c      	ldr	r3, [pc, #48]	; (21e0 <initialize_EPD_timer+0xac>)
    21ae:	2200      	movs	r2, #0
    21b0:	601a      	str	r2, [r3, #0]
}
    21b2:	46bd      	mov	sp, r7
    21b4:	b00e      	add	sp, #56	; 0x38
    21b6:	bd80      	pop	{r7, pc}
    21b8:	200000f8 	.word	0x200000f8
    21bc:	00003cbd 	.word	0x00003cbd
    21c0:	00001f41 	.word	0x00001f41
    21c4:	42003000 	.word	0x42003000
    21c8:	0000377d 	.word	0x0000377d
    21cc:	00002269 	.word	0x00002269
    21d0:	00003d25 	.word	0x00003d25
    21d4:	00002089 	.word	0x00002089
    21d8:	00003c05 	.word	0x00003c05
    21dc:	00001fc9 	.word	0x00001fc9
    21e0:	200000c0 	.word	0x200000c0

000021e4 <start_EPD_timer>:

/**
* \brief Start Timer
*/
void start_EPD_timer(void) {
    21e4:	b580      	push	{r7, lr}
    21e6:	af00      	add	r7, sp, #0
	initialize_EPD_timer();
    21e8:	4b01      	ldr	r3, [pc, #4]	; (21f0 <start_EPD_timer+0xc>)
    21ea:	4798      	blx	r3
}
    21ec:	46bd      	mov	sp, r7
    21ee:	bd80      	pop	{r7, pc}
    21f0:	00002135 	.word	0x00002135

000021f4 <stop_EPD_timer>:

/**
* \brief Stop Timer
*/
void stop_EPD_timer(void) {
    21f4:	b580      	push	{r7, lr}
    21f6:	af00      	add	r7, sp, #0
    tc_stop_counter(&tc_instance);
    21f8:	4b04      	ldr	r3, [pc, #16]	; (220c <stop_EPD_timer+0x18>)
    21fa:	1c18      	adds	r0, r3, #0
    21fc:	4b04      	ldr	r3, [pc, #16]	; (2210 <stop_EPD_timer+0x1c>)
    21fe:	4798      	blx	r3
	tc_disable(&tc_instance);
    2200:	4b02      	ldr	r3, [pc, #8]	; (220c <stop_EPD_timer+0x18>)
    2202:	1c18      	adds	r0, r3, #0
    2204:	4b03      	ldr	r3, [pc, #12]	; (2214 <stop_EPD_timer+0x20>)
    2206:	4798      	blx	r3
	
}
    2208:	46bd      	mov	sp, r7
    220a:	bd80      	pop	{r7, pc}
    220c:	200000f8 	.word	0x200000f8
    2210:	00002039 	.word	0x00002039
    2214:	00002001 	.word	0x00002001

00002218 <get_current_time_tick>:

/**
* \brief Get current Timer after starting a new one
*/
uint32_t get_current_time_tick(void) {
    2218:	b580      	push	{r7, lr}
    221a:	af00      	add	r7, sp, #0
	EPD_Counter=tc_get_count_value(&tc_instance)/1000;
    221c:	4b09      	ldr	r3, [pc, #36]	; (2244 <get_current_time_tick+0x2c>)
    221e:	1c18      	adds	r0, r3, #0
    2220:	4b09      	ldr	r3, [pc, #36]	; (2248 <get_current_time_tick+0x30>)
    2222:	4798      	blx	r3
    2224:	1c02      	adds	r2, r0, #0
    2226:	4b09      	ldr	r3, [pc, #36]	; (224c <get_current_time_tick+0x34>)
    2228:	1c10      	adds	r0, r2, #0
    222a:	22fa      	movs	r2, #250	; 0xfa
    222c:	0091      	lsls	r1, r2, #2
    222e:	4798      	blx	r3
    2230:	1c03      	adds	r3, r0, #0
    2232:	1c1a      	adds	r2, r3, #0
    2234:	4b06      	ldr	r3, [pc, #24]	; (2250 <get_current_time_tick+0x38>)
    2236:	601a      	str	r2, [r3, #0]
	return EPD_Counter;
    2238:	4b05      	ldr	r3, [pc, #20]	; (2250 <get_current_time_tick+0x38>)
    223a:	681b      	ldr	r3, [r3, #0]
}
    223c:	1c18      	adds	r0, r3, #0
    223e:	46bd      	mov	sp, r7
    2240:	bd80      	pop	{r7, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	200000f8 	.word	0x200000f8
    2248:	00003c69 	.word	0x00003c69
    224c:	00005871 	.word	0x00005871
    2250:	200000c0 	.word	0x200000c0

00002254 <EPD_pwm_Toggle>:
/**
* \brief Set PWM pin to Toggle
*/
static void EPD_pwm_Toggle(void) {
    2254:	b580      	push	{r7, lr}
    2256:	af00      	add	r7, sp, #0
	set_gpio_invert(PWM_PIN);
    2258:	2022      	movs	r0, #34	; 0x22
    225a:	4b02      	ldr	r3, [pc, #8]	; (2264 <EPD_pwm_Toggle+0x10>)
    225c:	4798      	blx	r3

}
    225e:	46bd      	mov	sp, r7
    2260:	bd80      	pop	{r7, pc}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	00001d55 	.word	0x00001d55

00002268 <tc_callback_Handler>:
/**
* \brief callback Service Routine for TC0 tick counter
*/
void tc_callback_Handler(
struct tc_module *constmodule_inst){
    2268:	b580      	push	{r7, lr}
    226a:	b082      	sub	sp, #8
    226c:	af00      	add	r7, sp, #0
    226e:	6078      	str	r0, [r7, #4]
	EPD_Counter++;
    2270:	4b0e      	ldr	r3, [pc, #56]	; (22ac <tc_callback_Handler+0x44>)
    2272:	681b      	ldr	r3, [r3, #0]
    2274:	1c5a      	adds	r2, r3, #1
    2276:	4b0d      	ldr	r3, [pc, #52]	; (22ac <tc_callback_Handler+0x44>)
    2278:	601a      	str	r2, [r3, #0]
    tc_set_count_value(&tc_instance,TC_CONUT); 
    227a:	2001      	movs	r0, #1
    227c:	4b0c      	ldr	r3, [pc, #48]	; (22b0 <tc_callback_Handler+0x48>)
    227e:	4798      	blx	r3
    2280:	1c02      	adds	r2, r0, #0
    2282:	4b0c      	ldr	r3, [pc, #48]	; (22b4 <tc_callback_Handler+0x4c>)
    2284:	1c10      	adds	r0, r2, #0
    2286:	22fa      	movs	r2, #250	; 0xfa
    2288:	0091      	lsls	r1, r2, #2
    228a:	4798      	blx	r3
    228c:	1c03      	adds	r3, r0, #0
    228e:	4a0a      	ldr	r2, [pc, #40]	; (22b8 <tc_callback_Handler+0x50>)
    2290:	1c10      	adds	r0, r2, #0
    2292:	1c19      	adds	r1, r3, #0
    2294:	4b09      	ldr	r3, [pc, #36]	; (22bc <tc_callback_Handler+0x54>)
    2296:	4798      	blx	r3
   if(PWM_Run_Flag)
    2298:	4b09      	ldr	r3, [pc, #36]	; (22c0 <tc_callback_Handler+0x58>)
    229a:	781b      	ldrb	r3, [r3, #0]
    229c:	b2db      	uxtb	r3, r3
    229e:	2b00      	cmp	r3, #0
    22a0:	d001      	beq.n	22a6 <tc_callback_Handler+0x3e>
   {
     EPD_pwm_Toggle();    
    22a2:	4b08      	ldr	r3, [pc, #32]	; (22c4 <tc_callback_Handler+0x5c>)
    22a4:	4798      	blx	r3
   }
   
}
    22a6:	46bd      	mov	sp, r7
    22a8:	b002      	add	sp, #8
    22aa:	bd80      	pop	{r7, pc}
    22ac:	200000c0 	.word	0x200000c0
    22b0:	000052d5 	.word	0x000052d5
    22b4:	00005871 	.word	0x00005871
    22b8:	200000f8 	.word	0x200000f8
    22bc:	00003c05 	.word	0x00003c05
    22c0:	20000134 	.word	0x20000134
    22c4:	00002255 	.word	0x00002255

000022c8 <Wait_10us>:
	while ((EPD_Counter - curTicks) < ms) __WFI();
	stop_EPD_timer();
}


static void Wait_10us(void) {
    22c8:	b580      	push	{r7, lr}
    22ca:	af00      	add	r7, sp, #0
	//delay_us(10);
}
    22cc:	46bd      	mov	sp, r7
    22ce:	bd80      	pop	{r7, pc}

000022d0 <epd_spi_init>:
static bool spi_flag=FALSE;
//#define SLAVE_SELECT_PIN Flash_CS_PIN
/**
* \brief Configure SPI
*/
void epd_spi_init(void) {
    22d0:	b580      	push	{r7, lr}
    22d2:	b08e      	sub	sp, #56	; 0x38
    22d4:	af00      	add	r7, sp, #0
	if(spi_flag) return;
    22d6:	4b18      	ldr	r3, [pc, #96]	; (2338 <epd_spi_init+0x68>)
    22d8:	781b      	ldrb	r3, [r3, #0]
    22da:	2b00      	cmp	r3, #0
    22dc:	d129      	bne.n	2332 <epd_spi_init+0x62>
	struct spi_config config_spi_master;  
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
    22de:	1c3b      	adds	r3, r7, #0
    22e0:	1c18      	adds	r0, r3, #0
    22e2:	4b16      	ldr	r3, [pc, #88]	; (233c <epd_spi_init+0x6c>)
    22e4:	4798      	blx	r3

	config_spi_master.mux_setting = SPI_SERCOM_MUX;
    22e6:	1c3b      	adds	r3, r7, #0
    22e8:	2280      	movs	r2, #128	; 0x80
    22ea:	0252      	lsls	r2, r2, #9
    22ec:	60da      	str	r2, [r3, #12]
	config_spi_master.transfer_mode=SPI_TRANSFER_MODE_0;
    22ee:	1c3b      	adds	r3, r7, #0
    22f0:	2200      	movs	r2, #0
    22f2:	609a      	str	r2, [r3, #8]
    config_spi_master.mode_specific.master.baudrate=SPI_baudrate;
    22f4:	1c3b      	adds	r3, r7, #0
    22f6:	4a12      	ldr	r2, [pc, #72]	; (2340 <epd_spi_init+0x70>)
    22f8:	619a      	str	r2, [r3, #24]
	/* Configure pad 0 for data in */
	config_spi_master.pinmux_pad0 = EX_SPI_MISO_PAD;
    22fa:	1c3b      	adds	r3, r7, #0
    22fc:	4a11      	ldr	r2, [pc, #68]	; (2344 <epd_spi_init+0x74>)
    22fe:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 1 as unused */
	config_spi_master.pinmux_pad1 =PINMUX_UNUSED;
    2300:	1c3b      	adds	r3, r7, #0
    2302:	2201      	movs	r2, #1
    2304:	4252      	negs	r2, r2
    2306:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 2 for data out */
	config_spi_master.pinmux_pad2 = EX_SPI_MOSI_PAD;
    2308:	1c3b      	adds	r3, r7, #0
    230a:	4a0f      	ldr	r2, [pc, #60]	; (2348 <epd_spi_init+0x78>)
    230c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure pad 3 for SCK */
	config_spi_master.pinmux_pad3 = EX_SPI_SCK_PAD;
    230e:	1c3b      	adds	r3, r7, #0
    2310:	4a0e      	ldr	r2, [pc, #56]	; (234c <epd_spi_init+0x7c>)
    2312:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi_master);
    2314:	490e      	ldr	r1, [pc, #56]	; (2350 <epd_spi_init+0x80>)
    2316:	4a0f      	ldr	r2, [pc, #60]	; (2354 <epd_spi_init+0x84>)
    2318:	1c3b      	adds	r3, r7, #0
    231a:	1c08      	adds	r0, r1, #0
    231c:	1c11      	adds	r1, r2, #0
    231e:	1c1a      	adds	r2, r3, #0
    2320:	4b0d      	ldr	r3, [pc, #52]	; (2358 <epd_spi_init+0x88>)
    2322:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    2324:	4b0a      	ldr	r3, [pc, #40]	; (2350 <epd_spi_init+0x80>)
    2326:	1c18      	adds	r0, r3, #0
    2328:	4b0c      	ldr	r3, [pc, #48]	; (235c <epd_spi_init+0x8c>)
    232a:	4798      	blx	r3
	spi_flag=TRUE;
    232c:	4b02      	ldr	r3, [pc, #8]	; (2338 <epd_spi_init+0x68>)
    232e:	2201      	movs	r2, #1
    2330:	701a      	strb	r2, [r3, #0]
}
    2332:	46bd      	mov	sp, r7
    2334:	b00e      	add	sp, #56	; 0x38
    2336:	bd80      	pop	{r7, pc}
    2338:	200000d0 	.word	0x200000d0
    233c:	00001d91 	.word	0x00001d91
    2340:	007a1200 	.word	0x007a1200
    2344:	00040003 	.word	0x00040003
    2348:	00060003 	.word	0x00060003
    234c:	00070003 	.word	0x00070003
    2350:	200000c4 	.word	0x200000c4
    2354:	42000800 	.word	0x42000800
    2358:	000045f5 	.word	0x000045f5
    235c:	00001e15 	.word	0x00001e15

00002360 <epd_spi_attach>:

/**
* \brief Initialize SPI
*/
void epd_spi_attach (void) {
    2360:	b580      	push	{r7, lr}
    2362:	af00      	add	r7, sp, #0
	epd_spi_init();
    2364:	4b01      	ldr	r3, [pc, #4]	; (236c <epd_spi_attach+0xc>)
    2366:	4798      	blx	r3

}
    2368:	46bd      	mov	sp, r7
    236a:	bd80      	pop	{r7, pc}
    236c:	000022d1 	.word	0x000022d1

00002370 <epd_spi_detach>:

/**
* \brief Disable SPI and change to GPIO
*/
void epd_spi_detach (void) {
    2370:	b580      	push	{r7, lr}
    2372:	af00      	add	r7, sp, #0
	spi_disable(&spi_master_instance);
    2374:	4b14      	ldr	r3, [pc, #80]	; (23c8 <epd_spi_detach+0x58>)
    2376:	1c18      	adds	r0, r3, #0
    2378:	4b14      	ldr	r3, [pc, #80]	; (23cc <epd_spi_detach+0x5c>)
    237a:	4798      	blx	r3
	
    ioport_enable_pin(SPI_CLK_PIN);    
    237c:	2007      	movs	r0, #7
    237e:	4b14      	ldr	r3, [pc, #80]	; (23d0 <epd_spi_detach+0x60>)
    2380:	4798      	blx	r3
    ioport_enable_pin(SPI_MOSI_PIN);
    2382:	2006      	movs	r0, #6
    2384:	4b12      	ldr	r3, [pc, #72]	; (23d0 <epd_spi_detach+0x60>)
    2386:	4798      	blx	r3
	ioport_enable_pin(SPI_MISO_PIN);
    2388:	2004      	movs	r0, #4
    238a:	4b11      	ldr	r3, [pc, #68]	; (23d0 <epd_spi_detach+0x60>)
    238c:	4798      	blx	r3
	
    config_gpio_dir_o(SPI_CLK_PIN);
    238e:	2007      	movs	r0, #7
    2390:	2101      	movs	r1, #1
    2392:	4b10      	ldr	r3, [pc, #64]	; (23d4 <epd_spi_detach+0x64>)
    2394:	4798      	blx	r3
    config_gpio_dir_o(SPI_MOSI_PIN);
    2396:	2006      	movs	r0, #6
    2398:	2101      	movs	r1, #1
    239a:	4b0e      	ldr	r3, [pc, #56]	; (23d4 <epd_spi_detach+0x64>)
    239c:	4798      	blx	r3
    config_gpio_dir_o(SPI_MISO_PIN);
    239e:	2004      	movs	r0, #4
    23a0:	2101      	movs	r1, #1
    23a2:	4b0c      	ldr	r3, [pc, #48]	; (23d4 <epd_spi_detach+0x64>)
    23a4:	4798      	blx	r3
	
    set_gpio_low(SPI_CLK_PIN);
    23a6:	2007      	movs	r0, #7
    23a8:	2100      	movs	r1, #0
    23aa:	4b0b      	ldr	r3, [pc, #44]	; (23d8 <epd_spi_detach+0x68>)
    23ac:	4798      	blx	r3
    set_gpio_low(SPI_MISO_PIN);
    23ae:	2004      	movs	r0, #4
    23b0:	2100      	movs	r1, #0
    23b2:	4b09      	ldr	r3, [pc, #36]	; (23d8 <epd_spi_detach+0x68>)
    23b4:	4798      	blx	r3
    set_gpio_low(SPI_MOSI_PIN);
    23b6:	2006      	movs	r0, #6
    23b8:	2100      	movs	r1, #0
    23ba:	4b07      	ldr	r3, [pc, #28]	; (23d8 <epd_spi_detach+0x68>)
    23bc:	4798      	blx	r3
	spi_flag=FALSE;
    23be:	4b07      	ldr	r3, [pc, #28]	; (23dc <epd_spi_detach+0x6c>)
    23c0:	2200      	movs	r2, #0
    23c2:	701a      	strb	r2, [r3, #0]
	
}
    23c4:	46bd      	mov	sp, r7
    23c6:	bd80      	pop	{r7, pc}
    23c8:	200000c4 	.word	0x200000c4
    23cc:	00001e49 	.word	0x00001e49
    23d0:	00001ce9 	.word	0x00001ce9
    23d4:	00001d05 	.word	0x00001d05
    23d8:	00001d2d 	.word	0x00001d2d
    23dc:	200000d0 	.word	0x200000d0

000023e0 <epd_spi_write>:
/**
 * \brief Send data to SPI
 *
 * \param Data The data to be sent out
 */
void epd_spi_write (unsigned char Data) {
    23e0:	b580      	push	{r7, lr}
    23e2:	b082      	sub	sp, #8
    23e4:	af00      	add	r7, sp, #0
    23e6:	1c02      	adds	r2, r0, #0
    23e8:	1dfb      	adds	r3, r7, #7
    23ea:	701a      	strb	r2, [r3, #0]
	//uint16_t retval;
	//spi_master_instance.hw->SPI.CTRLB.bit.RXEN=0;
	spi_write(&spi_master_instance, Data);
    23ec:	1dfb      	adds	r3, r7, #7
    23ee:	781b      	ldrb	r3, [r3, #0]
    23f0:	b29b      	uxth	r3, r3
    23f2:	4a09      	ldr	r2, [pc, #36]	; (2418 <epd_spi_write+0x38>)
    23f4:	1c10      	adds	r0, r2, #0
    23f6:	1c19      	adds	r1, r3, #0
    23f8:	4b08      	ldr	r3, [pc, #32]	; (241c <epd_spi_write+0x3c>)
    23fa:	4798      	blx	r3
	while (!spi_is_write_complete(&spi_master_instance));
    23fc:	46c0      	nop			; (mov r8, r8)
    23fe:	4b06      	ldr	r3, [pc, #24]	; (2418 <epd_spi_write+0x38>)
    2400:	1c18      	adds	r0, r3, #0
    2402:	4b07      	ldr	r3, [pc, #28]	; (2420 <epd_spi_write+0x40>)
    2404:	4798      	blx	r3
    2406:	1c03      	adds	r3, r0, #0
    2408:	2201      	movs	r2, #1
    240a:	4053      	eors	r3, r2
    240c:	b2db      	uxtb	r3, r3
    240e:	2b00      	cmp	r3, #0
    2410:	d1f5      	bne.n	23fe <epd_spi_write+0x1e>
	//while (!spi_is_ready_to_read(&spi_master_instance));
	//spi_read(&spi_master_instance, &retval);
	
}
    2412:	46bd      	mov	sp, r7
    2414:	b002      	add	sp, #8
    2416:	bd80      	pop	{r7, pc}
    2418:	200000c4 	.word	0x200000c4
    241c:	00001ed1 	.word	0x00001ed1
    2420:	00001e81 	.word	0x00001e81

00002424 <epd_spi_read>:
/**
 * \brief SPI synchronous read
 *
 * \param RDATA The data to be read
 */
uint8_t epd_spi_read(uint16_t rdata) {
    2424:	b580      	push	{r7, lr}
    2426:	b082      	sub	sp, #8
    2428:	af00      	add	r7, sp, #0
    242a:	1c02      	adds	r2, r0, #0
    242c:	1dbb      	adds	r3, r7, #6
    242e:	801a      	strh	r2, [r3, #0]
	//spi_master_instance.hw->SPI.CTRLB.bit.RXEN=1;
	spi_transceive_wait(&spi_master_instance,rdata, (uint16_t *)&rdata);
    2430:	1dbb      	adds	r3, r7, #6
    2432:	881a      	ldrh	r2, [r3, #0]
    2434:	4906      	ldr	r1, [pc, #24]	; (2450 <epd_spi_read+0x2c>)
    2436:	1dbb      	adds	r3, r7, #6
    2438:	1c08      	adds	r0, r1, #0
    243a:	1c11      	adds	r1, r2, #0
    243c:	1c1a      	adds	r2, r3, #0
    243e:	4b05      	ldr	r3, [pc, #20]	; (2454 <epd_spi_read+0x30>)
    2440:	4798      	blx	r3
	return rdata;
    2442:	1dbb      	adds	r3, r7, #6
    2444:	881b      	ldrh	r3, [r3, #0]
    2446:	b2db      	uxtb	r3, r3
}
    2448:	1c18      	adds	r0, r3, #0
    244a:	46bd      	mov	sp, r7
    244c:	b002      	add	sp, #8
    244e:	bd80      	pop	{r7, pc}
    2450:	200000c4 	.word	0x200000c4
    2454:	000046fd 	.word	0x000046fd

00002458 <SPI_R>:
*
* \param Register The Register Index as SPI Data to COG
* \param Data The Register Data for sending command data to COG
* \return the SPI read value
*/
uint8_t SPI_R(uint8_t Register, uint8_t Data) {
    2458:	b590      	push	{r4, r7, lr}
    245a:	b085      	sub	sp, #20
    245c:	af00      	add	r7, sp, #0
    245e:	1c0a      	adds	r2, r1, #0
    2460:	1dfb      	adds	r3, r7, #7
    2462:	1c01      	adds	r1, r0, #0
    2464:	7019      	strb	r1, [r3, #0]
    2466:	1dbb      	adds	r3, r7, #6
    2468:	701a      	strb	r2, [r3, #0]
	uint8_t result;
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN=0;
    246a:	4b1d      	ldr	r3, [pc, #116]	; (24e0 <SPI_R+0x88>)
    246c:	681b      	ldr	r3, [r3, #0]
    246e:	6859      	ldr	r1, [r3, #4]
    2470:	4a1c      	ldr	r2, [pc, #112]	; (24e4 <SPI_R+0x8c>)
    2472:	400a      	ands	r2, r1
    2474:	605a      	str	r2, [r3, #4]
	EPD_cs_low ();
    2476:	2005      	movs	r0, #5
    2478:	2100      	movs	r1, #0
    247a:	4b1b      	ldr	r3, [pc, #108]	; (24e8 <SPI_R+0x90>)
    247c:	4798      	blx	r3
	epd_spi_write (0x70); // header of Register Index
    247e:	2070      	movs	r0, #112	; 0x70
    2480:	4b1a      	ldr	r3, [pc, #104]	; (24ec <SPI_R+0x94>)
    2482:	4798      	blx	r3
	epd_spi_write (Register);
    2484:	1dfb      	adds	r3, r7, #7
    2486:	781b      	ldrb	r3, [r3, #0]
    2488:	1c18      	adds	r0, r3, #0
    248a:	4b18      	ldr	r3, [pc, #96]	; (24ec <SPI_R+0x94>)
    248c:	4798      	blx	r3

	EPD_cs_high ();
    248e:	2005      	movs	r0, #5
    2490:	2101      	movs	r1, #1
    2492:	4b15      	ldr	r3, [pc, #84]	; (24e8 <SPI_R+0x90>)
    2494:	4798      	blx	r3
	Wait_10us ();	
    2496:	4b16      	ldr	r3, [pc, #88]	; (24f0 <SPI_R+0x98>)
    2498:	4798      	blx	r3
	
	EPD_cs_low ();
    249a:	2005      	movs	r0, #5
    249c:	2100      	movs	r1, #0
    249e:	4b12      	ldr	r3, [pc, #72]	; (24e8 <SPI_R+0x90>)
    24a0:	4798      	blx	r3

	epd_spi_write (0x73); // header of Register Data of read command
    24a2:	2073      	movs	r0, #115	; 0x73
    24a4:	4b11      	ldr	r3, [pc, #68]	; (24ec <SPI_R+0x94>)
    24a6:	4798      	blx	r3
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN=1;
    24a8:	4b0d      	ldr	r3, [pc, #52]	; (24e0 <SPI_R+0x88>)
    24aa:	681b      	ldr	r3, [r3, #0]
    24ac:	685a      	ldr	r2, [r3, #4]
    24ae:	2180      	movs	r1, #128	; 0x80
    24b0:	0289      	lsls	r1, r1, #10
    24b2:	430a      	orrs	r2, r1
    24b4:	605a      	str	r2, [r3, #4]
	result=epd_spi_read (Data);
    24b6:	1dbb      	adds	r3, r7, #6
    24b8:	781b      	ldrb	r3, [r3, #0]
    24ba:	b29b      	uxth	r3, r3
    24bc:	1c3c      	adds	r4, r7, #0
    24be:	340f      	adds	r4, #15
    24c0:	1c18      	adds	r0, r3, #0
    24c2:	4b0c      	ldr	r3, [pc, #48]	; (24f4 <SPI_R+0x9c>)
    24c4:	4798      	blx	r3
    24c6:	1c03      	adds	r3, r0, #0
    24c8:	7023      	strb	r3, [r4, #0]

	EPD_cs_high ();
    24ca:	2005      	movs	r0, #5
    24cc:	2101      	movs	r1, #1
    24ce:	4b06      	ldr	r3, [pc, #24]	; (24e8 <SPI_R+0x90>)
    24d0:	4798      	blx	r3

	return result;
    24d2:	1c3b      	adds	r3, r7, #0
    24d4:	330f      	adds	r3, #15
    24d6:	781b      	ldrb	r3, [r3, #0]
}
    24d8:	1c18      	adds	r0, r3, #0
    24da:	46bd      	mov	sp, r7
    24dc:	b005      	add	sp, #20
    24de:	bd90      	pop	{r4, r7, pc}
    24e0:	200000c4 	.word	0x200000c4
    24e4:	fffdffff 	.word	0xfffdffff
    24e8:	00001d2d 	.word	0x00001d2d
    24ec:	000023e1 	.word	0x000023e1
    24f0:	000022c9 	.word	0x000022c9
    24f4:	00002425 	.word	0x00002425

000024f8 <epd_spi_send>:
* \param register_data The Register Data for sending command data to COG
* \param length The number of bytes of Register Data which depends on which
* Register Index is selected.
*/
void epd_spi_send (unsigned char register_index, unsigned char *register_data,
               unsigned length) {
    24f8:	b580      	push	{r7, lr}
    24fa:	b084      	sub	sp, #16
    24fc:	af00      	add	r7, sp, #0
    24fe:	60b9      	str	r1, [r7, #8]
    2500:	607a      	str	r2, [r7, #4]
    2502:	1c3b      	adds	r3, r7, #0
    2504:	330f      	adds	r3, #15
    2506:	1c02      	adds	r2, r0, #0
    2508:	701a      	strb	r2, [r3, #0]
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN=0;
    250a:	4b1a      	ldr	r3, [pc, #104]	; (2574 <epd_spi_send+0x7c>)
    250c:	681b      	ldr	r3, [r3, #0]
    250e:	6859      	ldr	r1, [r3, #4]
    2510:	4a19      	ldr	r2, [pc, #100]	; (2578 <epd_spi_send+0x80>)
    2512:	400a      	ands	r2, r1
    2514:	605a      	str	r2, [r3, #4]
	EPD_cs_low ();
    2516:	2005      	movs	r0, #5
    2518:	2100      	movs	r1, #0
    251a:	4b18      	ldr	r3, [pc, #96]	; (257c <epd_spi_send+0x84>)
    251c:	4798      	blx	r3
	epd_spi_write (0x70); // header of Register Index
    251e:	2070      	movs	r0, #112	; 0x70
    2520:	4b17      	ldr	r3, [pc, #92]	; (2580 <epd_spi_send+0x88>)
    2522:	4798      	blx	r3
	epd_spi_write (register_index);
    2524:	1c3b      	adds	r3, r7, #0
    2526:	330f      	adds	r3, #15
    2528:	781b      	ldrb	r3, [r3, #0]
    252a:	1c18      	adds	r0, r3, #0
    252c:	4b14      	ldr	r3, [pc, #80]	; (2580 <epd_spi_send+0x88>)
    252e:	4798      	blx	r3

	EPD_cs_high ();
    2530:	2005      	movs	r0, #5
    2532:	2101      	movs	r1, #1
    2534:	4b11      	ldr	r3, [pc, #68]	; (257c <epd_spi_send+0x84>)
    2536:	4798      	blx	r3
	Wait_10us ();
    2538:	4b12      	ldr	r3, [pc, #72]	; (2584 <epd_spi_send+0x8c>)
    253a:	4798      	blx	r3
	EPD_cs_low ();
    253c:	2005      	movs	r0, #5
    253e:	2100      	movs	r1, #0
    2540:	4b0e      	ldr	r3, [pc, #56]	; (257c <epd_spi_send+0x84>)
    2542:	4798      	blx	r3

	epd_spi_write (0x72); // header of Register Data of write command
    2544:	2072      	movs	r0, #114	; 0x72
    2546:	4b0e      	ldr	r3, [pc, #56]	; (2580 <epd_spi_send+0x88>)
    2548:	4798      	blx	r3
	while(length--) {
    254a:	e006      	b.n	255a <epd_spi_send+0x62>
	   epd_spi_write (*register_data++);
    254c:	68bb      	ldr	r3, [r7, #8]
    254e:	1c5a      	adds	r2, r3, #1
    2550:	60ba      	str	r2, [r7, #8]
    2552:	781b      	ldrb	r3, [r3, #0]
    2554:	1c18      	adds	r0, r3, #0
    2556:	4b0a      	ldr	r3, [pc, #40]	; (2580 <epd_spi_send+0x88>)
    2558:	4798      	blx	r3
	EPD_cs_high ();
	Wait_10us ();
	EPD_cs_low ();

	epd_spi_write (0x72); // header of Register Data of write command
	while(length--) {
    255a:	687b      	ldr	r3, [r7, #4]
    255c:	1e5a      	subs	r2, r3, #1
    255e:	607a      	str	r2, [r7, #4]
    2560:	2b00      	cmp	r3, #0
    2562:	d1f3      	bne.n	254c <epd_spi_send+0x54>
	   epd_spi_write (*register_data++);
	}
	EPD_cs_high ();
    2564:	2005      	movs	r0, #5
    2566:	2101      	movs	r1, #1
    2568:	4b04      	ldr	r3, [pc, #16]	; (257c <epd_spi_send+0x84>)
    256a:	4798      	blx	r3
}
    256c:	46bd      	mov	sp, r7
    256e:	b004      	add	sp, #16
    2570:	bd80      	pop	{r7, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	200000c4 	.word	0x200000c4
    2578:	fffdffff 	.word	0xfffdffff
    257c:	00001d2d 	.word	0x00001d2d
    2580:	000023e1 	.word	0x000023e1
    2584:	000022c9 	.word	0x000022c9

00002588 <epd_spi_send_byte>:
* \brief SPI command
*
* \param register_index The Register Index as SPI command to COG
* \param register_data The Register Data for sending command data to COG
*/
void epd_spi_send_byte (uint8_t register_index, uint8_t register_data) {
    2588:	b580      	push	{r7, lr}
    258a:	b082      	sub	sp, #8
    258c:	af00      	add	r7, sp, #0
    258e:	1c0a      	adds	r2, r1, #0
    2590:	1dfb      	adds	r3, r7, #7
    2592:	1c01      	adds	r1, r0, #0
    2594:	7019      	strb	r1, [r3, #0]
    2596:	1dbb      	adds	r3, r7, #6
    2598:	701a      	strb	r2, [r3, #0]
	spi_master_instance.hw->SPI.CTRLB.bit.RXEN=0;
    259a:	4b15      	ldr	r3, [pc, #84]	; (25f0 <epd_spi_send_byte+0x68>)
    259c:	681b      	ldr	r3, [r3, #0]
    259e:	6859      	ldr	r1, [r3, #4]
    25a0:	4a14      	ldr	r2, [pc, #80]	; (25f4 <epd_spi_send_byte+0x6c>)
    25a2:	400a      	ands	r2, r1
    25a4:	605a      	str	r2, [r3, #4]
	EPD_cs_low ();
    25a6:	2005      	movs	r0, #5
    25a8:	2100      	movs	r1, #0
    25aa:	4b13      	ldr	r3, [pc, #76]	; (25f8 <epd_spi_send_byte+0x70>)
    25ac:	4798      	blx	r3
	epd_spi_write (0x70); // header of Register Index
    25ae:	2070      	movs	r0, #112	; 0x70
    25b0:	4b12      	ldr	r3, [pc, #72]	; (25fc <epd_spi_send_byte+0x74>)
    25b2:	4798      	blx	r3
	epd_spi_write (register_index);
    25b4:	1dfb      	adds	r3, r7, #7
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	1c18      	adds	r0, r3, #0
    25ba:	4b10      	ldr	r3, [pc, #64]	; (25fc <epd_spi_send_byte+0x74>)
    25bc:	4798      	blx	r3

	EPD_cs_high ();
    25be:	2005      	movs	r0, #5
    25c0:	2101      	movs	r1, #1
    25c2:	4b0d      	ldr	r3, [pc, #52]	; (25f8 <epd_spi_send_byte+0x70>)
    25c4:	4798      	blx	r3
	Wait_10us ();
    25c6:	4b0e      	ldr	r3, [pc, #56]	; (2600 <epd_spi_send_byte+0x78>)
    25c8:	4798      	blx	r3
	EPD_cs_low ();
    25ca:	2005      	movs	r0, #5
    25cc:	2100      	movs	r1, #0
    25ce:	4b0a      	ldr	r3, [pc, #40]	; (25f8 <epd_spi_send_byte+0x70>)
    25d0:	4798      	blx	r3
	epd_spi_write (0x72); // header of Register Data
    25d2:	2072      	movs	r0, #114	; 0x72
    25d4:	4b09      	ldr	r3, [pc, #36]	; (25fc <epd_spi_send_byte+0x74>)
    25d6:	4798      	blx	r3
	epd_spi_write (register_data);
    25d8:	1dbb      	adds	r3, r7, #6
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	1c18      	adds	r0, r3, #0
    25de:	4b07      	ldr	r3, [pc, #28]	; (25fc <epd_spi_send_byte+0x74>)
    25e0:	4798      	blx	r3
	EPD_cs_high ();
    25e2:	2005      	movs	r0, #5
    25e4:	2101      	movs	r1, #1
    25e6:	4b04      	ldr	r3, [pc, #16]	; (25f8 <epd_spi_send_byte+0x70>)
    25e8:	4798      	blx	r3
}
    25ea:	46bd      	mov	sp, r7
    25ec:	b002      	add	sp, #8
    25ee:	bd80      	pop	{r7, pc}
    25f0:	200000c4 	.word	0x200000c4
    25f4:	fffdffff 	.word	0xfffdffff
    25f8:	00001d2d 	.word	0x00001d2d
    25fc:	000023e1 	.word	0x000023e1
    2600:	000022c9 	.word	0x000022c9

00002604 <get_ADC_value>:
/**
* \brief ADC trigger conversion
*
* \return the ADC conversion value
*/
static inline uint16_t get_ADC_value(void) {
    2604:	b580      	push	{r7, lr}
    2606:	b082      	sub	sp, #8
    2608:	af00      	add	r7, sp, #0
	/** Conversion value */
    uint16_t g_adc_sample_data;
	adc_start_conversion(&adc_instance);
    260a:	4b09      	ldr	r3, [pc, #36]	; (2630 <get_ADC_value+0x2c>)
    260c:	1c18      	adds	r0, r3, #0
    260e:	4b09      	ldr	r3, [pc, #36]	; (2634 <get_ADC_value+0x30>)
    2610:	4798      	blx	r3
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &g_adc_sample_data) == STATUS_BUSY);	
    2612:	4a07      	ldr	r2, [pc, #28]	; (2630 <get_ADC_value+0x2c>)
    2614:	1dbb      	adds	r3, r7, #6
    2616:	1c10      	adds	r0, r2, #0
    2618:	1c19      	adds	r1, r3, #0
    261a:	4b07      	ldr	r3, [pc, #28]	; (2638 <get_ADC_value+0x34>)
    261c:	4798      	blx	r3
    261e:	1c03      	adds	r3, r0, #0
    2620:	2b05      	cmp	r3, #5
    2622:	d0f6      	beq.n	2612 <get_ADC_value+0xe>
	return g_adc_sample_data;
    2624:	1dbb      	adds	r3, r7, #6
    2626:	881b      	ldrh	r3, [r3, #0]
}
    2628:	1c18      	adds	r0, r3, #0
    262a:	46bd      	mov	sp, r7
    262c:	b002      	add	sp, #8
    262e:	bd80      	pop	{r7, pc}
    2630:	20000114 	.word	0x20000114
    2634:	000019f5 	.word	0x000019f5
    2638:	00001a3d 	.word	0x00001a3d

0000263c <get_temperature>:
/**
* \brief Get temperature value from ADC
*
* \return the Celsius temperature
*/
int16_t get_temperature(void) {
    263c:	b580      	push	{r7, lr}
    263e:	b084      	sub	sp, #16
    2640:	af00      	add	r7, sp, #0

	uint8_t	i;
	long ADC_value;
	float Vadc=0.0;
    2642:	2300      	movs	r3, #0
    2644:	607b      	str	r3, [r7, #4]
	float degC=0.0;
    2646:	2300      	movs	r3, #0
    2648:	603b      	str	r3, [r7, #0]
	adc_enable(&adc_instance);
    264a:	4b36      	ldr	r3, [pc, #216]	; (2724 <get_temperature+0xe8>)
    264c:	1c18      	adds	r0, r3, #0
    264e:	4b36      	ldr	r3, [pc, #216]	; (2728 <get_temperature+0xec>)
    2650:	4798      	blx	r3
	for(i=0; i<10; i++)get_ADC_value();
    2652:	1c3b      	adds	r3, r7, #0
    2654:	330f      	adds	r3, #15
    2656:	2200      	movs	r2, #0
    2658:	701a      	strb	r2, [r3, #0]
    265a:	e008      	b.n	266e <get_temperature+0x32>
    265c:	4b33      	ldr	r3, [pc, #204]	; (272c <get_temperature+0xf0>)
    265e:	4798      	blx	r3
    2660:	1c3b      	adds	r3, r7, #0
    2662:	330f      	adds	r3, #15
    2664:	781a      	ldrb	r2, [r3, #0]
    2666:	1c3b      	adds	r3, r7, #0
    2668:	330f      	adds	r3, #15
    266a:	3201      	adds	r2, #1
    266c:	701a      	strb	r2, [r3, #0]
    266e:	1c3b      	adds	r3, r7, #0
    2670:	330f      	adds	r3, #15
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	2b09      	cmp	r3, #9
    2676:	d9f1      	bls.n	265c <get_temperature+0x20>
	ADC_value=0;
    2678:	2300      	movs	r3, #0
    267a:	60bb      	str	r3, [r7, #8]
	for(i=0; i<_ADCSampleCount; i++) {
    267c:	1c3b      	adds	r3, r7, #0
    267e:	330f      	adds	r3, #15
    2680:	2200      	movs	r2, #0
    2682:	701a      	strb	r2, [r3, #0]
    2684:	e00c      	b.n	26a0 <get_temperature+0x64>
		ADC_value+=get_ADC_value();
    2686:	4b29      	ldr	r3, [pc, #164]	; (272c <get_temperature+0xf0>)
    2688:	4798      	blx	r3
    268a:	1c03      	adds	r3, r0, #0
    268c:	68ba      	ldr	r2, [r7, #8]
    268e:	18d3      	adds	r3, r2, r3
    2690:	60bb      	str	r3, [r7, #8]
	float Vadc=0.0;
	float degC=0.0;
	adc_enable(&adc_instance);
	for(i=0; i<10; i++)get_ADC_value();
	ADC_value=0;
	for(i=0; i<_ADCSampleCount; i++) {
    2692:	1c3b      	adds	r3, r7, #0
    2694:	330f      	adds	r3, #15
    2696:	781a      	ldrb	r2, [r3, #0]
    2698:	1c3b      	adds	r3, r7, #0
    269a:	330f      	adds	r3, #15
    269c:	3201      	adds	r2, #1
    269e:	701a      	strb	r2, [r3, #0]
    26a0:	1c3b      	adds	r3, r7, #0
    26a2:	330f      	adds	r3, #15
    26a4:	781b      	ldrb	r3, [r3, #0]
    26a6:	2b0f      	cmp	r3, #15
    26a8:	d9ed      	bls.n	2686 <get_temperature+0x4a>
		ADC_value+=get_ADC_value();
	}
	ADC_value=ADC_value/_ADCSampleCount;
    26aa:	68bb      	ldr	r3, [r7, #8]
    26ac:	2b00      	cmp	r3, #0
    26ae:	da00      	bge.n	26b2 <get_temperature+0x76>
    26b0:	330f      	adds	r3, #15
    26b2:	111b      	asrs	r3, r3, #4
    26b4:	60bb      	str	r3, [r7, #8]
	adc_disable(&adc_instance);
    26b6:	4b1b      	ldr	r3, [pc, #108]	; (2724 <get_temperature+0xe8>)
    26b8:	1c18      	adds	r0, r3, #0
    26ba:	4b1d      	ldr	r3, [pc, #116]	; (2730 <get_temperature+0xf4>)
    26bc:	4798      	blx	r3
	Vadc=(_ADCRefVcc/_ADCres)*ADC_value*_TempeScaled;
    26be:	4b1d      	ldr	r3, [pc, #116]	; (2734 <get_temperature+0xf8>)
    26c0:	68b8      	ldr	r0, [r7, #8]
    26c2:	4798      	blx	r3
    26c4:	1c02      	adds	r2, r0, #0
    26c6:	4b1c      	ldr	r3, [pc, #112]	; (2738 <get_temperature+0xfc>)
    26c8:	1c10      	adds	r0, r2, #0
    26ca:	491c      	ldr	r1, [pc, #112]	; (273c <get_temperature+0x100>)
    26cc:	4798      	blx	r3
    26ce:	1c03      	adds	r3, r0, #0
    26d0:	1c1a      	adds	r2, r3, #0
    26d2:	4b19      	ldr	r3, [pc, #100]	; (2738 <get_temperature+0xfc>)
    26d4:	1c10      	adds	r0, r2, #0
    26d6:	491a      	ldr	r1, [pc, #104]	; (2740 <get_temperature+0x104>)
    26d8:	4798      	blx	r3
    26da:	1c03      	adds	r3, r0, #0
    26dc:	607b      	str	r3, [r7, #4]
	degC=(100.0f+_DegCOffset)-(float)(((Vadc-1.199f)*1000.0f)/10.77f);
    26de:	4b19      	ldr	r3, [pc, #100]	; (2744 <get_temperature+0x108>)
    26e0:	6878      	ldr	r0, [r7, #4]
    26e2:	4919      	ldr	r1, [pc, #100]	; (2748 <get_temperature+0x10c>)
    26e4:	4798      	blx	r3
    26e6:	1c03      	adds	r3, r0, #0
    26e8:	1c1a      	adds	r2, r3, #0
    26ea:	4b13      	ldr	r3, [pc, #76]	; (2738 <get_temperature+0xfc>)
    26ec:	1c10      	adds	r0, r2, #0
    26ee:	4917      	ldr	r1, [pc, #92]	; (274c <get_temperature+0x110>)
    26f0:	4798      	blx	r3
    26f2:	1c03      	adds	r3, r0, #0
    26f4:	1c1a      	adds	r2, r3, #0
    26f6:	4b16      	ldr	r3, [pc, #88]	; (2750 <get_temperature+0x114>)
    26f8:	1c10      	adds	r0, r2, #0
    26fa:	4916      	ldr	r1, [pc, #88]	; (2754 <get_temperature+0x118>)
    26fc:	4798      	blx	r3
    26fe:	1c03      	adds	r3, r0, #0
    2700:	1c1a      	adds	r2, r3, #0
    2702:	4b10      	ldr	r3, [pc, #64]	; (2744 <get_temperature+0x108>)
    2704:	4814      	ldr	r0, [pc, #80]	; (2758 <get_temperature+0x11c>)
    2706:	1c11      	adds	r1, r2, #0
    2708:	4798      	blx	r3
    270a:	1c03      	adds	r3, r0, #0
    270c:	603b      	str	r3, [r7, #0]
	return   (int16_t)degC;
    270e:	4b13      	ldr	r3, [pc, #76]	; (275c <get_temperature+0x120>)
    2710:	6838      	ldr	r0, [r7, #0]
    2712:	4798      	blx	r3
    2714:	1c03      	adds	r3, r0, #0
    2716:	b29b      	uxth	r3, r3
    2718:	b21b      	sxth	r3, r3
}
    271a:	1c18      	adds	r0, r3, #0
    271c:	46bd      	mov	sp, r7
    271e:	b004      	add	sp, #16
    2720:	bd80      	pop	{r7, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	20000114 	.word	0x20000114
    2728:	00001945 	.word	0x00001945
    272c:	00002605 	.word	0x00002605
    2730:	0000199d 	.word	0x0000199d
    2734:	000060dd 	.word	0x000060dd
    2738:	00005b5d 	.word	0x00005b5d
    273c:	39d33333 	.word	0x39d33333
    2740:	40200000 	.word	0x40200000
    2744:	00005db1 	.word	0x00005db1
    2748:	3f9978d5 	.word	0x3f9978d5
    274c:	447a0000 	.word	0x447a0000
    2750:	00005911 	.word	0x00005911
    2754:	412c51ec 	.word	0x412c51ec
    2758:	42ca0000 	.word	0x42ca0000
    275c:	0000609d 	.word	0x0000609d

00002760 <initialize_temperature>:

/**
* \brief Initialize the temperature sensor
*/
void initialize_temperature(void) {
    2760:	b580      	push	{r7, lr}
    2762:	b08c      	sub	sp, #48	; 0x30
    2764:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
    adc_get_config_defaults(&config_adc);
    2766:	1c3b      	adds	r3, r7, #0
    2768:	1c18      	adds	r0, r3, #0
    276a:	4b0e      	ldr	r3, [pc, #56]	; (27a4 <initialize_temperature+0x44>)
    276c:	4798      	blx	r3
    config_adc.gain_factor =ADC_GAIN_FACTOR_1X;
    276e:	1c3b      	adds	r3, r7, #0
    2770:	2200      	movs	r2, #0
    2772:	609a      	str	r2, [r3, #8]
    config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    2774:	1c3b      	adds	r3, r7, #0
    2776:	2280      	movs	r2, #128	; 0x80
    2778:	0092      	lsls	r2, r2, #2
    277a:	805a      	strh	r2, [r3, #2]
    config_adc.reference = ADC_REFERENCE_INTVCC1;
    277c:	1c3b      	adds	r3, r7, #0
    277e:	2202      	movs	r2, #2
    2780:	705a      	strb	r2, [r3, #1]
    config_adc.positive_input = Temperature_Sensor_ADC;
    2782:	1c3b      	adds	r3, r7, #0
    2784:	2208      	movs	r2, #8
    2786:	731a      	strb	r2, [r3, #12]
    config_adc.resolution = ADC_RESOLUTION_12BIT;
    2788:	1c3b      	adds	r3, r7, #0
    278a:	2200      	movs	r2, #0
    278c:	711a      	strb	r2, [r3, #4]
    adc_init(&adc_instance, ADC, &config_adc);
    278e:	4906      	ldr	r1, [pc, #24]	; (27a8 <initialize_temperature+0x48>)
    2790:	4a06      	ldr	r2, [pc, #24]	; (27ac <initialize_temperature+0x4c>)
    2792:	1c3b      	adds	r3, r7, #0
    2794:	1c08      	adds	r0, r1, #0
    2796:	1c11      	adds	r1, r2, #0
    2798:	1c1a      	adds	r2, r3, #0
    279a:	4b05      	ldr	r3, [pc, #20]	; (27b0 <initialize_temperature+0x50>)
    279c:	4798      	blx	r3
}
    279e:	46bd      	mov	sp, r7
    27a0:	b00c      	add	sp, #48	; 0x30
    27a2:	bd80      	pop	{r7, pc}
    27a4:	000029fd 	.word	0x000029fd
    27a8:	20000114 	.word	0x20000114
    27ac:	42004000 	.word	0x42004000
    27b0:	00003041 	.word	0x00003041

000027b4 <EPD_initialize_gpio>:

/**
* \brief Configure GPIO
*/
void EPD_initialize_gpio(void) {
    27b4:	b580      	push	{r7, lr}
    27b6:	af00      	add	r7, sp, #0
	 ioport_init();
    27b8:	4b17      	ldr	r3, [pc, #92]	; (2818 <EPD_initialize_gpio+0x64>)
    27ba:	4798      	blx	r3
	config_gpio_dir_i( EPD_BUSY_PIN);
    27bc:	2024      	movs	r0, #36	; 0x24
    27be:	2100      	movs	r1, #0
    27c0:	4b16      	ldr	r3, [pc, #88]	; (281c <EPD_initialize_gpio+0x68>)
    27c2:	4798      	blx	r3
	config_gpio_dir_o( EPD_CS_PIN);
    27c4:	2005      	movs	r0, #5
    27c6:	2101      	movs	r1, #1
    27c8:	4b14      	ldr	r3, [pc, #80]	; (281c <EPD_initialize_gpio+0x68>)
    27ca:	4798      	blx	r3
	config_gpio_dir_o( EPD_RST_PIN);
    27cc:	2027      	movs	r0, #39	; 0x27
    27ce:	2101      	movs	r1, #1
    27d0:	4b12      	ldr	r3, [pc, #72]	; (281c <EPD_initialize_gpio+0x68>)
    27d2:	4798      	blx	r3
	config_gpio_dir_o( EPD_PANELON_PIN);
    27d4:	2023      	movs	r0, #35	; 0x23
    27d6:	2101      	movs	r1, #1
    27d8:	4b10      	ldr	r3, [pc, #64]	; (281c <EPD_initialize_gpio+0x68>)
    27da:	4798      	blx	r3
	config_gpio_dir_o( EPD_DISCHARGE_PIN);
    27dc:	2026      	movs	r0, #38	; 0x26
    27de:	2101      	movs	r1, #1
    27e0:	4b0e      	ldr	r3, [pc, #56]	; (281c <EPD_initialize_gpio+0x68>)
    27e2:	4798      	blx	r3
	config_gpio_dir_o( EPD_BORDER_PIN);
    27e4:	2021      	movs	r0, #33	; 0x21
    27e6:	2101      	movs	r1, #1
    27e8:	4b0c      	ldr	r3, [pc, #48]	; (281c <EPD_initialize_gpio+0x68>)
    27ea:	4798      	blx	r3
	config_gpio_dir_o( Flash_CS_PIN);
    27ec:	2025      	movs	r0, #37	; 0x25
    27ee:	2101      	movs	r1, #1
    27f0:	4b0a      	ldr	r3, [pc, #40]	; (281c <EPD_initialize_gpio+0x68>)
    27f2:	4798      	blx	r3
	config_gpio_dir_o( PWM_PIN);
    27f4:	2022      	movs	r0, #34	; 0x22
    27f6:	2101      	movs	r1, #1
    27f8:	4b08      	ldr	r3, [pc, #32]	; (281c <EPD_initialize_gpio+0x68>)
    27fa:	4798      	blx	r3
	config_gpio_dir_i( Temper_PIN);
    27fc:	2020      	movs	r0, #32
    27fe:	2100      	movs	r1, #0
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <EPD_initialize_gpio+0x68>)
    2802:	4798      	blx	r3
	EPD_flash_cs_high();
    2804:	2025      	movs	r0, #37	; 0x25
    2806:	2101      	movs	r1, #1
    2808:	4b05      	ldr	r3, [pc, #20]	; (2820 <EPD_initialize_gpio+0x6c>)
    280a:	4798      	blx	r3
	EPD_border_low();
    280c:	2021      	movs	r0, #33	; 0x21
    280e:	2100      	movs	r1, #0
    2810:	4b03      	ldr	r3, [pc, #12]	; (2820 <EPD_initialize_gpio+0x6c>)
    2812:	4798      	blx	r3
}
    2814:	46bd      	mov	sp, r7
    2816:	bd80      	pop	{r7, pc}
    2818:	00001cd9 	.word	0x00001cd9
    281c:	00001d05 	.word	0x00001d05
    2820:	00001d2d 	.word	0x00001d2d

00002824 <EPD_display_hardware_init>:

/**
* \brief Initialize the EPD hardware setting
*/
void EPD_display_hardware_init (void) {
    2824:	b580      	push	{r7, lr}
    2826:	af00      	add	r7, sp, #0
	
	EPD_initialize_gpio();	   
    2828:	4b11      	ldr	r3, [pc, #68]	; (2870 <EPD_display_hardware_init+0x4c>)
    282a:	4798      	blx	r3
	EPD_Vcc_turn_off();		
    282c:	2023      	movs	r0, #35	; 0x23
    282e:	2100      	movs	r1, #0
    2830:	4b10      	ldr	r3, [pc, #64]	; (2874 <EPD_display_hardware_init+0x50>)
    2832:	4798      	blx	r3
	initialize_temperature();
    2834:	4b10      	ldr	r3, [pc, #64]	; (2878 <EPD_display_hardware_init+0x54>)
    2836:	4798      	blx	r3
	EPD_cs_low();
    2838:	2005      	movs	r0, #5
    283a:	2100      	movs	r1, #0
    283c:	4b0d      	ldr	r3, [pc, #52]	; (2874 <EPD_display_hardware_init+0x50>)
    283e:	4798      	blx	r3
	EPD_pwm_low();
    2840:	2022      	movs	r0, #34	; 0x22
    2842:	2100      	movs	r1, #0
    2844:	4b0b      	ldr	r3, [pc, #44]	; (2874 <EPD_display_hardware_init+0x50>)
    2846:	4798      	blx	r3
	EPD_rst_low();
    2848:	2027      	movs	r0, #39	; 0x27
    284a:	2100      	movs	r1, #0
    284c:	4b09      	ldr	r3, [pc, #36]	; (2874 <EPD_display_hardware_init+0x50>)
    284e:	4798      	blx	r3
	EPD_discharge_low();
    2850:	2026      	movs	r0, #38	; 0x26
    2852:	2100      	movs	r1, #0
    2854:	4b07      	ldr	r3, [pc, #28]	; (2874 <EPD_display_hardware_init+0x50>)
    2856:	4798      	blx	r3
	EPD_border_low();
    2858:	2021      	movs	r0, #33	; 0x21
    285a:	2100      	movs	r1, #0
    285c:	4b05      	ldr	r3, [pc, #20]	; (2874 <EPD_display_hardware_init+0x50>)
    285e:	4798      	blx	r3
	//initialize_EPD_timer();
	epd_spi_attach();
    2860:	4b06      	ldr	r3, [pc, #24]	; (287c <EPD_display_hardware_init+0x58>)
    2862:	4798      	blx	r3
	PWM_Run_Flag=false;
    2864:	4b06      	ldr	r3, [pc, #24]	; (2880 <EPD_display_hardware_init+0x5c>)
    2866:	2200      	movs	r2, #0
    2868:	701a      	strb	r2, [r3, #0]
    286a:	46bd      	mov	sp, r7
    286c:	bd80      	pop	{r7, pc}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	000027b5 	.word	0x000027b5
    2874:	00001d2d 	.word	0x00001d2d
    2878:	00002761 	.word	0x00002761
    287c:	00002361 	.word	0x00002361
    2880:	20000134 	.word	0x20000134

00002884 <EPD_display_init>:
#include  "EPD_interface.h"

/**
 * \brief Initialize the EPD hardware setting 
 */
void EPD_display_init(void) {
    2884:	b580      	push	{r7, lr}
    2886:	af00      	add	r7, sp, #0
	EPD_display_hardware_init();
    2888:	4b01      	ldr	r3, [pc, #4]	; (2890 <EPD_display_init+0xc>)
    288a:	4798      	blx	r3
}
    288c:	46bd      	mov	sp, r7
    288e:	bd80      	pop	{r7, pc}
    2890:	00002825 	.word	0x00002825

00002894 <EPD_display_from_pointer>:
 * \param EPD_type_index The defined EPD size
 * \param previous_image_ptr The pointer of memory that stores previous image
 * \param new_image_ptr The pointer of memory that stores new image
 */
void EPD_display_from_pointer(uint8_t EPD_type_index,uint8_t *previous_image_ptr,
	uint8_t *new_image_ptr) {
    2894:	b580      	push	{r7, lr}
    2896:	b086      	sub	sp, #24
    2898:	af00      	add	r7, sp, #0
    289a:	60b9      	str	r1, [r7, #8]
    289c:	607a      	str	r2, [r7, #4]
    289e:	1c3b      	adds	r3, r7, #0
    28a0:	330f      	adds	r3, #15
    28a2:	1c02      	adds	r2, r0, #0
    28a4:	701a      	strb	r2, [r3, #0]
	int8_t temperature=get_temperature();// Sense temperature
    28a6:	4b0f      	ldr	r3, [pc, #60]	; (28e4 <EPD_display_from_pointer+0x50>)
    28a8:	4798      	blx	r3
    28aa:	1c03      	adds	r3, r0, #0
    28ac:	1c1a      	adds	r2, r3, #0
    28ae:	1c3b      	adds	r3, r7, #0
    28b0:	3317      	adds	r3, #23
    28b2:	701a      	strb	r2, [r3, #0]
	
	/* Power on COG Driver */
	EPD_power_on(EPD_type_index,temperature);
    28b4:	1c3b      	adds	r3, r7, #0
    28b6:	330f      	adds	r3, #15
    28b8:	781a      	ldrb	r2, [r3, #0]
    28ba:	1c3b      	adds	r3, r7, #0
    28bc:	3317      	adds	r3, #23
    28be:	781b      	ldrb	r3, [r3, #0]
    28c0:	b25b      	sxtb	r3, r3
    28c2:	1c10      	adds	r0, r2, #0
    28c4:	1c19      	adds	r1, r3, #0
    28c6:	4b08      	ldr	r3, [pc, #32]	; (28e8 <EPD_display_from_pointer+0x54>)
    28c8:	4798      	blx	r3

	
	/* Initialize COG Driver */
	EPD_initialize_driver();
    28ca:	4b08      	ldr	r3, [pc, #32]	; (28ec <EPD_display_from_pointer+0x58>)
    28cc:	4798      	blx	r3
	
	/* Display image data on EPD from image array */
	EPD_display_from_array_prt(previous_image_ptr,new_image_ptr);
    28ce:	68ba      	ldr	r2, [r7, #8]
    28d0:	687b      	ldr	r3, [r7, #4]
    28d2:	1c10      	adds	r0, r2, #0
    28d4:	1c19      	adds	r1, r3, #0
    28d6:	4b06      	ldr	r3, [pc, #24]	; (28f0 <EPD_display_from_pointer+0x5c>)
    28d8:	4798      	blx	r3
	
	/* Power off COG Driver */
	EPD_power_off ();
    28da:	4b06      	ldr	r3, [pc, #24]	; (28f4 <EPD_display_from_pointer+0x60>)
    28dc:	4798      	blx	r3
}
    28de:	46bd      	mov	sp, r7
    28e0:	b006      	add	sp, #24
    28e2:	bd80      	pop	{r7, pc}
    28e4:	0000263d 	.word	0x0000263d
    28e8:	00000491 	.word	0x00000491
    28ec:	00000519 	.word	0x00000519
    28f0:	00001259 	.word	0x00001259
    28f4:	000016f9 	.word	0x000016f9

000028f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	b082      	sub	sp, #8
    28fc:	af00      	add	r7, sp, #0
    28fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	2200      	movs	r2, #0
    2904:	701a      	strb	r2, [r3, #0]
}
    2906:	46bd      	mov	sp, r7
    2908:	b002      	add	sp, #8
    290a:	bd80      	pop	{r7, pc}

0000290c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    290c:	b580      	push	{r7, lr}
    290e:	b082      	sub	sp, #8
    2910:	af00      	add	r7, sp, #0
    2912:	1c02      	adds	r2, r0, #0
    2914:	6039      	str	r1, [r7, #0]
    2916:	1dfb      	adds	r3, r7, #7
    2918:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    291a:	1dfb      	adds	r3, r7, #7
    291c:	781b      	ldrb	r3, [r3, #0]
    291e:	2b01      	cmp	r3, #1
    2920:	d00a      	beq.n	2938 <system_apb_clock_set_mask+0x2c>
    2922:	2b02      	cmp	r3, #2
    2924:	d00f      	beq.n	2946 <system_apb_clock_set_mask+0x3a>
    2926:	2b00      	cmp	r3, #0
    2928:	d114      	bne.n	2954 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    292a:	4b0e      	ldr	r3, [pc, #56]	; (2964 <system_apb_clock_set_mask+0x58>)
    292c:	4a0d      	ldr	r2, [pc, #52]	; (2964 <system_apb_clock_set_mask+0x58>)
    292e:	6991      	ldr	r1, [r2, #24]
    2930:	683a      	ldr	r2, [r7, #0]
    2932:	430a      	orrs	r2, r1
    2934:	619a      	str	r2, [r3, #24]
			break;
    2936:	e00f      	b.n	2958 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2938:	4b0a      	ldr	r3, [pc, #40]	; (2964 <system_apb_clock_set_mask+0x58>)
    293a:	4a0a      	ldr	r2, [pc, #40]	; (2964 <system_apb_clock_set_mask+0x58>)
    293c:	69d1      	ldr	r1, [r2, #28]
    293e:	683a      	ldr	r2, [r7, #0]
    2940:	430a      	orrs	r2, r1
    2942:	61da      	str	r2, [r3, #28]
			break;
    2944:	e008      	b.n	2958 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2946:	4b07      	ldr	r3, [pc, #28]	; (2964 <system_apb_clock_set_mask+0x58>)
    2948:	4a06      	ldr	r2, [pc, #24]	; (2964 <system_apb_clock_set_mask+0x58>)
    294a:	6a11      	ldr	r1, [r2, #32]
    294c:	683a      	ldr	r2, [r7, #0]
    294e:	430a      	orrs	r2, r1
    2950:	621a      	str	r2, [r3, #32]
			break;
    2952:	e001      	b.n	2958 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2954:	2317      	movs	r3, #23
    2956:	e000      	b.n	295a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2958:	2300      	movs	r3, #0
}
    295a:	1c18      	adds	r0, r3, #0
    295c:	46bd      	mov	sp, r7
    295e:	b002      	add	sp, #8
    2960:	bd80      	pop	{r7, pc}
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	40000400 	.word	0x40000400

00002968 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2968:	b580      	push	{r7, lr}
    296a:	b082      	sub	sp, #8
    296c:	af00      	add	r7, sp, #0
    296e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	2280      	movs	r2, #128	; 0x80
    2974:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	2200      	movs	r2, #0
    297a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	2201      	movs	r2, #1
    2980:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2982:	687b      	ldr	r3, [r7, #4]
    2984:	2200      	movs	r2, #0
    2986:	70da      	strb	r2, [r3, #3]
}
    2988:	46bd      	mov	sp, r7
    298a:	b002      	add	sp, #8
    298c:	bd80      	pop	{r7, pc}
    298e:	46c0      	nop			; (mov r8, r8)

00002990 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    2990:	b580      	push	{r7, lr}
    2992:	b082      	sub	sp, #8
    2994:	af00      	add	r7, sp, #0
    2996:	1c02      	adds	r2, r0, #0
    2998:	1dfb      	adds	r3, r7, #7
    299a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    299c:	1dfb      	adds	r3, r7, #7
    299e:	781b      	ldrb	r3, [r3, #0]
    29a0:	2b00      	cmp	r3, #0
    29a2:	d002      	beq.n	29aa <system_voltage_reference_enable+0x1a>
    29a4:	2b01      	cmp	r3, #1
    29a6:	d007      	beq.n	29b8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    29a8:	e00d      	b.n	29c6 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    29aa:	4b08      	ldr	r3, [pc, #32]	; (29cc <system_voltage_reference_enable+0x3c>)
    29ac:	4a07      	ldr	r2, [pc, #28]	; (29cc <system_voltage_reference_enable+0x3c>)
    29ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
    29b0:	2102      	movs	r1, #2
    29b2:	430a      	orrs	r2, r1
    29b4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    29b6:	e006      	b.n	29c6 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    29b8:	4b04      	ldr	r3, [pc, #16]	; (29cc <system_voltage_reference_enable+0x3c>)
    29ba:	4a04      	ldr	r2, [pc, #16]	; (29cc <system_voltage_reference_enable+0x3c>)
    29bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
    29be:	2104      	movs	r1, #4
    29c0:	430a      	orrs	r2, r1
    29c2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    29c4:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
    29c6:	46bd      	mov	sp, r7
    29c8:	b002      	add	sp, #8
    29ca:	bd80      	pop	{r7, pc}
    29cc:	40000800 	.word	0x40000800

000029d0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	b084      	sub	sp, #16
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	681b      	ldr	r3, [r3, #0]
    29dc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    29de:	68fb      	ldr	r3, [r7, #12]
    29e0:	7e5b      	ldrb	r3, [r3, #25]
    29e2:	b2db      	uxtb	r3, r3
    29e4:	b2db      	uxtb	r3, r3
    29e6:	b25b      	sxtb	r3, r3
    29e8:	2b00      	cmp	r3, #0
    29ea:	da01      	bge.n	29f0 <adc_is_syncing+0x20>
		return true;
    29ec:	2301      	movs	r3, #1
    29ee:	e000      	b.n	29f2 <adc_is_syncing+0x22>
	}

	return false;
    29f0:	2300      	movs	r3, #0
}
    29f2:	1c18      	adds	r0, r3, #0
    29f4:	46bd      	mov	sp, r7
    29f6:	b004      	add	sp, #16
    29f8:	bd80      	pop	{r7, pc}
    29fa:	46c0      	nop			; (mov r8, r8)

000029fc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    29fc:	b580      	push	{r7, lr}
    29fe:	b082      	sub	sp, #8
    2a00:	af00      	add	r7, sp, #0
    2a02:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2a04:	687b      	ldr	r3, [r7, #4]
    2a06:	2200      	movs	r2, #0
    2a08:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2a0a:	687b      	ldr	r3, [r7, #4]
    2a0c:	2200      	movs	r2, #0
    2a0e:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    2a10:	687b      	ldr	r3, [r7, #4]
    2a12:	2200      	movs	r2, #0
    2a14:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2a16:	687b      	ldr	r3, [r7, #4]
    2a18:	2200      	movs	r2, #0
    2a1a:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	2200      	movs	r2, #0
    2a20:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    2a22:	687b      	ldr	r3, [r7, #4]
    2a24:	2200      	movs	r2, #0
    2a26:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	2200      	movs	r2, #0
    2a2c:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	2200      	movs	r2, #0
    2a32:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	2200      	movs	r2, #0
    2a38:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	22c0      	movs	r2, #192	; 0xc0
    2a3e:	0152      	lsls	r2, r2, #5
    2a40:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	2200      	movs	r2, #0
    2a46:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	2200      	movs	r2, #0
    2a4c:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    2a4e:	687b      	ldr	r3, [r7, #4]
    2a50:	2200      	movs	r2, #0
    2a52:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    2a54:	687b      	ldr	r3, [r7, #4]
    2a56:	2200      	movs	r2, #0
    2a58:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	2200      	movs	r2, #0
    2a5e:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2a60:	687a      	ldr	r2, [r7, #4]
    2a62:	232a      	movs	r3, #42	; 0x2a
    2a64:	2100      	movs	r1, #0
    2a66:	54d1      	strb	r1, [r2, r3]
	config->run_in_standby                = false;
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	2200      	movs	r2, #0
    2a6c:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	2200      	movs	r2, #0
    2a72:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    2a74:	687a      	ldr	r2, [r7, #4]
    2a76:	2324      	movs	r3, #36	; 0x24
    2a78:	2100      	movs	r1, #0
    2a7a:	54d1      	strb	r1, [r2, r3]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	2200      	movs	r2, #0
    2a80:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2a82:	687b      	ldr	r3, [r7, #4]
    2a84:	2200      	movs	r2, #0
    2a86:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	2200      	movs	r2, #0
    2a8c:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    2a8e:	687a      	ldr	r2, [r7, #4]
    2a90:	232b      	movs	r3, #43	; 0x2b
    2a92:	2100      	movs	r1, #0
    2a94:	54d1      	strb	r1, [r2, r3]
	config->pin_scan.inputs_to_scan       = 0;
    2a96:	687a      	ldr	r2, [r7, #4]
    2a98:	232c      	movs	r3, #44	; 0x2c
    2a9a:	2100      	movs	r1, #0
    2a9c:	54d1      	strb	r1, [r2, r3]
}
    2a9e:	46bd      	mov	sp, r7
    2aa0:	b002      	add	sp, #8
    2aa2:	bd80      	pop	{r7, pc}

00002aa4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b098      	sub	sp, #96	; 0x60
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    2aac:	1c3a      	adds	r2, r7, #0
    2aae:	320c      	adds	r2, #12
    2ab0:	4b15      	ldr	r3, [pc, #84]	; (2b08 <_adc_configure_ain_pin+0x64>)
    2ab2:	1c11      	adds	r1, r2, #0
    2ab4:	1c1a      	adds	r2, r3, #0
    2ab6:	2350      	movs	r3, #80	; 0x50
    2ab8:	1c08      	adds	r0, r1, #0
    2aba:	1c11      	adds	r1, r2, #0
    2abc:	1c1a      	adds	r2, r3, #0
    2abe:	4b13      	ldr	r3, [pc, #76]	; (2b0c <_adc_configure_ain_pin+0x68>)
    2ac0:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    2ac2:	4b13      	ldr	r3, [pc, #76]	; (2b10 <_adc_configure_ain_pin+0x6c>)
    2ac4:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	2b13      	cmp	r3, #19
    2aca:	d81a      	bhi.n	2b02 <_adc_configure_ain_pin+0x5e>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2acc:	1c3b      	adds	r3, r7, #0
    2ace:	330c      	adds	r3, #12
    2ad0:	687a      	ldr	r2, [r7, #4]
    2ad2:	0092      	lsls	r2, r2, #2
    2ad4:	58d3      	ldr	r3, [r2, r3]
    2ad6:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    2ad8:	1c3b      	adds	r3, r7, #0
    2ada:	3308      	adds	r3, #8
    2adc:	1c18      	adds	r0, r3, #0
    2ade:	4b0d      	ldr	r3, [pc, #52]	; (2b14 <_adc_configure_ain_pin+0x70>)
    2ae0:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2ae2:	1c3b      	adds	r3, r7, #0
    2ae4:	3308      	adds	r3, #8
    2ae6:	2200      	movs	r2, #0
    2ae8:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    2aea:	1c3b      	adds	r3, r7, #0
    2aec:	3308      	adds	r3, #8
    2aee:	2201      	movs	r2, #1
    2af0:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    2af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2af4:	b2da      	uxtb	r2, r3
    2af6:	1c3b      	adds	r3, r7, #0
    2af8:	3308      	adds	r3, #8
    2afa:	1c10      	adds	r0, r2, #0
    2afc:	1c19      	adds	r1, r3, #0
    2afe:	4b06      	ldr	r3, [pc, #24]	; (2b18 <_adc_configure_ain_pin+0x74>)
    2b00:	4798      	blx	r3
	}
}
    2b02:	46bd      	mov	sp, r7
    2b04:	b018      	add	sp, #96	; 0x60
    2b06:	bd80      	pop	{r7, pc}
    2b08:	00006358 	.word	0x00006358
    2b0c:	0000621d 	.word	0x0000621d
    2b10:	0000ffff 	.word	0x0000ffff
    2b14:	00002969 	.word	0x00002969
    2b18:	000056a5 	.word	0x000056a5

00002b1c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    2b1c:	b5b0      	push	{r4, r5, r7, lr}
    2b1e:	b088      	sub	sp, #32
    2b20:	af00      	add	r7, sp, #0
    2b22:	6078      	str	r0, [r7, #4]
    2b24:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    2b26:	1c3b      	adds	r3, r7, #0
    2b28:	331f      	adds	r3, #31
    2b2a:	2200      	movs	r2, #0
    2b2c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    2b2e:	2310      	movs	r3, #16
    2b30:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2b32:	1c3b      	adds	r3, r7, #0
    2b34:	3317      	adds	r3, #23
    2b36:	2200      	movs	r2, #0
    2b38:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    2b3a:	687b      	ldr	r3, [r7, #4]
    2b3c:	681b      	ldr	r3, [r3, #0]
    2b3e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2b40:	1c3b      	adds	r3, r7, #0
    2b42:	330c      	adds	r3, #12
    2b44:	1c18      	adds	r0, r3, #0
    2b46:	4bc1      	ldr	r3, [pc, #772]	; (2e4c <_adc_set_config+0x330>)
    2b48:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    2b4a:	683b      	ldr	r3, [r7, #0]
    2b4c:	781a      	ldrb	r2, [r3, #0]
    2b4e:	1c3b      	adds	r3, r7, #0
    2b50:	330c      	adds	r3, #12
    2b52:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2b54:	1c3b      	adds	r3, r7, #0
    2b56:	330c      	adds	r3, #12
    2b58:	201e      	movs	r0, #30
    2b5a:	1c19      	adds	r1, r3, #0
    2b5c:	4bbc      	ldr	r3, [pc, #752]	; (2e50 <_adc_set_config+0x334>)
    2b5e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2b60:	201e      	movs	r0, #30
    2b62:	4bbc      	ldr	r3, [pc, #752]	; (2e54 <_adc_set_config+0x338>)
    2b64:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    2b66:	683a      	ldr	r2, [r7, #0]
    2b68:	232c      	movs	r3, #44	; 0x2c
    2b6a:	5cd3      	ldrb	r3, [r2, r3]
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d040      	beq.n	2bf2 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2b70:	1c3b      	adds	r3, r7, #0
    2b72:	3316      	adds	r3, #22
    2b74:	6839      	ldr	r1, [r7, #0]
    2b76:	222b      	movs	r2, #43	; 0x2b
    2b78:	5c8a      	ldrb	r2, [r1, r2]
    2b7a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    2b7c:	683b      	ldr	r3, [r7, #0]
    2b7e:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    2b80:	1c3b      	adds	r3, r7, #0
    2b82:	3315      	adds	r3, #21
    2b84:	1c3a      	adds	r2, r7, #0
    2b86:	3216      	adds	r2, #22
    2b88:	7812      	ldrb	r2, [r2, #0]
    2b8a:	188a      	adds	r2, r1, r2
    2b8c:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    2b8e:	683a      	ldr	r2, [r7, #0]
    2b90:	232c      	movs	r3, #44	; 0x2c
    2b92:	5cd1      	ldrb	r1, [r2, r3]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    2b94:	1c3b      	adds	r3, r7, #0
    2b96:	330f      	adds	r3, #15
    2b98:	1c3a      	adds	r2, r7, #0
    2b9a:	3215      	adds	r2, #21
    2b9c:	7812      	ldrb	r2, [r2, #0]
    2b9e:	188a      	adds	r2, r1, r2
    2ba0:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    2ba2:	e018      	b.n	2bd6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    2ba4:	1c3b      	adds	r3, r7, #0
    2ba6:	3316      	adds	r3, #22
    2ba8:	781a      	ldrb	r2, [r3, #0]
    2baa:	230f      	movs	r3, #15
    2bac:	401a      	ands	r2, r3
    2bae:	683b      	ldr	r3, [r7, #0]
    2bb0:	7b1b      	ldrb	r3, [r3, #12]
    2bb2:	18d3      	adds	r3, r2, r3
    2bb4:	1c18      	adds	r0, r3, #0
    2bb6:	4ba8      	ldr	r3, [pc, #672]	; (2e58 <_adc_set_config+0x33c>)
    2bb8:	4798      	blx	r3
			start_pin++;
    2bba:	1c3b      	adds	r3, r7, #0
    2bbc:	3315      	adds	r3, #21
    2bbe:	781a      	ldrb	r2, [r3, #0]
    2bc0:	1c3b      	adds	r3, r7, #0
    2bc2:	3315      	adds	r3, #21
    2bc4:	3201      	adds	r2, #1
    2bc6:	701a      	strb	r2, [r3, #0]
			offset++;
    2bc8:	1c3b      	adds	r3, r7, #0
    2bca:	3316      	adds	r3, #22
    2bcc:	781a      	ldrb	r2, [r3, #0]
    2bce:	1c3b      	adds	r3, r7, #0
    2bd0:	3316      	adds	r3, #22
    2bd2:	3201      	adds	r2, #1
    2bd4:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    2bd6:	1c3a      	adds	r2, r7, #0
    2bd8:	3215      	adds	r2, #21
    2bda:	1c3b      	adds	r3, r7, #0
    2bdc:	330f      	adds	r3, #15
    2bde:	7812      	ldrb	r2, [r2, #0]
    2be0:	781b      	ldrb	r3, [r3, #0]
    2be2:	429a      	cmp	r2, r3
    2be4:	d3de      	bcc.n	2ba4 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    2be6:	683b      	ldr	r3, [r7, #0]
    2be8:	89db      	ldrh	r3, [r3, #14]
    2bea:	1c18      	adds	r0, r3, #0
    2bec:	4b9a      	ldr	r3, [pc, #616]	; (2e58 <_adc_set_config+0x33c>)
    2bee:	4798      	blx	r3
    2bf0:	e009      	b.n	2c06 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    2bf2:	683b      	ldr	r3, [r7, #0]
    2bf4:	7b1b      	ldrb	r3, [r3, #12]
    2bf6:	1c18      	adds	r0, r3, #0
    2bf8:	4b97      	ldr	r3, [pc, #604]	; (2e58 <_adc_set_config+0x33c>)
    2bfa:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    2bfc:	683b      	ldr	r3, [r7, #0]
    2bfe:	89db      	ldrh	r3, [r3, #14]
    2c00:	1c18      	adds	r0, r3, #0
    2c02:	4b95      	ldr	r3, [pc, #596]	; (2e58 <_adc_set_config+0x33c>)
    2c04:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2c06:	683b      	ldr	r3, [r7, #0]
    2c08:	7d5b      	ldrb	r3, [r3, #21]
    2c0a:	009b      	lsls	r3, r3, #2
    2c0c:	b2da      	uxtb	r2, r3
    2c0e:	693b      	ldr	r3, [r7, #16]
    2c10:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2c12:	683b      	ldr	r3, [r7, #0]
    2c14:	7d9b      	ldrb	r3, [r3, #22]
    2c16:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    2c18:	b2da      	uxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
    2c1a:	683b      	ldr	r3, [r7, #0]
    2c1c:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    2c1e:	b2db      	uxtb	r3, r3
    2c20:	4313      	orrs	r3, r2
    2c22:	b2db      	uxtb	r3, r3
    2c24:	b2da      	uxtb	r2, r3
    2c26:	693b      	ldr	r3, [r7, #16]
    2c28:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    2c2a:	683b      	ldr	r3, [r7, #0]
    2c2c:	791b      	ldrb	r3, [r3, #4]
    2c2e:	2b34      	cmp	r3, #52	; 0x34
    2c30:	d846      	bhi.n	2cc0 <_adc_set_config+0x1a4>
    2c32:	009a      	lsls	r2, r3, #2
    2c34:	4b89      	ldr	r3, [pc, #548]	; (2e5c <_adc_set_config+0x340>)
    2c36:	18d3      	adds	r3, r2, r3
    2c38:	681b      	ldr	r3, [r3, #0]
    2c3a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    2c3c:	1c3b      	adds	r3, r7, #0
    2c3e:	331f      	adds	r3, #31
    2c40:	683a      	ldr	r2, [r7, #0]
    2c42:	7c52      	ldrb	r2, [r2, #17]
    2c44:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    2c46:	1c3b      	adds	r3, r7, #0
    2c48:	3317      	adds	r3, #23
    2c4a:	683a      	ldr	r2, [r7, #0]
    2c4c:	7c12      	ldrb	r2, [r2, #16]
    2c4e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c50:	2310      	movs	r3, #16
    2c52:	61bb      	str	r3, [r7, #24]
		break;
    2c54:	e036      	b.n	2cc4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2c56:	1c3b      	adds	r3, r7, #0
    2c58:	331f      	adds	r3, #31
    2c5a:	2201      	movs	r2, #1
    2c5c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2c5e:	1c3b      	adds	r3, r7, #0
    2c60:	3317      	adds	r3, #23
    2c62:	2202      	movs	r2, #2
    2c64:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c66:	2310      	movs	r3, #16
    2c68:	61bb      	str	r3, [r7, #24]
		break;
    2c6a:	e02b      	b.n	2cc4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    2c6c:	1c3b      	adds	r3, r7, #0
    2c6e:	331f      	adds	r3, #31
    2c70:	2202      	movs	r2, #2
    2c72:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2c74:	1c3b      	adds	r3, r7, #0
    2c76:	3317      	adds	r3, #23
    2c78:	2204      	movs	r2, #4
    2c7a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c7c:	2310      	movs	r3, #16
    2c7e:	61bb      	str	r3, [r7, #24]
		break;
    2c80:	e020      	b.n	2cc4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    2c82:	1c3b      	adds	r3, r7, #0
    2c84:	331f      	adds	r3, #31
    2c86:	2201      	movs	r2, #1
    2c88:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2c8a:	1c3b      	adds	r3, r7, #0
    2c8c:	3317      	adds	r3, #23
    2c8e:	2206      	movs	r2, #6
    2c90:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2c92:	2310      	movs	r3, #16
    2c94:	61bb      	str	r3, [r7, #24]
		break;
    2c96:	e015      	b.n	2cc4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2c98:	1c3b      	adds	r3, r7, #0
    2c9a:	331f      	adds	r3, #31
    2c9c:	2200      	movs	r2, #0
    2c9e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2ca0:	1c3b      	adds	r3, r7, #0
    2ca2:	3317      	adds	r3, #23
    2ca4:	2208      	movs	r2, #8
    2ca6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    2ca8:	2310      	movs	r3, #16
    2caa:	61bb      	str	r3, [r7, #24]
		break;
    2cac:	e00a      	b.n	2cc4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    2cae:	2330      	movs	r3, #48	; 0x30
    2cb0:	61bb      	str	r3, [r7, #24]
		break;
    2cb2:	e007      	b.n	2cc4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    2cb4:	2320      	movs	r3, #32
    2cb6:	61bb      	str	r3, [r7, #24]
		break;
    2cb8:	e004      	b.n	2cc4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    2cba:	2300      	movs	r3, #0
    2cbc:	61bb      	str	r3, [r7, #24]
		break;
    2cbe:	e001      	b.n	2cc4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    2cc0:	2317      	movs	r3, #23
    2cc2:	e1a7      	b.n	3014 <_adc_set_config+0x4f8>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2cc4:	1c3b      	adds	r3, r7, #0
    2cc6:	331f      	adds	r3, #31
    2cc8:	781b      	ldrb	r3, [r3, #0]
    2cca:	011b      	lsls	r3, r3, #4
    2ccc:	b2da      	uxtb	r2, r3
    2cce:	2370      	movs	r3, #112	; 0x70
    2cd0:	4013      	ands	r3, r2
    2cd2:	b2da      	uxtb	r2, r3
    2cd4:	1c3b      	adds	r3, r7, #0
    2cd6:	3317      	adds	r3, #23
    2cd8:	781b      	ldrb	r3, [r3, #0]
    2cda:	4313      	orrs	r3, r2
    2cdc:	b2da      	uxtb	r2, r3
    2cde:	693b      	ldr	r3, [r7, #16]
    2ce0:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    2ce2:	683b      	ldr	r3, [r7, #0]
    2ce4:	7ddb      	ldrb	r3, [r3, #23]
    2ce6:	2b3f      	cmp	r3, #63	; 0x3f
    2ce8:	d901      	bls.n	2cee <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    2cea:	2317      	movs	r3, #23
    2cec:	e192      	b.n	3014 <_adc_set_config+0x4f8>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    2cee:	683b      	ldr	r3, [r7, #0]
    2cf0:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    2cf2:	693b      	ldr	r3, [r7, #16]
    2cf4:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	1c18      	adds	r0, r3, #0
    2cfc:	4b58      	ldr	r3, [pc, #352]	; (2e60 <_adc_set_config+0x344>)
    2cfe:	4798      	blx	r3
    2d00:	1c03      	adds	r3, r0, #0
    2d02:	2b00      	cmp	r3, #0
    2d04:	d1f8      	bne.n	2cf8 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    2d06:	683b      	ldr	r3, [r7, #0]
    2d08:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    2d0a:	69bb      	ldr	r3, [r7, #24]
    2d0c:	b29b      	uxth	r3, r3
    2d0e:	4313      	orrs	r3, r2
    2d10:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2d12:	6839      	ldr	r1, [r7, #0]
    2d14:	2324      	movs	r3, #36	; 0x24
    2d16:	5ccb      	ldrb	r3, [r1, r3]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    2d18:	00db      	lsls	r3, r3, #3
    2d1a:	b29b      	uxth	r3, r3
    2d1c:	4313      	orrs	r3, r2
    2d1e:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2d20:	683b      	ldr	r3, [r7, #0]
    2d22:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    2d24:	009b      	lsls	r3, r3, #2
    2d26:	b29b      	uxth	r3, r3
    2d28:	4313      	orrs	r3, r2
    2d2a:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2d2c:	683b      	ldr	r3, [r7, #0]
    2d2e:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    2d30:	18db      	adds	r3, r3, r3
    2d32:	b29b      	uxth	r3, r3
    2d34:	4313      	orrs	r3, r2
    2d36:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    2d38:	683b      	ldr	r3, [r7, #0]
    2d3a:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    2d3c:	4313      	orrs	r3, r2
    2d3e:	b29a      	uxth	r2, r3
    2d40:	693b      	ldr	r3, [r7, #16]
    2d42:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    2d44:	683b      	ldr	r3, [r7, #0]
    2d46:	7e1b      	ldrb	r3, [r3, #24]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d100      	bne.n	2d4e <_adc_set_config+0x232>
    2d4c:	e0bd      	b.n	2eca <_adc_set_config+0x3ae>
		switch (resolution) {
    2d4e:	69bb      	ldr	r3, [r7, #24]
    2d50:	2b10      	cmp	r3, #16
    2d52:	d100      	bne.n	2d56 <_adc_set_config+0x23a>
    2d54:	e092      	b.n	2e7c <_adc_set_config+0x360>
    2d56:	d802      	bhi.n	2d5e <_adc_set_config+0x242>
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d04f      	beq.n	2dfc <_adc_set_config+0x2e0>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    2d5c:	e0b5      	b.n	2eca <_adc_set_config+0x3ae>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
    2d5e:	2b20      	cmp	r3, #32
    2d60:	d025      	beq.n	2dae <_adc_set_config+0x292>
    2d62:	2b30      	cmp	r3, #48	; 0x30
    2d64:	d000      	beq.n	2d68 <_adc_set_config+0x24c>
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    2d66:	e0b0      	b.n	2eca <_adc_set_config+0x3ae>

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    2d68:	683b      	ldr	r3, [r7, #0]
    2d6a:	7cdb      	ldrb	r3, [r3, #19]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d013      	beq.n	2d98 <_adc_set_config+0x27c>
					(config->window.window_lower_value > 127 ||
    2d70:	683b      	ldr	r3, [r7, #0]
    2d72:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    2d74:	2b7f      	cmp	r3, #127	; 0x7f
    2d76:	dc0d      	bgt.n	2d94 <_adc_set_config+0x278>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    2d78:	683b      	ldr	r3, [r7, #0]
    2d7a:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
    2d7c:	1c1a      	adds	r2, r3, #0
    2d7e:	3280      	adds	r2, #128	; 0x80
    2d80:	db08      	blt.n	2d94 <_adc_set_config+0x278>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    2d82:	683b      	ldr	r3, [r7, #0]
    2d84:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    2d86:	2b7f      	cmp	r3, #127	; 0x7f
    2d88:	dc04      	bgt.n	2d94 <_adc_set_config+0x278>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
    2d8a:	683b      	ldr	r3, [r7, #0]
    2d8c:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    2d8e:	1c1a      	adds	r2, r3, #0
    2d90:	3280      	adds	r2, #128	; 0x80
    2d92:	da01      	bge.n	2d98 <_adc_set_config+0x27c>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2d94:	2317      	movs	r3, #23
    2d96:	e13d      	b.n	3014 <_adc_set_config+0x4f8>
			} else if (config->window.window_lower_value > 255 ||
    2d98:	683b      	ldr	r3, [r7, #0]
    2d9a:	69db      	ldr	r3, [r3, #28]
    2d9c:	2bff      	cmp	r3, #255	; 0xff
    2d9e:	dc03      	bgt.n	2da8 <_adc_set_config+0x28c>
					config->window.window_upper_value > 255){
    2da0:	683b      	ldr	r3, [r7, #0]
    2da2:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    2da4:	2bff      	cmp	r3, #255	; 0xff
    2da6:	dd01      	ble.n	2dac <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2da8:	2317      	movs	r3, #23
    2daa:	e133      	b.n	3014 <_adc_set_config+0x4f8>
			}
			break;
    2dac:	e08d      	b.n	2eca <_adc_set_config+0x3ae>
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2dae:	683b      	ldr	r3, [r7, #0]
    2db0:	7cdb      	ldrb	r3, [r3, #19]
    2db2:	2b00      	cmp	r3, #0
    2db4:	d015      	beq.n	2de2 <_adc_set_config+0x2c6>
					(config->window.window_lower_value > 511 ||
    2db6:	683b      	ldr	r3, [r7, #0]
    2db8:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    2dba:	4b2a      	ldr	r3, [pc, #168]	; (2e64 <_adc_set_config+0x348>)
    2dbc:	429a      	cmp	r2, r3
    2dbe:	dc0e      	bgt.n	2dde <_adc_set_config+0x2c2>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    2dc0:	683b      	ldr	r3, [r7, #0]
    2dc2:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
    2dc4:	4b28      	ldr	r3, [pc, #160]	; (2e68 <_adc_set_config+0x34c>)
    2dc6:	429a      	cmp	r2, r3
    2dc8:	db09      	blt.n	2dde <_adc_set_config+0x2c2>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    2dca:	683b      	ldr	r3, [r7, #0]
    2dcc:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    2dce:	4b25      	ldr	r3, [pc, #148]	; (2e64 <_adc_set_config+0x348>)
    2dd0:	429a      	cmp	r2, r3
    2dd2:	dc04      	bgt.n	2dde <_adc_set_config+0x2c2>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
    2dd4:	683b      	ldr	r3, [r7, #0]
    2dd6:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    2dd8:	4b23      	ldr	r3, [pc, #140]	; (2e68 <_adc_set_config+0x34c>)
    2dda:	429a      	cmp	r2, r3
    2ddc:	da01      	bge.n	2de2 <_adc_set_config+0x2c6>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2dde:	2317      	movs	r3, #23
    2de0:	e118      	b.n	3014 <_adc_set_config+0x4f8>
			} else if (config->window.window_lower_value > 1023 ||
    2de2:	683b      	ldr	r3, [r7, #0]
    2de4:	69da      	ldr	r2, [r3, #28]
    2de6:	4b21      	ldr	r3, [pc, #132]	; (2e6c <_adc_set_config+0x350>)
    2de8:	429a      	cmp	r2, r3
    2dea:	dc04      	bgt.n	2df6 <_adc_set_config+0x2da>
					config->window.window_upper_value > 1023){
    2dec:	683b      	ldr	r3, [r7, #0]
    2dee:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    2df0:	4b1e      	ldr	r3, [pc, #120]	; (2e6c <_adc_set_config+0x350>)
    2df2:	429a      	cmp	r2, r3
    2df4:	dd01      	ble.n	2dfa <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2df6:	2317      	movs	r3, #23
    2df8:	e10c      	b.n	3014 <_adc_set_config+0x4f8>
			}
			break;
    2dfa:	e066      	b.n	2eca <_adc_set_config+0x3ae>
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2dfc:	683b      	ldr	r3, [r7, #0]
    2dfe:	7cdb      	ldrb	r3, [r3, #19]
    2e00:	2b00      	cmp	r3, #0
    2e02:	d015      	beq.n	2e30 <_adc_set_config+0x314>
					(config->window.window_lower_value > 2047 ||
    2e04:	683b      	ldr	r3, [r7, #0]
    2e06:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    2e08:	4b19      	ldr	r3, [pc, #100]	; (2e70 <_adc_set_config+0x354>)
    2e0a:	429a      	cmp	r2, r3
    2e0c:	dc0e      	bgt.n	2e2c <_adc_set_config+0x310>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    2e0e:	683b      	ldr	r3, [r7, #0]
    2e10:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
    2e12:	4b18      	ldr	r3, [pc, #96]	; (2e74 <_adc_set_config+0x358>)
    2e14:	429a      	cmp	r2, r3
    2e16:	db09      	blt.n	2e2c <_adc_set_config+0x310>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    2e18:	683b      	ldr	r3, [r7, #0]
    2e1a:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    2e1c:	4b14      	ldr	r3, [pc, #80]	; (2e70 <_adc_set_config+0x354>)
    2e1e:	429a      	cmp	r2, r3
    2e20:	dc04      	bgt.n	2e2c <_adc_set_config+0x310>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
    2e22:	683b      	ldr	r3, [r7, #0]
    2e24:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    2e26:	4b13      	ldr	r3, [pc, #76]	; (2e74 <_adc_set_config+0x358>)
    2e28:	429a      	cmp	r2, r3
    2e2a:	da01      	bge.n	2e30 <_adc_set_config+0x314>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e2c:	2317      	movs	r3, #23
    2e2e:	e0f1      	b.n	3014 <_adc_set_config+0x4f8>
			} else if (config->window.window_lower_value > 4095 ||
    2e30:	683b      	ldr	r3, [r7, #0]
    2e32:	69da      	ldr	r2, [r3, #28]
    2e34:	4b10      	ldr	r3, [pc, #64]	; (2e78 <_adc_set_config+0x35c>)
    2e36:	429a      	cmp	r2, r3
    2e38:	dc04      	bgt.n	2e44 <_adc_set_config+0x328>
					config->window.window_upper_value > 4095){
    2e3a:	683b      	ldr	r3, [r7, #0]
    2e3c:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    2e3e:	4b0e      	ldr	r3, [pc, #56]	; (2e78 <_adc_set_config+0x35c>)
    2e40:	429a      	cmp	r2, r3
    2e42:	dd01      	ble.n	2e48 <_adc_set_config+0x32c>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2e44:	2317      	movs	r3, #23
    2e46:	e0e5      	b.n	3014 <_adc_set_config+0x4f8>
			}
			break;
    2e48:	e03f      	b.n	2eca <_adc_set_config+0x3ae>
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	000028f9 	.word	0x000028f9
    2e50:	000053c1 	.word	0x000053c1
    2e54:	00005401 	.word	0x00005401
    2e58:	00002aa5 	.word	0x00002aa5
    2e5c:	000063a8 	.word	0x000063a8
    2e60:	000029d1 	.word	0x000029d1
    2e64:	000001ff 	.word	0x000001ff
    2e68:	fffffe00 	.word	0xfffffe00
    2e6c:	000003ff 	.word	0x000003ff
    2e70:	000007ff 	.word	0x000007ff
    2e74:	fffff800 	.word	0xfffff800
    2e78:	00000fff 	.word	0x00000fff
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    2e7c:	683b      	ldr	r3, [r7, #0]
    2e7e:	7cdb      	ldrb	r3, [r3, #19]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d015      	beq.n	2eb0 <_adc_set_config+0x394>
					(config->window.window_lower_value > 32767 ||
    2e84:	683b      	ldr	r3, [r7, #0]
    2e86:	69da      	ldr	r2, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    2e88:	4b64      	ldr	r3, [pc, #400]	; (301c <_adc_set_config+0x500>)
    2e8a:	429a      	cmp	r2, r3
    2e8c:	dc0e      	bgt.n	2eac <_adc_set_config+0x390>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    2e8e:	683b      	ldr	r3, [r7, #0]
    2e90:	69da      	ldr	r2, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
    2e92:	4b63      	ldr	r3, [pc, #396]	; (3020 <_adc_set_config+0x504>)
    2e94:	429a      	cmp	r2, r3
    2e96:	db09      	blt.n	2eac <_adc_set_config+0x390>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    2e98:	683b      	ldr	r3, [r7, #0]
    2e9a:	6a1a      	ldr	r2, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    2e9c:	4b5f      	ldr	r3, [pc, #380]	; (301c <_adc_set_config+0x500>)
    2e9e:	429a      	cmp	r2, r3
    2ea0:	dc04      	bgt.n	2eac <_adc_set_config+0x390>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
    2ea2:	683b      	ldr	r3, [r7, #0]
    2ea4:	6a1a      	ldr	r2, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    2ea6:	4b5e      	ldr	r3, [pc, #376]	; (3020 <_adc_set_config+0x504>)
    2ea8:	429a      	cmp	r2, r3
    2eaa:	da01      	bge.n	2eb0 <_adc_set_config+0x394>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2eac:	2317      	movs	r3, #23
    2eae:	e0b1      	b.n	3014 <_adc_set_config+0x4f8>
			} else if (config->window.window_lower_value > 65535 ||
    2eb0:	683b      	ldr	r3, [r7, #0]
    2eb2:	69da      	ldr	r2, [r3, #28]
    2eb4:	4b5b      	ldr	r3, [pc, #364]	; (3024 <_adc_set_config+0x508>)
    2eb6:	429a      	cmp	r2, r3
    2eb8:	dc04      	bgt.n	2ec4 <_adc_set_config+0x3a8>
					config->window.window_upper_value > 65535){
    2eba:	683b      	ldr	r3, [r7, #0]
    2ebc:	6a1a      	ldr	r2, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    2ebe:	4b59      	ldr	r3, [pc, #356]	; (3024 <_adc_set_config+0x508>)
    2ec0:	429a      	cmp	r2, r3
    2ec2:	dd01      	ble.n	2ec8 <_adc_set_config+0x3ac>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    2ec4:	2317      	movs	r3, #23
    2ec6:	e0a5      	b.n	3014 <_adc_set_config+0x4f8>
			}
			break;
    2ec8:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	687b      	ldr	r3, [r7, #4]
    2ece:	1c18      	adds	r0, r3, #0
    2ed0:	4b55      	ldr	r3, [pc, #340]	; (3028 <_adc_set_config+0x50c>)
    2ed2:	4798      	blx	r3
    2ed4:	1c03      	adds	r3, r0, #0
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d1f8      	bne.n	2ecc <_adc_set_config+0x3b0>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    2eda:	683b      	ldr	r3, [r7, #0]
    2edc:	7e1a      	ldrb	r2, [r3, #24]
    2ede:	693b      	ldr	r3, [r7, #16]
    2ee0:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	687b      	ldr	r3, [r7, #4]
    2ee6:	1c18      	adds	r0, r3, #0
    2ee8:	4b4f      	ldr	r3, [pc, #316]	; (3028 <_adc_set_config+0x50c>)
    2eea:	4798      	blx	r3
    2eec:	1c03      	adds	r3, r0, #0
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d1f8      	bne.n	2ee4 <_adc_set_config+0x3c8>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    2ef2:	683b      	ldr	r3, [r7, #0]
    2ef4:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    2ef6:	b29a      	uxth	r2, r3
    2ef8:	693b      	ldr	r3, [r7, #16]
    2efa:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    2efc:	46c0      	nop			; (mov r8, r8)
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	1c18      	adds	r0, r3, #0
    2f02:	4b49      	ldr	r3, [pc, #292]	; (3028 <_adc_set_config+0x50c>)
    2f04:	4798      	blx	r3
    2f06:	1c03      	adds	r3, r0, #0
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d1f8      	bne.n	2efe <_adc_set_config+0x3e2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2f0c:	683b      	ldr	r3, [r7, #0]
    2f0e:	6a1b      	ldr	r3, [r3, #32]
    2f10:	b29a      	uxth	r2, r3
    2f12:	693b      	ldr	r3, [r7, #16]
    2f14:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2f16:	1c3b      	adds	r3, r7, #0
    2f18:	3314      	adds	r3, #20
    2f1a:	6839      	ldr	r1, [r7, #0]
    2f1c:	222c      	movs	r2, #44	; 0x2c
    2f1e:	5c8a      	ldrb	r2, [r1, r2]
    2f20:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    2f22:	1c3b      	adds	r3, r7, #0
    2f24:	3314      	adds	r3, #20
    2f26:	781b      	ldrb	r3, [r3, #0]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d006      	beq.n	2f3a <_adc_set_config+0x41e>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    2f2c:	1c3b      	adds	r3, r7, #0
    2f2e:	3314      	adds	r3, #20
    2f30:	781a      	ldrb	r2, [r3, #0]
    2f32:	1c3b      	adds	r3, r7, #0
    2f34:	3314      	adds	r3, #20
    2f36:	3a01      	subs	r2, #1
    2f38:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2f3a:	1c3b      	adds	r3, r7, #0
    2f3c:	3314      	adds	r3, #20
    2f3e:	781b      	ldrb	r3, [r3, #0]
    2f40:	2b0f      	cmp	r3, #15
    2f42:	d804      	bhi.n	2f4e <_adc_set_config+0x432>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2f44:	683a      	ldr	r2, [r7, #0]
    2f46:	232b      	movs	r3, #43	; 0x2b
    2f48:	5cd3      	ldrb	r3, [r2, r3]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2f4a:	2b0f      	cmp	r3, #15
    2f4c:	d901      	bls.n	2f52 <_adc_set_config+0x436>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    2f4e:	2317      	movs	r3, #23
    2f50:	e060      	b.n	3014 <_adc_set_config+0x4f8>
	}

	while (adc_is_syncing(module_inst)) {
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	687b      	ldr	r3, [r7, #4]
    2f56:	1c18      	adds	r0, r3, #0
    2f58:	4b33      	ldr	r3, [pc, #204]	; (3028 <_adc_set_config+0x50c>)
    2f5a:	4798      	blx	r3
    2f5c:	1c03      	adds	r3, r0, #0
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d1f8      	bne.n	2f54 <_adc_set_config+0x438>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    2f62:	683b      	ldr	r3, [r7, #0]
    2f64:	689a      	ldr	r2, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    2f66:	6839      	ldr	r1, [r7, #0]
    2f68:	232b      	movs	r3, #43	; 0x2b
    2f6a:	5ccb      	ldrb	r3, [r1, r3]
    2f6c:	051b      	lsls	r3, r3, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    2f6e:	431a      	orrs	r2, r3
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    2f70:	1c3b      	adds	r3, r7, #0
    2f72:	3314      	adds	r3, #20
    2f74:	781b      	ldrb	r3, [r3, #0]
    2f76:	041b      	lsls	r3, r3, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    2f78:	431a      	orrs	r2, r3
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    2f7a:	683b      	ldr	r3, [r7, #0]
    2f7c:	89db      	ldrh	r3, [r3, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    2f7e:	431a      	orrs	r2, r3
			config->negative_input |
			config->positive_input;
    2f80:	683b      	ldr	r3, [r7, #0]
    2f82:	7b1b      	ldrb	r3, [r3, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    2f84:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    2f86:	693b      	ldr	r3, [r7, #16]
    2f88:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    2f8a:	683a      	ldr	r2, [r7, #0]
    2f8c:	232a      	movs	r3, #42	; 0x2a
    2f8e:	5cd2      	ldrb	r2, [r2, r3]
    2f90:	693b      	ldr	r3, [r7, #16]
    2f92:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    2f94:	693b      	ldr	r3, [r7, #16]
    2f96:	220f      	movs	r2, #15
    2f98:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    2f9a:	683a      	ldr	r2, [r7, #0]
    2f9c:	2324      	movs	r3, #36	; 0x24
    2f9e:	5cd3      	ldrb	r3, [r2, r3]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d01d      	beq.n	2fe0 <_adc_set_config+0x4c4>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2fa4:	683b      	ldr	r3, [r7, #0]
    2fa6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    2fa8:	4b20      	ldr	r3, [pc, #128]	; (302c <_adc_set_config+0x510>)
    2faa:	429a      	cmp	r2, r3
    2fac:	d901      	bls.n	2fb2 <_adc_set_config+0x496>
			return STATUS_ERR_INVALID_ARG;
    2fae:	2317      	movs	r3, #23
    2fb0:	e030      	b.n	3014 <_adc_set_config+0x4f8>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    2fb2:	683b      	ldr	r3, [r7, #0]
    2fb4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    2fb6:	693b      	ldr	r3, [r7, #16]
    2fb8:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    2fba:	683b      	ldr	r3, [r7, #0]
    2fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2fbe:	b21a      	sxth	r2, r3
    2fc0:	4b1b      	ldr	r3, [pc, #108]	; (3030 <_adc_set_config+0x514>)
    2fc2:	429a      	cmp	r2, r3
    2fc4:	dc05      	bgt.n	2fd2 <_adc_set_config+0x4b6>
				config->correction.offset_correction < -2048) {
    2fc6:	683b      	ldr	r3, [r7, #0]
    2fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    2fca:	b21a      	sxth	r2, r3
    2fcc:	4b19      	ldr	r3, [pc, #100]	; (3034 <_adc_set_config+0x518>)
    2fce:	429a      	cmp	r2, r3
    2fd0:	da01      	bge.n	2fd6 <_adc_set_config+0x4ba>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    2fd2:	2317      	movs	r3, #23
    2fd4:	e01e      	b.n	3014 <_adc_set_config+0x4f8>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2fd6:	683b      	ldr	r3, [r7, #0]
    2fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2fda:	b29a      	uxth	r2, r3
    2fdc:	693b      	ldr	r3, [r7, #16]
    2fde:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    2fe0:	4b15      	ldr	r3, [pc, #84]	; (3038 <_adc_set_config+0x51c>)
    2fe2:	681b      	ldr	r3, [r3, #0]
    2fe4:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    2fe6:	b29b      	uxth	r3, r3
    2fe8:	021b      	lsls	r3, r3, #8
    2fea:	b29a      	uxth	r2, r3
    2fec:	23e0      	movs	r3, #224	; 0xe0
    2fee:	00db      	lsls	r3, r3, #3
    2ff0:	4013      	ands	r3, r2
    2ff2:	b299      	uxth	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    2ff4:	4b11      	ldr	r3, [pc, #68]	; (303c <_adc_set_config+0x520>)
    2ff6:	681a      	ldr	r2, [r3, #0]
    2ff8:	685b      	ldr	r3, [r3, #4]
    2ffa:	0158      	lsls	r0, r3, #5
    2ffc:	0ed4      	lsrs	r4, r2, #27
    2ffe:	4304      	orrs	r4, r0
    3000:	0edd      	lsrs	r5, r3, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    3002:	b2a2      	uxth	r2, r4
    3004:	23ff      	movs	r3, #255	; 0xff
    3006:	4013      	ands	r3, r2
    3008:	b29b      	uxth	r3, r3
    300a:	430b      	orrs	r3, r1
    300c:	b29a      	uxth	r2, r3
    300e:	693b      	ldr	r3, [r7, #16]
    3010:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    3012:	2300      	movs	r3, #0
}
    3014:	1c18      	adds	r0, r3, #0
    3016:	46bd      	mov	sp, r7
    3018:	b008      	add	sp, #32
    301a:	bdb0      	pop	{r4, r5, r7, pc}
    301c:	00007fff 	.word	0x00007fff
    3020:	ffff8000 	.word	0xffff8000
    3024:	0000ffff 	.word	0x0000ffff
    3028:	000029d1 	.word	0x000029d1
    302c:	00000fff 	.word	0x00000fff
    3030:	000007ff 	.word	0x000007ff
    3034:	fffff800 	.word	0xfffff800
    3038:	00806024 	.word	0x00806024
    303c:	00806020 	.word	0x00806020

00003040 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    3040:	b580      	push	{r7, lr}
    3042:	b086      	sub	sp, #24
    3044:	af00      	add	r7, sp, #0
    3046:	60f8      	str	r0, [r7, #12]
    3048:	60b9      	str	r1, [r7, #8]
    304a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	68ba      	ldr	r2, [r7, #8]
    3050:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    3052:	2380      	movs	r3, #128	; 0x80
    3054:	025b      	lsls	r3, r3, #9
    3056:	2002      	movs	r0, #2
    3058:	1c19      	adds	r1, r3, #0
    305a:	4b32      	ldr	r3, [pc, #200]	; (3124 <adc_init+0xe4>)
    305c:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    305e:	68bb      	ldr	r3, [r7, #8]
    3060:	781b      	ldrb	r3, [r3, #0]
    3062:	b2db      	uxtb	r3, r3
    3064:	1c1a      	adds	r2, r3, #0
    3066:	2301      	movs	r3, #1
    3068:	4013      	ands	r3, r2
    306a:	d001      	beq.n	3070 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    306c:	2305      	movs	r3, #5
    306e:	e055      	b.n	311c <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    3070:	68bb      	ldr	r3, [r7, #8]
    3072:	781b      	ldrb	r3, [r3, #0]
    3074:	b2db      	uxtb	r3, r3
    3076:	1c1a      	adds	r2, r3, #0
    3078:	2302      	movs	r3, #2
    307a:	4013      	ands	r3, r2
    307c:	d001      	beq.n	3082 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    307e:	231c      	movs	r3, #28
    3080:	e04c      	b.n	311c <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	785a      	ldrb	r2, [r3, #1]
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    308a:	68fb      	ldr	r3, [r7, #12]
    308c:	791b      	ldrb	r3, [r3, #4]
    308e:	2b00      	cmp	r3, #0
    3090:	d102      	bne.n	3098 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    3092:	2001      	movs	r0, #1
    3094:	4b24      	ldr	r3, [pc, #144]	; (3128 <adc_init+0xe8>)
    3096:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    3098:	1c3b      	adds	r3, r7, #0
    309a:	3317      	adds	r3, #23
    309c:	2200      	movs	r2, #0
    309e:	701a      	strb	r2, [r3, #0]
    30a0:	e00e      	b.n	30c0 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    30a2:	1c3b      	adds	r3, r7, #0
    30a4:	3317      	adds	r3, #23
    30a6:	781a      	ldrb	r2, [r3, #0]
    30a8:	68fb      	ldr	r3, [r7, #12]
    30aa:	3202      	adds	r2, #2
    30ac:	0092      	lsls	r2, r2, #2
    30ae:	2100      	movs	r1, #0
    30b0:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    30b2:	1c3b      	adds	r3, r7, #0
    30b4:	3317      	adds	r3, #23
    30b6:	781a      	ldrb	r2, [r3, #0]
    30b8:	1c3b      	adds	r3, r7, #0
    30ba:	3317      	adds	r3, #23
    30bc:	3201      	adds	r2, #1
    30be:	701a      	strb	r2, [r3, #0]
    30c0:	1c3b      	adds	r3, r7, #0
    30c2:	3317      	adds	r3, #23
    30c4:	781b      	ldrb	r3, [r3, #0]
    30c6:	2b02      	cmp	r3, #2
    30c8:	d9eb      	bls.n	30a2 <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
    30ca:	68fb      	ldr	r3, [r7, #12]
    30cc:	2200      	movs	r2, #0
    30ce:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    30d0:	68fb      	ldr	r3, [r7, #12]
    30d2:	2200      	movs	r2, #0
    30d4:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    30d6:	68fb      	ldr	r3, [r7, #12]
    30d8:	2200      	movs	r2, #0
    30da:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    30dc:	68fb      	ldr	r3, [r7, #12]
    30de:	2200      	movs	r2, #0
    30e0:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    30e2:	4b12      	ldr	r3, [pc, #72]	; (312c <adc_init+0xec>)
    30e4:	68fa      	ldr	r2, [r7, #12]
    30e6:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    30e8:	687a      	ldr	r2, [r7, #4]
    30ea:	232a      	movs	r3, #42	; 0x2a
    30ec:	5cd3      	ldrb	r3, [r2, r3]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d10a      	bne.n	3108 <adc_init+0xc8>
			!config->freerunning) {
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	7d1b      	ldrb	r3, [r3, #20]
    30f6:	2201      	movs	r2, #1
    30f8:	4053      	eors	r3, r2
    30fa:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    30fc:	2b00      	cmp	r3, #0
    30fe:	d003      	beq.n	3108 <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	2201      	movs	r2, #1
    3104:	775a      	strb	r2, [r3, #29]
    3106:	e002      	b.n	310e <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    3108:	68fb      	ldr	r3, [r7, #12]
    310a:	2200      	movs	r2, #0
    310c:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    310e:	68fa      	ldr	r2, [r7, #12]
    3110:	687b      	ldr	r3, [r7, #4]
    3112:	1c10      	adds	r0, r2, #0
    3114:	1c19      	adds	r1, r3, #0
    3116:	4b06      	ldr	r3, [pc, #24]	; (3130 <adc_init+0xf0>)
    3118:	4798      	blx	r3
    311a:	1c03      	adds	r3, r0, #0
}
    311c:	1c18      	adds	r0, r3, #0
    311e:	46bd      	mov	sp, r7
    3120:	b006      	add	sp, #24
    3122:	bd80      	pop	{r7, pc}
    3124:	0000290d 	.word	0x0000290d
    3128:	00002991 	.word	0x00002991
    312c:	20000138 	.word	0x20000138
    3130:	00002b1d 	.word	0x00002b1d

00003134 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3134:	b580      	push	{r7, lr}
    3136:	b084      	sub	sp, #16
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3142:	68fb      	ldr	r3, [r7, #12]
    3144:	7e5b      	ldrb	r3, [r3, #25]
    3146:	b2db      	uxtb	r3, r3
    3148:	b2db      	uxtb	r3, r3
    314a:	b25b      	sxtb	r3, r3
    314c:	2b00      	cmp	r3, #0
    314e:	da01      	bge.n	3154 <adc_is_syncing+0x20>
		return true;
    3150:	2301      	movs	r3, #1
    3152:	e000      	b.n	3156 <adc_is_syncing+0x22>
	}

	return false;
    3154:	2300      	movs	r3, #0
}
    3156:	1c18      	adds	r0, r3, #0
    3158:	46bd      	mov	sp, r7
    315a:	b004      	add	sp, #16
    315c:	bd80      	pop	{r7, pc}
    315e:	46c0      	nop			; (mov r8, r8)

00003160 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3160:	b580      	push	{r7, lr}
    3162:	b084      	sub	sp, #16
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	687b      	ldr	r3, [r7, #4]
    3172:	1c18      	adds	r0, r3, #0
    3174:	4b0b      	ldr	r3, [pc, #44]	; (31a4 <adc_start_conversion+0x44>)
    3176:	4798      	blx	r3
    3178:	1c03      	adds	r3, r0, #0
    317a:	2b00      	cmp	r3, #0
    317c:	d1f8      	bne.n	3170 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    317e:	68fb      	ldr	r3, [r7, #12]
    3180:	7b1b      	ldrb	r3, [r3, #12]
    3182:	b2db      	uxtb	r3, r3
    3184:	2202      	movs	r2, #2
    3186:	4313      	orrs	r3, r2
    3188:	b2da      	uxtb	r2, r3
    318a:	68fb      	ldr	r3, [r7, #12]
    318c:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	1c18      	adds	r0, r3, #0
    3194:	4b03      	ldr	r3, [pc, #12]	; (31a4 <adc_start_conversion+0x44>)
    3196:	4798      	blx	r3
    3198:	1c03      	adds	r3, r0, #0
    319a:	2b00      	cmp	r3, #0
    319c:	d1f8      	bne.n	3190 <adc_start_conversion+0x30>
		/* Wait for synchronization */
	}
}
    319e:	46bd      	mov	sp, r7
    31a0:	b004      	add	sp, #16
    31a2:	bd80      	pop	{r7, pc}
    31a4:	00003135 	.word	0x00003135

000031a8 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    31a8:	b580      	push	{r7, lr}
    31aa:	b084      	sub	sp, #16
    31ac:	af00      	add	r7, sp, #0
    31ae:	6078      	str	r0, [r7, #4]
    31b0:	1c0a      	adds	r2, r1, #0
    31b2:	1cfb      	adds	r3, r7, #3
    31b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	681b      	ldr	r3, [r3, #0]
    31ba:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    31bc:	68fb      	ldr	r3, [r7, #12]
    31be:	1cfa      	adds	r2, r7, #3
    31c0:	7812      	ldrb	r2, [r2, #0]
    31c2:	759a      	strb	r2, [r3, #22]
}
    31c4:	46bd      	mov	sp, r7
    31c6:	b004      	add	sp, #16
    31c8:	bd80      	pop	{r7, pc}
    31ca:	46c0      	nop			; (mov r8, r8)

000031cc <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    31cc:	b580      	push	{r7, lr}
    31ce:	b084      	sub	sp, #16
    31d0:	af00      	add	r7, sp, #0
    31d2:	1c02      	adds	r2, r0, #0
    31d4:	1dfb      	adds	r3, r7, #7
    31d6:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    31d8:	1dfb      	adds	r3, r7, #7
    31da:	781a      	ldrb	r2, [r3, #0]
    31dc:	4b44      	ldr	r3, [pc, #272]	; (32f0 <_adc_interrupt_handler+0x124>)
    31de:	0092      	lsls	r2, r2, #2
    31e0:	58d3      	ldr	r3, [r2, r3]
    31e2:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    31e4:	68fb      	ldr	r3, [r7, #12]
    31e6:	681b      	ldr	r3, [r3, #0]
    31e8:	7e1b      	ldrb	r3, [r3, #24]
    31ea:	b2db      	uxtb	r3, r3
    31ec:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    31ee:	68ba      	ldr	r2, [r7, #8]
    31f0:	2301      	movs	r3, #1
    31f2:	4013      	ands	r3, r2
    31f4:	d046      	beq.n	3284 <_adc_interrupt_handler+0xb8>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    31f6:	68fb      	ldr	r3, [r7, #12]
    31f8:	7edb      	ldrb	r3, [r3, #27]
    31fa:	1c1a      	adds	r2, r3, #0
    31fc:	2301      	movs	r3, #1
    31fe:	4013      	ands	r3, r2
    3200:	d040      	beq.n	3284 <_adc_interrupt_handler+0xb8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    3202:	68fb      	ldr	r3, [r7, #12]
    3204:	7e9b      	ldrb	r3, [r3, #26]
    3206:	1c1a      	adds	r2, r3, #0
    3208:	2301      	movs	r3, #1
    320a:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    320c:	d03a      	beq.n	3284 <_adc_interrupt_handler+0xb8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    320e:	68fb      	ldr	r3, [r7, #12]
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	2201      	movs	r2, #1
    3214:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	68fb      	ldr	r3, [r7, #12]
    321a:	1c18      	adds	r0, r3, #0
    321c:	4b35      	ldr	r3, [pc, #212]	; (32f4 <_adc_interrupt_handler+0x128>)
    321e:	4798      	blx	r3
    3220:	1c03      	adds	r3, r0, #0
    3222:	2b00      	cmp	r3, #0
    3224:	d1f8      	bne.n	3218 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3226:	68fb      	ldr	r3, [r7, #12]
    3228:	695b      	ldr	r3, [r3, #20]
    322a:	1c99      	adds	r1, r3, #2
    322c:	68fa      	ldr	r2, [r7, #12]
    322e:	6151      	str	r1, [r2, #20]
    3230:	68fa      	ldr	r2, [r7, #12]
    3232:	6812      	ldr	r2, [r2, #0]
    3234:	8b52      	ldrh	r2, [r2, #26]
    3236:	b292      	uxth	r2, r2
    3238:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    323a:	68fb      	ldr	r3, [r7, #12]
    323c:	8b1b      	ldrh	r3, [r3, #24]
    323e:	b29b      	uxth	r3, r3
    3240:	3b01      	subs	r3, #1
    3242:	b29b      	uxth	r3, r3
    3244:	68fa      	ldr	r2, [r7, #12]
    3246:	1c19      	adds	r1, r3, #0
    3248:	8311      	strh	r1, [r2, #24]
    324a:	2b00      	cmp	r3, #0
    324c:	d008      	beq.n	3260 <_adc_interrupt_handler+0x94>
				if (module->software_trigger == true) {
    324e:	68fb      	ldr	r3, [r7, #12]
    3250:	7f5b      	ldrb	r3, [r3, #29]
    3252:	2b00      	cmp	r3, #0
    3254:	d016      	beq.n	3284 <_adc_interrupt_handler+0xb8>
					adc_start_conversion(module);
    3256:	68fb      	ldr	r3, [r7, #12]
    3258:	1c18      	adds	r0, r3, #0
    325a:	4b27      	ldr	r3, [pc, #156]	; (32f8 <_adc_interrupt_handler+0x12c>)
    325c:	4798      	blx	r3
    325e:	e011      	b.n	3284 <_adc_interrupt_handler+0xb8>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    3260:	68fb      	ldr	r3, [r7, #12]
    3262:	7f1b      	ldrb	r3, [r3, #28]
    3264:	b2db      	uxtb	r3, r3
    3266:	2b05      	cmp	r3, #5
    3268:	d10c      	bne.n	3284 <_adc_interrupt_handler+0xb8>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    326a:	68fb      	ldr	r3, [r7, #12]
    326c:	2200      	movs	r2, #0
    326e:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    3270:	68fb      	ldr	r3, [r7, #12]
    3272:	1c18      	adds	r0, r3, #0
    3274:	2101      	movs	r1, #1
    3276:	4b21      	ldr	r3, [pc, #132]	; (32fc <_adc_interrupt_handler+0x130>)
    3278:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    327a:	68fb      	ldr	r3, [r7, #12]
    327c:	689b      	ldr	r3, [r3, #8]
    327e:	68fa      	ldr	r2, [r7, #12]
    3280:	1c10      	adds	r0, r2, #0
    3282:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    3284:	68ba      	ldr	r2, [r7, #8]
    3286:	2304      	movs	r3, #4
    3288:	4013      	ands	r3, r2
    328a:	d014      	beq.n	32b6 <_adc_interrupt_handler+0xea>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    328c:	68fb      	ldr	r3, [r7, #12]
    328e:	681b      	ldr	r3, [r3, #0]
    3290:	2204      	movs	r2, #4
    3292:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3294:	68fb      	ldr	r3, [r7, #12]
    3296:	7edb      	ldrb	r3, [r3, #27]
    3298:	1c1a      	adds	r2, r3, #0
    329a:	2302      	movs	r3, #2
    329c:	4013      	ands	r3, r2
    329e:	d00a      	beq.n	32b6 <_adc_interrupt_handler+0xea>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    32a0:	68fb      	ldr	r3, [r7, #12]
    32a2:	7e9b      	ldrb	r3, [r3, #26]
    32a4:	1c1a      	adds	r2, r3, #0
    32a6:	2302      	movs	r3, #2
    32a8:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    32aa:	d004      	beq.n	32b6 <_adc_interrupt_handler+0xea>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    32ac:	68fb      	ldr	r3, [r7, #12]
    32ae:	68db      	ldr	r3, [r3, #12]
    32b0:	68fa      	ldr	r2, [r7, #12]
    32b2:	1c10      	adds	r0, r2, #0
    32b4:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    32b6:	68ba      	ldr	r2, [r7, #8]
    32b8:	2302      	movs	r3, #2
    32ba:	4013      	ands	r3, r2
    32bc:	d014      	beq.n	32e8 <_adc_interrupt_handler+0x11c>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    32be:	68fb      	ldr	r3, [r7, #12]
    32c0:	681b      	ldr	r3, [r3, #0]
    32c2:	2202      	movs	r2, #2
    32c4:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    32c6:	68fb      	ldr	r3, [r7, #12]
    32c8:	7edb      	ldrb	r3, [r3, #27]
    32ca:	1c1a      	adds	r2, r3, #0
    32cc:	2304      	movs	r3, #4
    32ce:	4013      	ands	r3, r2
    32d0:	d00a      	beq.n	32e8 <_adc_interrupt_handler+0x11c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    32d2:	68fb      	ldr	r3, [r7, #12]
    32d4:	7e9b      	ldrb	r3, [r3, #26]
    32d6:	1c1a      	adds	r2, r3, #0
    32d8:	2304      	movs	r3, #4
    32da:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    32dc:	d004      	beq.n	32e8 <_adc_interrupt_handler+0x11c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    32de:	68fb      	ldr	r3, [r7, #12]
    32e0:	691b      	ldr	r3, [r3, #16]
    32e2:	68fa      	ldr	r2, [r7, #12]
    32e4:	1c10      	adds	r0, r2, #0
    32e6:	4798      	blx	r3
		}
	}
}
    32e8:	46bd      	mov	sp, r7
    32ea:	b004      	add	sp, #16
    32ec:	bd80      	pop	{r7, pc}
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	20000138 	.word	0x20000138
    32f4:	00003135 	.word	0x00003135
    32f8:	00003161 	.word	0x00003161
    32fc:	000031a9 	.word	0x000031a9

00003300 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    3300:	b580      	push	{r7, lr}
    3302:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    3304:	2000      	movs	r0, #0
    3306:	4b02      	ldr	r3, [pc, #8]	; (3310 <ADC_Handler+0x10>)
    3308:	4798      	blx	r3
}
    330a:	46bd      	mov	sp, r7
    330c:	bd80      	pop	{r7, pc}
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	000031cd 	.word	0x000031cd

00003314 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3314:	b580      	push	{r7, lr}
    3316:	b082      	sub	sp, #8
    3318:	af00      	add	r7, sp, #0
    331a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    331c:	687b      	ldr	r3, [r7, #4]
    331e:	2200      	movs	r2, #0
    3320:	701a      	strb	r2, [r3, #0]
}
    3322:	46bd      	mov	sp, r7
    3324:	b002      	add	sp, #8
    3326:	bd80      	pop	{r7, pc}

00003328 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3328:	b580      	push	{r7, lr}
    332a:	b086      	sub	sp, #24
    332c:	af00      	add	r7, sp, #0
    332e:	60f8      	str	r0, [r7, #12]
    3330:	60b9      	str	r1, [r7, #8]
    3332:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3334:	1c3b      	adds	r3, r7, #0
    3336:	3316      	adds	r3, #22
    3338:	2200      	movs	r2, #0
    333a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    333c:	68bb      	ldr	r3, [r7, #8]
    333e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3340:	68bb      	ldr	r3, [r7, #8]
    3342:	085a      	lsrs	r2, r3, #1
    3344:	68fb      	ldr	r3, [r7, #12]
    3346:	429a      	cmp	r2, r3
    3348:	d201      	bcs.n	334e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    334a:	2340      	movs	r3, #64	; 0x40
    334c:	e026      	b.n	339c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    334e:	68bb      	ldr	r3, [r7, #8]
    3350:	085b      	lsrs	r3, r3, #1
    3352:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3354:	e00a      	b.n	336c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3356:	693a      	ldr	r2, [r7, #16]
    3358:	68fb      	ldr	r3, [r7, #12]
    335a:	1ad3      	subs	r3, r2, r3
    335c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    335e:	1c3b      	adds	r3, r7, #0
    3360:	3316      	adds	r3, #22
    3362:	881a      	ldrh	r2, [r3, #0]
    3364:	1c3b      	adds	r3, r7, #0
    3366:	3316      	adds	r3, #22
    3368:	3201      	adds	r2, #1
    336a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    336c:	693a      	ldr	r2, [r7, #16]
    336e:	68fb      	ldr	r3, [r7, #12]
    3370:	429a      	cmp	r2, r3
    3372:	d2f0      	bcs.n	3356 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    3374:	1c3b      	adds	r3, r7, #0
    3376:	3316      	adds	r3, #22
    3378:	1c3a      	adds	r2, r7, #0
    337a:	3216      	adds	r2, #22
    337c:	8812      	ldrh	r2, [r2, #0]
    337e:	3a01      	subs	r2, #1
    3380:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3382:	1c3b      	adds	r3, r7, #0
    3384:	3316      	adds	r3, #22
    3386:	881b      	ldrh	r3, [r3, #0]
    3388:	2bff      	cmp	r3, #255	; 0xff
    338a:	d901      	bls.n	3390 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    338c:	2340      	movs	r3, #64	; 0x40
    338e:	e005      	b.n	339c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3390:	687b      	ldr	r3, [r7, #4]
    3392:	1c3a      	adds	r2, r7, #0
    3394:	3216      	adds	r2, #22
    3396:	8812      	ldrh	r2, [r2, #0]
    3398:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    339a:	2300      	movs	r3, #0
	}
}
    339c:	1c18      	adds	r0, r3, #0
    339e:	46bd      	mov	sp, r7
    33a0:	b006      	add	sp, #24
    33a2:	bd80      	pop	{r7, pc}

000033a4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    33a4:	b580      	push	{r7, lr}
    33a6:	b084      	sub	sp, #16
    33a8:	af00      	add	r7, sp, #0
    33aa:	1c0a      	adds	r2, r1, #0
    33ac:	1dfb      	adds	r3, r7, #7
    33ae:	1c01      	adds	r1, r0, #0
    33b0:	7019      	strb	r1, [r3, #0]
    33b2:	1dbb      	adds	r3, r7, #6
    33b4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    33b6:	4b1a      	ldr	r3, [pc, #104]	; (3420 <sercom_set_gclk_generator+0x7c>)
    33b8:	781b      	ldrb	r3, [r3, #0]
    33ba:	2201      	movs	r2, #1
    33bc:	4053      	eors	r3, r2
    33be:	b2db      	uxtb	r3, r3
    33c0:	2b00      	cmp	r3, #0
    33c2:	d103      	bne.n	33cc <sercom_set_gclk_generator+0x28>
    33c4:	1dbb      	adds	r3, r7, #6
    33c6:	781b      	ldrb	r3, [r3, #0]
    33c8:	2b00      	cmp	r3, #0
    33ca:	d01b      	beq.n	3404 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    33cc:	1c3b      	adds	r3, r7, #0
    33ce:	330c      	adds	r3, #12
    33d0:	1c18      	adds	r0, r3, #0
    33d2:	4b14      	ldr	r3, [pc, #80]	; (3424 <sercom_set_gclk_generator+0x80>)
    33d4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    33d6:	1c3b      	adds	r3, r7, #0
    33d8:	330c      	adds	r3, #12
    33da:	1dfa      	adds	r2, r7, #7
    33dc:	7812      	ldrb	r2, [r2, #0]
    33de:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    33e0:	1c3b      	adds	r3, r7, #0
    33e2:	330c      	adds	r3, #12
    33e4:	2013      	movs	r0, #19
    33e6:	1c19      	adds	r1, r3, #0
    33e8:	4b0f      	ldr	r3, [pc, #60]	; (3428 <sercom_set_gclk_generator+0x84>)
    33ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    33ec:	2013      	movs	r0, #19
    33ee:	4b0f      	ldr	r3, [pc, #60]	; (342c <sercom_set_gclk_generator+0x88>)
    33f0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    33f2:	4b0b      	ldr	r3, [pc, #44]	; (3420 <sercom_set_gclk_generator+0x7c>)
    33f4:	1dfa      	adds	r2, r7, #7
    33f6:	7812      	ldrb	r2, [r2, #0]
    33f8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    33fa:	4b09      	ldr	r3, [pc, #36]	; (3420 <sercom_set_gclk_generator+0x7c>)
    33fc:	2201      	movs	r2, #1
    33fe:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3400:	2300      	movs	r3, #0
    3402:	e008      	b.n	3416 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3404:	4b06      	ldr	r3, [pc, #24]	; (3420 <sercom_set_gclk_generator+0x7c>)
    3406:	785b      	ldrb	r3, [r3, #1]
    3408:	1dfa      	adds	r2, r7, #7
    340a:	7812      	ldrb	r2, [r2, #0]
    340c:	429a      	cmp	r2, r3
    340e:	d101      	bne.n	3414 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3410:	2300      	movs	r3, #0
    3412:	e000      	b.n	3416 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3414:	231d      	movs	r3, #29
}
    3416:	1c18      	adds	r0, r3, #0
    3418:	46bd      	mov	sp, r7
    341a:	b004      	add	sp, #16
    341c:	bd80      	pop	{r7, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	200000d4 	.word	0x200000d4
    3424:	00003315 	.word	0x00003315
    3428:	000053c1 	.word	0x000053c1
    342c:	00005401 	.word	0x00005401

00003430 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3430:	b580      	push	{r7, lr}
    3432:	b082      	sub	sp, #8
    3434:	af00      	add	r7, sp, #0
    3436:	6078      	str	r0, [r7, #4]
    3438:	1c0a      	adds	r2, r1, #0
    343a:	1cfb      	adds	r3, r7, #3
    343c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    343e:	687b      	ldr	r3, [r7, #4]
    3440:	4a4d      	ldr	r2, [pc, #308]	; (3578 <_sercom_get_default_pad+0x148>)
    3442:	4293      	cmp	r3, r2
    3444:	d03f      	beq.n	34c6 <_sercom_get_default_pad+0x96>
    3446:	4a4c      	ldr	r2, [pc, #304]	; (3578 <_sercom_get_default_pad+0x148>)
    3448:	4293      	cmp	r3, r2
    344a:	d806      	bhi.n	345a <_sercom_get_default_pad+0x2a>
    344c:	4a4b      	ldr	r2, [pc, #300]	; (357c <_sercom_get_default_pad+0x14c>)
    344e:	4293      	cmp	r3, r2
    3450:	d00f      	beq.n	3472 <_sercom_get_default_pad+0x42>
    3452:	4a4b      	ldr	r2, [pc, #300]	; (3580 <_sercom_get_default_pad+0x150>)
    3454:	4293      	cmp	r3, r2
    3456:	d021      	beq.n	349c <_sercom_get_default_pad+0x6c>
    3458:	e089      	b.n	356e <_sercom_get_default_pad+0x13e>
    345a:	4a4a      	ldr	r2, [pc, #296]	; (3584 <_sercom_get_default_pad+0x154>)
    345c:	4293      	cmp	r3, r2
    345e:	d100      	bne.n	3462 <_sercom_get_default_pad+0x32>
    3460:	e05b      	b.n	351a <_sercom_get_default_pad+0xea>
    3462:	4a49      	ldr	r2, [pc, #292]	; (3588 <_sercom_get_default_pad+0x158>)
    3464:	4293      	cmp	r3, r2
    3466:	d100      	bne.n	346a <_sercom_get_default_pad+0x3a>
    3468:	e06c      	b.n	3544 <_sercom_get_default_pad+0x114>
    346a:	4a48      	ldr	r2, [pc, #288]	; (358c <_sercom_get_default_pad+0x15c>)
    346c:	4293      	cmp	r3, r2
    346e:	d03f      	beq.n	34f0 <_sercom_get_default_pad+0xc0>
    3470:	e07d      	b.n	356e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3472:	1cfb      	adds	r3, r7, #3
    3474:	781b      	ldrb	r3, [r3, #0]
    3476:	2b01      	cmp	r3, #1
    3478:	d00a      	beq.n	3490 <_sercom_get_default_pad+0x60>
    347a:	dc02      	bgt.n	3482 <_sercom_get_default_pad+0x52>
    347c:	2b00      	cmp	r3, #0
    347e:	d005      	beq.n	348c <_sercom_get_default_pad+0x5c>
    3480:	e075      	b.n	356e <_sercom_get_default_pad+0x13e>
    3482:	2b02      	cmp	r3, #2
    3484:	d006      	beq.n	3494 <_sercom_get_default_pad+0x64>
    3486:	2b03      	cmp	r3, #3
    3488:	d006      	beq.n	3498 <_sercom_get_default_pad+0x68>
    348a:	e070      	b.n	356e <_sercom_get_default_pad+0x13e>
    348c:	4b40      	ldr	r3, [pc, #256]	; (3590 <_sercom_get_default_pad+0x160>)
    348e:	e06f      	b.n	3570 <_sercom_get_default_pad+0x140>
    3490:	4b40      	ldr	r3, [pc, #256]	; (3594 <_sercom_get_default_pad+0x164>)
    3492:	e06d      	b.n	3570 <_sercom_get_default_pad+0x140>
    3494:	4b40      	ldr	r3, [pc, #256]	; (3598 <_sercom_get_default_pad+0x168>)
    3496:	e06b      	b.n	3570 <_sercom_get_default_pad+0x140>
    3498:	4b40      	ldr	r3, [pc, #256]	; (359c <_sercom_get_default_pad+0x16c>)
    349a:	e069      	b.n	3570 <_sercom_get_default_pad+0x140>
    349c:	1cfb      	adds	r3, r7, #3
    349e:	781b      	ldrb	r3, [r3, #0]
    34a0:	2b01      	cmp	r3, #1
    34a2:	d00a      	beq.n	34ba <_sercom_get_default_pad+0x8a>
    34a4:	dc02      	bgt.n	34ac <_sercom_get_default_pad+0x7c>
    34a6:	2b00      	cmp	r3, #0
    34a8:	d005      	beq.n	34b6 <_sercom_get_default_pad+0x86>
    34aa:	e060      	b.n	356e <_sercom_get_default_pad+0x13e>
    34ac:	2b02      	cmp	r3, #2
    34ae:	d006      	beq.n	34be <_sercom_get_default_pad+0x8e>
    34b0:	2b03      	cmp	r3, #3
    34b2:	d006      	beq.n	34c2 <_sercom_get_default_pad+0x92>
    34b4:	e05b      	b.n	356e <_sercom_get_default_pad+0x13e>
    34b6:	2303      	movs	r3, #3
    34b8:	e05a      	b.n	3570 <_sercom_get_default_pad+0x140>
    34ba:	4b39      	ldr	r3, [pc, #228]	; (35a0 <_sercom_get_default_pad+0x170>)
    34bc:	e058      	b.n	3570 <_sercom_get_default_pad+0x140>
    34be:	4b39      	ldr	r3, [pc, #228]	; (35a4 <_sercom_get_default_pad+0x174>)
    34c0:	e056      	b.n	3570 <_sercom_get_default_pad+0x140>
    34c2:	4b39      	ldr	r3, [pc, #228]	; (35a8 <_sercom_get_default_pad+0x178>)
    34c4:	e054      	b.n	3570 <_sercom_get_default_pad+0x140>
    34c6:	1cfb      	adds	r3, r7, #3
    34c8:	781b      	ldrb	r3, [r3, #0]
    34ca:	2b01      	cmp	r3, #1
    34cc:	d00a      	beq.n	34e4 <_sercom_get_default_pad+0xb4>
    34ce:	dc02      	bgt.n	34d6 <_sercom_get_default_pad+0xa6>
    34d0:	2b00      	cmp	r3, #0
    34d2:	d005      	beq.n	34e0 <_sercom_get_default_pad+0xb0>
    34d4:	e04b      	b.n	356e <_sercom_get_default_pad+0x13e>
    34d6:	2b02      	cmp	r3, #2
    34d8:	d006      	beq.n	34e8 <_sercom_get_default_pad+0xb8>
    34da:	2b03      	cmp	r3, #3
    34dc:	d006      	beq.n	34ec <_sercom_get_default_pad+0xbc>
    34de:	e046      	b.n	356e <_sercom_get_default_pad+0x13e>
    34e0:	4b32      	ldr	r3, [pc, #200]	; (35ac <_sercom_get_default_pad+0x17c>)
    34e2:	e045      	b.n	3570 <_sercom_get_default_pad+0x140>
    34e4:	4b32      	ldr	r3, [pc, #200]	; (35b0 <_sercom_get_default_pad+0x180>)
    34e6:	e043      	b.n	3570 <_sercom_get_default_pad+0x140>
    34e8:	4b32      	ldr	r3, [pc, #200]	; (35b4 <_sercom_get_default_pad+0x184>)
    34ea:	e041      	b.n	3570 <_sercom_get_default_pad+0x140>
    34ec:	4b32      	ldr	r3, [pc, #200]	; (35b8 <_sercom_get_default_pad+0x188>)
    34ee:	e03f      	b.n	3570 <_sercom_get_default_pad+0x140>
    34f0:	1cfb      	adds	r3, r7, #3
    34f2:	781b      	ldrb	r3, [r3, #0]
    34f4:	2b01      	cmp	r3, #1
    34f6:	d00a      	beq.n	350e <_sercom_get_default_pad+0xde>
    34f8:	dc02      	bgt.n	3500 <_sercom_get_default_pad+0xd0>
    34fa:	2b00      	cmp	r3, #0
    34fc:	d005      	beq.n	350a <_sercom_get_default_pad+0xda>
    34fe:	e036      	b.n	356e <_sercom_get_default_pad+0x13e>
    3500:	2b02      	cmp	r3, #2
    3502:	d006      	beq.n	3512 <_sercom_get_default_pad+0xe2>
    3504:	2b03      	cmp	r3, #3
    3506:	d006      	beq.n	3516 <_sercom_get_default_pad+0xe6>
    3508:	e031      	b.n	356e <_sercom_get_default_pad+0x13e>
    350a:	4b2c      	ldr	r3, [pc, #176]	; (35bc <_sercom_get_default_pad+0x18c>)
    350c:	e030      	b.n	3570 <_sercom_get_default_pad+0x140>
    350e:	4b2c      	ldr	r3, [pc, #176]	; (35c0 <_sercom_get_default_pad+0x190>)
    3510:	e02e      	b.n	3570 <_sercom_get_default_pad+0x140>
    3512:	4b2c      	ldr	r3, [pc, #176]	; (35c4 <_sercom_get_default_pad+0x194>)
    3514:	e02c      	b.n	3570 <_sercom_get_default_pad+0x140>
    3516:	4b2c      	ldr	r3, [pc, #176]	; (35c8 <_sercom_get_default_pad+0x198>)
    3518:	e02a      	b.n	3570 <_sercom_get_default_pad+0x140>
    351a:	1cfb      	adds	r3, r7, #3
    351c:	781b      	ldrb	r3, [r3, #0]
    351e:	2b01      	cmp	r3, #1
    3520:	d00a      	beq.n	3538 <_sercom_get_default_pad+0x108>
    3522:	dc02      	bgt.n	352a <_sercom_get_default_pad+0xfa>
    3524:	2b00      	cmp	r3, #0
    3526:	d005      	beq.n	3534 <_sercom_get_default_pad+0x104>
    3528:	e021      	b.n	356e <_sercom_get_default_pad+0x13e>
    352a:	2b02      	cmp	r3, #2
    352c:	d006      	beq.n	353c <_sercom_get_default_pad+0x10c>
    352e:	2b03      	cmp	r3, #3
    3530:	d006      	beq.n	3540 <_sercom_get_default_pad+0x110>
    3532:	e01c      	b.n	356e <_sercom_get_default_pad+0x13e>
    3534:	4b25      	ldr	r3, [pc, #148]	; (35cc <_sercom_get_default_pad+0x19c>)
    3536:	e01b      	b.n	3570 <_sercom_get_default_pad+0x140>
    3538:	4b25      	ldr	r3, [pc, #148]	; (35d0 <_sercom_get_default_pad+0x1a0>)
    353a:	e019      	b.n	3570 <_sercom_get_default_pad+0x140>
    353c:	4b25      	ldr	r3, [pc, #148]	; (35d4 <_sercom_get_default_pad+0x1a4>)
    353e:	e017      	b.n	3570 <_sercom_get_default_pad+0x140>
    3540:	4b25      	ldr	r3, [pc, #148]	; (35d8 <_sercom_get_default_pad+0x1a8>)
    3542:	e015      	b.n	3570 <_sercom_get_default_pad+0x140>
    3544:	1cfb      	adds	r3, r7, #3
    3546:	781b      	ldrb	r3, [r3, #0]
    3548:	2b01      	cmp	r3, #1
    354a:	d00a      	beq.n	3562 <_sercom_get_default_pad+0x132>
    354c:	dc02      	bgt.n	3554 <_sercom_get_default_pad+0x124>
    354e:	2b00      	cmp	r3, #0
    3550:	d005      	beq.n	355e <_sercom_get_default_pad+0x12e>
    3552:	e00c      	b.n	356e <_sercom_get_default_pad+0x13e>
    3554:	2b02      	cmp	r3, #2
    3556:	d006      	beq.n	3566 <_sercom_get_default_pad+0x136>
    3558:	2b03      	cmp	r3, #3
    355a:	d006      	beq.n	356a <_sercom_get_default_pad+0x13a>
    355c:	e007      	b.n	356e <_sercom_get_default_pad+0x13e>
    355e:	4b1f      	ldr	r3, [pc, #124]	; (35dc <_sercom_get_default_pad+0x1ac>)
    3560:	e006      	b.n	3570 <_sercom_get_default_pad+0x140>
    3562:	4b1f      	ldr	r3, [pc, #124]	; (35e0 <_sercom_get_default_pad+0x1b0>)
    3564:	e004      	b.n	3570 <_sercom_get_default_pad+0x140>
    3566:	4b1f      	ldr	r3, [pc, #124]	; (35e4 <_sercom_get_default_pad+0x1b4>)
    3568:	e002      	b.n	3570 <_sercom_get_default_pad+0x140>
    356a:	4b1f      	ldr	r3, [pc, #124]	; (35e8 <_sercom_get_default_pad+0x1b8>)
    356c:	e000      	b.n	3570 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    356e:	2300      	movs	r3, #0
}
    3570:	1c18      	adds	r0, r3, #0
    3572:	46bd      	mov	sp, r7
    3574:	b002      	add	sp, #8
    3576:	bd80      	pop	{r7, pc}
    3578:	42001000 	.word	0x42001000
    357c:	42000800 	.word	0x42000800
    3580:	42000c00 	.word	0x42000c00
    3584:	42001800 	.word	0x42001800
    3588:	42001c00 	.word	0x42001c00
    358c:	42001400 	.word	0x42001400
    3590:	00040003 	.word	0x00040003
    3594:	00050003 	.word	0x00050003
    3598:	00060003 	.word	0x00060003
    359c:	00070003 	.word	0x00070003
    35a0:	00010003 	.word	0x00010003
    35a4:	001e0003 	.word	0x001e0003
    35a8:	001f0003 	.word	0x001f0003
    35ac:	00080003 	.word	0x00080003
    35b0:	00090003 	.word	0x00090003
    35b4:	000a0003 	.word	0x000a0003
    35b8:	000b0003 	.word	0x000b0003
    35bc:	00100003 	.word	0x00100003
    35c0:	00110003 	.word	0x00110003
    35c4:	00120003 	.word	0x00120003
    35c8:	00130003 	.word	0x00130003
    35cc:	000c0003 	.word	0x000c0003
    35d0:	000d0003 	.word	0x000d0003
    35d4:	000e0003 	.word	0x000e0003
    35d8:	000f0003 	.word	0x000f0003
    35dc:	00160003 	.word	0x00160003
    35e0:	00170003 	.word	0x00170003
    35e4:	00180003 	.word	0x00180003
    35e8:	00190003 	.word	0x00190003

000035ec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    35ec:	b590      	push	{r4, r7, lr}
    35ee:	b08b      	sub	sp, #44	; 0x2c
    35f0:	af00      	add	r7, sp, #0
    35f2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    35f4:	1c3b      	adds	r3, r7, #0
    35f6:	330c      	adds	r3, #12
    35f8:	4a0e      	ldr	r2, [pc, #56]	; (3634 <_sercom_get_sercom_inst_index+0x48>)
    35fa:	ca13      	ldmia	r2!, {r0, r1, r4}
    35fc:	c313      	stmia	r3!, {r0, r1, r4}
    35fe:	ca13      	ldmia	r2!, {r0, r1, r4}
    3600:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3602:	2300      	movs	r3, #0
    3604:	627b      	str	r3, [r7, #36]	; 0x24
    3606:	e00d      	b.n	3624 <_sercom_get_sercom_inst_index+0x38>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3608:	687a      	ldr	r2, [r7, #4]
    360a:	1c3b      	adds	r3, r7, #0
    360c:	330c      	adds	r3, #12
    360e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3610:	0089      	lsls	r1, r1, #2
    3612:	58cb      	ldr	r3, [r1, r3]
    3614:	429a      	cmp	r2, r3
    3616:	d102      	bne.n	361e <_sercom_get_sercom_inst_index+0x32>
			return i;
    3618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    361a:	b2db      	uxtb	r3, r3
    361c:	e006      	b.n	362c <_sercom_get_sercom_inst_index+0x40>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3620:	3301      	adds	r3, #1
    3622:	627b      	str	r3, [r7, #36]	; 0x24
    3624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3626:	2b05      	cmp	r3, #5
    3628:	d9ee      	bls.n	3608 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    362a:	2300      	movs	r3, #0
}
    362c:	1c18      	adds	r0, r3, #0
    362e:	46bd      	mov	sp, r7
    3630:	b00b      	add	sp, #44	; 0x2c
    3632:	bd90      	pop	{r4, r7, pc}
    3634:	0000647c 	.word	0x0000647c

00003638 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3638:	b580      	push	{r7, lr}
    363a:	b082      	sub	sp, #8
    363c:	af00      	add	r7, sp, #0
    363e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	2200      	movs	r2, #0
    3644:	701a      	strb	r2, [r3, #0]
}
    3646:	46bd      	mov	sp, r7
    3648:	b002      	add	sp, #8
    364a:	bd80      	pop	{r7, pc}

0000364c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    364c:	b580      	push	{r7, lr}
    364e:	b082      	sub	sp, #8
    3650:	af00      	add	r7, sp, #0
    3652:	1c02      	adds	r2, r0, #0
    3654:	6039      	str	r1, [r7, #0]
    3656:	1dfb      	adds	r3, r7, #7
    3658:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    365a:	1dfb      	adds	r3, r7, #7
    365c:	781b      	ldrb	r3, [r3, #0]
    365e:	2b01      	cmp	r3, #1
    3660:	d00a      	beq.n	3678 <system_apb_clock_set_mask+0x2c>
    3662:	2b02      	cmp	r3, #2
    3664:	d00f      	beq.n	3686 <system_apb_clock_set_mask+0x3a>
    3666:	2b00      	cmp	r3, #0
    3668:	d114      	bne.n	3694 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    366a:	4b0e      	ldr	r3, [pc, #56]	; (36a4 <system_apb_clock_set_mask+0x58>)
    366c:	4a0d      	ldr	r2, [pc, #52]	; (36a4 <system_apb_clock_set_mask+0x58>)
    366e:	6991      	ldr	r1, [r2, #24]
    3670:	683a      	ldr	r2, [r7, #0]
    3672:	430a      	orrs	r2, r1
    3674:	619a      	str	r2, [r3, #24]
			break;
    3676:	e00f      	b.n	3698 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3678:	4b0a      	ldr	r3, [pc, #40]	; (36a4 <system_apb_clock_set_mask+0x58>)
    367a:	4a0a      	ldr	r2, [pc, #40]	; (36a4 <system_apb_clock_set_mask+0x58>)
    367c:	69d1      	ldr	r1, [r2, #28]
    367e:	683a      	ldr	r2, [r7, #0]
    3680:	430a      	orrs	r2, r1
    3682:	61da      	str	r2, [r3, #28]
			break;
    3684:	e008      	b.n	3698 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3686:	4b07      	ldr	r3, [pc, #28]	; (36a4 <system_apb_clock_set_mask+0x58>)
    3688:	4a06      	ldr	r2, [pc, #24]	; (36a4 <system_apb_clock_set_mask+0x58>)
    368a:	6a11      	ldr	r1, [r2, #32]
    368c:	683a      	ldr	r2, [r7, #0]
    368e:	430a      	orrs	r2, r1
    3690:	621a      	str	r2, [r3, #32]
			break;
    3692:	e001      	b.n	3698 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3694:	2317      	movs	r3, #23
    3696:	e000      	b.n	369a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3698:	2300      	movs	r3, #0
}
    369a:	1c18      	adds	r0, r3, #0
    369c:	46bd      	mov	sp, r7
    369e:	b002      	add	sp, #8
    36a0:	bd80      	pop	{r7, pc}
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	40000400 	.word	0x40000400

000036a8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    36a8:	b580      	push	{r7, lr}
    36aa:	b082      	sub	sp, #8
    36ac:	af00      	add	r7, sp, #0
    36ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	2280      	movs	r2, #128	; 0x80
    36b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    36b6:	687b      	ldr	r3, [r7, #4]
    36b8:	2200      	movs	r2, #0
    36ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    36bc:	687b      	ldr	r3, [r7, #4]
    36be:	2201      	movs	r2, #1
    36c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	2200      	movs	r2, #0
    36c6:	70da      	strb	r2, [r3, #3]
}
    36c8:	46bd      	mov	sp, r7
    36ca:	b002      	add	sp, #8
    36cc:	bd80      	pop	{r7, pc}
    36ce:	46c0      	nop			; (mov r8, r8)

000036d0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    36d0:	b580      	push	{r7, lr}
    36d2:	b084      	sub	sp, #16
    36d4:	af00      	add	r7, sp, #0
    36d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	681b      	ldr	r3, [r3, #0]
    36dc:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    36de:	68fb      	ldr	r3, [r7, #12]
    36e0:	7bdb      	ldrb	r3, [r3, #15]
    36e2:	b2db      	uxtb	r3, r3
    36e4:	1c1a      	adds	r2, r3, #0
    36e6:	2380      	movs	r3, #128	; 0x80
    36e8:	4013      	ands	r3, r2
    36ea:	1e5a      	subs	r2, r3, #1
    36ec:	4193      	sbcs	r3, r2
    36ee:	b2db      	uxtb	r3, r3
#endif
}
    36f0:	1c18      	adds	r0, r3, #0
    36f2:	46bd      	mov	sp, r7
    36f4:	b004      	add	sp, #16
    36f6:	bd80      	pop	{r7, pc}

000036f8 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    36f8:	b580      	push	{r7, lr}
    36fa:	b084      	sub	sp, #16
    36fc:	af00      	add	r7, sp, #0
    36fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	681b      	ldr	r3, [r3, #0]
    3704:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3706:	46c0      	nop			; (mov r8, r8)
    3708:	687b      	ldr	r3, [r7, #4]
    370a:	1c18      	adds	r0, r3, #0
    370c:	4b07      	ldr	r3, [pc, #28]	; (372c <tc_disable+0x34>)
    370e:	4798      	blx	r3
    3710:	1c03      	adds	r3, r0, #0
    3712:	2b00      	cmp	r3, #0
    3714:	d1f8      	bne.n	3708 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    3716:	68fb      	ldr	r3, [r7, #12]
    3718:	881b      	ldrh	r3, [r3, #0]
    371a:	b29b      	uxth	r3, r3
    371c:	2202      	movs	r2, #2
    371e:	4393      	bics	r3, r2
    3720:	b29a      	uxth	r2, r3
    3722:	68fb      	ldr	r3, [r7, #12]
    3724:	801a      	strh	r2, [r3, #0]
}
    3726:	46bd      	mov	sp, r7
    3728:	b004      	add	sp, #16
    372a:	bd80      	pop	{r7, pc}
    372c:	000036d1 	.word	0x000036d1

00003730 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3730:	b590      	push	{r4, r7, lr}
    3732:	b089      	sub	sp, #36	; 0x24
    3734:	af00      	add	r7, sp, #0
    3736:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3738:	1c3b      	adds	r3, r7, #0
    373a:	3308      	adds	r3, #8
    373c:	4a0e      	ldr	r2, [pc, #56]	; (3778 <_tc_get_inst_index+0x48>)
    373e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3740:	c313      	stmia	r3!, {r0, r1, r4}
    3742:	ca03      	ldmia	r2!, {r0, r1}
    3744:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3746:	2300      	movs	r3, #0
    3748:	61fb      	str	r3, [r7, #28]
    374a:	e00d      	b.n	3768 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
    374c:	1c3b      	adds	r3, r7, #0
    374e:	3308      	adds	r3, #8
    3750:	69fa      	ldr	r2, [r7, #28]
    3752:	0092      	lsls	r2, r2, #2
    3754:	58d2      	ldr	r2, [r2, r3]
    3756:	687b      	ldr	r3, [r7, #4]
    3758:	429a      	cmp	r2, r3
    375a:	d102      	bne.n	3762 <_tc_get_inst_index+0x32>
			return i;
    375c:	69fb      	ldr	r3, [r7, #28]
    375e:	b2db      	uxtb	r3, r3
    3760:	e006      	b.n	3770 <_tc_get_inst_index+0x40>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3762:	69fb      	ldr	r3, [r7, #28]
    3764:	3301      	adds	r3, #1
    3766:	61fb      	str	r3, [r7, #28]
    3768:	69fb      	ldr	r3, [r7, #28]
    376a:	2b04      	cmp	r3, #4
    376c:	d9ee      	bls.n	374c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    376e:	2300      	movs	r3, #0
}
    3770:	1c18      	adds	r0, r3, #0
    3772:	46bd      	mov	sp, r7
    3774:	b009      	add	sp, #36	; 0x24
    3776:	bd90      	pop	{r4, r7, pc}
    3778:	00006494 	.word	0x00006494

0000377c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    377c:	b590      	push	{r4, r7, lr}
    377e:	b08d      	sub	sp, #52	; 0x34
    3780:	af00      	add	r7, sp, #0
    3782:	60f8      	str	r0, [r7, #12]
    3784:	60b9      	str	r1, [r7, #8]
    3786:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    3788:	1c3b      	adds	r3, r7, #0
    378a:	332e      	adds	r3, #46	; 0x2e
    378c:	2200      	movs	r2, #0
    378e:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    3790:	1c3b      	adds	r3, r7, #0
    3792:	332d      	adds	r3, #45	; 0x2d
    3794:	2200      	movs	r2, #0
    3796:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    3798:	1c3b      	adds	r3, r7, #0
    379a:	332c      	adds	r3, #44	; 0x2c
    379c:	2200      	movs	r2, #0
    379e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    37a0:	1c3c      	adds	r4, r7, #0
    37a2:	3429      	adds	r4, #41	; 0x29
    37a4:	68bb      	ldr	r3, [r7, #8]
    37a6:	1c18      	adds	r0, r3, #0
    37a8:	4bc5      	ldr	r3, [pc, #788]	; (3ac0 <tc_init+0x344>)
    37aa:	4798      	blx	r3
    37ac:	1c03      	adds	r3, r0, #0
    37ae:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    37b0:	1c3a      	adds	r2, r7, #0
    37b2:	3224      	adds	r2, #36	; 0x24
    37b4:	4bc3      	ldr	r3, [pc, #780]	; (3ac4 <tc_init+0x348>)
    37b6:	1c11      	adds	r1, r2, #0
    37b8:	1c1a      	adds	r2, r3, #0
    37ba:	2305      	movs	r3, #5
    37bc:	1c08      	adds	r0, r1, #0
    37be:	1c11      	adds	r1, r2, #0
    37c0:	1c1a      	adds	r2, r3, #0
    37c2:	4bc1      	ldr	r3, [pc, #772]	; (3ac8 <tc_init+0x34c>)
    37c4:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    37c6:	1c3a      	adds	r2, r7, #0
    37c8:	3218      	adds	r2, #24
    37ca:	4bc0      	ldr	r3, [pc, #768]	; (3acc <tc_init+0x350>)
    37cc:	1c11      	adds	r1, r2, #0
    37ce:	1c1a      	adds	r2, r3, #0
    37d0:	230a      	movs	r3, #10
    37d2:	1c08      	adds	r0, r1, #0
    37d4:	1c11      	adds	r1, r2, #0
    37d6:	1c1a      	adds	r2, r3, #0
    37d8:	4bbb      	ldr	r3, [pc, #748]	; (3ac8 <tc_init+0x34c>)
    37da:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    37dc:	1c3b      	adds	r3, r7, #0
    37de:	332b      	adds	r3, #43	; 0x2b
    37e0:	2200      	movs	r2, #0
    37e2:	701a      	strb	r2, [r3, #0]
    37e4:	e00e      	b.n	3804 <tc_init+0x88>
		module_inst->callback[i]        = NULL;
    37e6:	1c3b      	adds	r3, r7, #0
    37e8:	332b      	adds	r3, #43	; 0x2b
    37ea:	781a      	ldrb	r2, [r3, #0]
    37ec:	68fb      	ldr	r3, [r7, #12]
    37ee:	3202      	adds	r2, #2
    37f0:	0092      	lsls	r2, r2, #2
    37f2:	2100      	movs	r1, #0
    37f4:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    37f6:	1c3b      	adds	r3, r7, #0
    37f8:	332b      	adds	r3, #43	; 0x2b
    37fa:	781a      	ldrb	r2, [r3, #0]
    37fc:	1c3b      	adds	r3, r7, #0
    37fe:	332b      	adds	r3, #43	; 0x2b
    3800:	3201      	adds	r2, #1
    3802:	701a      	strb	r2, [r3, #0]
    3804:	1c3b      	adds	r3, r7, #0
    3806:	332b      	adds	r3, #43	; 0x2b
    3808:	781b      	ldrb	r3, [r3, #0]
    380a:	2b03      	cmp	r3, #3
    380c:	d9eb      	bls.n	37e6 <tc_init+0x6a>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    380e:	68fb      	ldr	r3, [r7, #12]
    3810:	2200      	movs	r2, #0
    3812:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    3814:	68fb      	ldr	r3, [r7, #12]
    3816:	2200      	movs	r2, #0
    3818:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    381a:	1c3b      	adds	r3, r7, #0
    381c:	3329      	adds	r3, #41	; 0x29
    381e:	781a      	ldrb	r2, [r3, #0]
    3820:	4bab      	ldr	r3, [pc, #684]	; (3ad0 <tc_init+0x354>)
    3822:	0092      	lsls	r2, r2, #2
    3824:	68f9      	ldr	r1, [r7, #12]
    3826:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	68ba      	ldr	r2, [r7, #8]
    382c:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    382e:	687b      	ldr	r3, [r7, #4]
    3830:	789b      	ldrb	r3, [r3, #2]
    3832:	2b08      	cmp	r3, #8
    3834:	d108      	bne.n	3848 <tc_init+0xcc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    3836:	1c3b      	adds	r3, r7, #0
    3838:	3329      	adds	r3, #41	; 0x29
    383a:	781b      	ldrb	r3, [r3, #0]
    383c:	1cda      	adds	r2, r3, #3
    383e:	2301      	movs	r3, #1
    3840:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3842:	d001      	beq.n	3848 <tc_init+0xcc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3844:	2317      	movs	r3, #23
    3846:	e1d6      	b.n	3bf6 <tc_init+0x47a>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	789a      	ldrb	r2, [r3, #2]
    384c:	68fb      	ldr	r3, [r7, #12]
    384e:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3850:	68bb      	ldr	r3, [r7, #8]
    3852:	881b      	ldrh	r3, [r3, #0]
    3854:	b29b      	uxth	r3, r3
    3856:	1c1a      	adds	r2, r3, #0
    3858:	2301      	movs	r3, #1
    385a:	4013      	ands	r3, r2
    385c:	d001      	beq.n	3862 <tc_init+0xe6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    385e:	2305      	movs	r3, #5
    3860:	e1c9      	b.n	3bf6 <tc_init+0x47a>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3862:	68bb      	ldr	r3, [r7, #8]
    3864:	7bdb      	ldrb	r3, [r3, #15]
    3866:	b2db      	uxtb	r3, r3
    3868:	1c1a      	adds	r2, r3, #0
    386a:	2310      	movs	r3, #16
    386c:	4013      	ands	r3, r2
    386e:	d001      	beq.n	3874 <tc_init+0xf8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    3870:	231c      	movs	r3, #28
    3872:	e1c0      	b.n	3bf6 <tc_init+0x47a>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    3874:	68bb      	ldr	r3, [r7, #8]
    3876:	881b      	ldrh	r3, [r3, #0]
    3878:	b29b      	uxth	r3, r3
    387a:	1c1a      	adds	r2, r3, #0
    387c:	2302      	movs	r3, #2
    387e:	4013      	ands	r3, r2
    3880:	d001      	beq.n	3886 <tc_init+0x10a>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    3882:	231c      	movs	r3, #28
    3884:	e1b7      	b.n	3bf6 <tc_init+0x47a>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	7c1b      	ldrb	r3, [r3, #16]
    388a:	2b00      	cmp	r3, #0
    388c:	d017      	beq.n	38be <tc_init+0x142>
		system_pinmux_get_config_defaults(&pin_config);
    388e:	1c3b      	adds	r3, r7, #0
    3890:	3314      	adds	r3, #20
    3892:	1c18      	adds	r0, r3, #0
    3894:	4b8f      	ldr	r3, [pc, #572]	; (3ad4 <tc_init+0x358>)
    3896:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	699b      	ldr	r3, [r3, #24]
    389c:	b2da      	uxtb	r2, r3
    389e:	1c3b      	adds	r3, r7, #0
    38a0:	3314      	adds	r3, #20
    38a2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    38a4:	1c3b      	adds	r3, r7, #0
    38a6:	3314      	adds	r3, #20
    38a8:	2201      	movs	r2, #1
    38aa:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    38ac:	687b      	ldr	r3, [r7, #4]
    38ae:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    38b0:	b2da      	uxtb	r2, r3
    38b2:	1c3b      	adds	r3, r7, #0
    38b4:	3314      	adds	r3, #20
    38b6:	1c10      	adds	r0, r2, #0
    38b8:	1c19      	adds	r1, r3, #0
    38ba:	4b87      	ldr	r3, [pc, #540]	; (3ad8 <tc_init+0x35c>)
    38bc:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	7f1b      	ldrb	r3, [r3, #28]
    38c2:	2b00      	cmp	r3, #0
    38c4:	d017      	beq.n	38f6 <tc_init+0x17a>
		system_pinmux_get_config_defaults(&pin_config);
    38c6:	1c3b      	adds	r3, r7, #0
    38c8:	3314      	adds	r3, #20
    38ca:	1c18      	adds	r0, r3, #0
    38cc:	4b81      	ldr	r3, [pc, #516]	; (3ad4 <tc_init+0x358>)
    38ce:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    38d0:	687b      	ldr	r3, [r7, #4]
    38d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38d4:	b2da      	uxtb	r2, r3
    38d6:	1c3b      	adds	r3, r7, #0
    38d8:	3314      	adds	r3, #20
    38da:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    38dc:	1c3b      	adds	r3, r7, #0
    38de:	3314      	adds	r3, #20
    38e0:	2201      	movs	r2, #1
    38e2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    38e4:	687b      	ldr	r3, [r7, #4]
    38e6:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    38e8:	b2da      	uxtb	r2, r3
    38ea:	1c3b      	adds	r3, r7, #0
    38ec:	3314      	adds	r3, #20
    38ee:	1c10      	adds	r0, r2, #0
    38f0:	1c19      	adds	r1, r3, #0
    38f2:	4b79      	ldr	r3, [pc, #484]	; (3ad8 <tc_init+0x35c>)
    38f4:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    38f6:	1c3b      	adds	r3, r7, #0
    38f8:	3329      	adds	r3, #41	; 0x29
    38fa:	781a      	ldrb	r2, [r3, #0]
    38fc:	1c3b      	adds	r3, r7, #0
    38fe:	3318      	adds	r3, #24
    3900:	0052      	lsls	r2, r2, #1
    3902:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3904:	2002      	movs	r0, #2
    3906:	1c19      	adds	r1, r3, #0
    3908:	4b74      	ldr	r3, [pc, #464]	; (3adc <tc_init+0x360>)
    390a:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    390c:	687b      	ldr	r3, [r7, #4]
    390e:	789b      	ldrb	r3, [r3, #2]
    3910:	2b08      	cmp	r3, #8
    3912:	d10b      	bne.n	392c <tc_init+0x1b0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    3914:	1c3b      	adds	r3, r7, #0
    3916:	3329      	adds	r3, #41	; 0x29
    3918:	781b      	ldrb	r3, [r3, #0]
    391a:	1c5a      	adds	r2, r3, #1
    391c:	1c3b      	adds	r3, r7, #0
    391e:	3318      	adds	r3, #24
    3920:	0052      	lsls	r2, r2, #1
    3922:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3924:	2002      	movs	r0, #2
    3926:	1c19      	adds	r1, r3, #0
    3928:	4b6c      	ldr	r3, [pc, #432]	; (3adc <tc_init+0x360>)
    392a:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    392c:	1c3b      	adds	r3, r7, #0
    392e:	3310      	adds	r3, #16
    3930:	1c18      	adds	r0, r3, #0
    3932:	4b6b      	ldr	r3, [pc, #428]	; (3ae0 <tc_init+0x364>)
    3934:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    3936:	687b      	ldr	r3, [r7, #4]
    3938:	781a      	ldrb	r2, [r3, #0]
    393a:	1c3b      	adds	r3, r7, #0
    393c:	3310      	adds	r3, #16
    393e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    3940:	1c3b      	adds	r3, r7, #0
    3942:	3329      	adds	r3, #41	; 0x29
    3944:	781b      	ldrb	r3, [r3, #0]
    3946:	1c3a      	adds	r2, r7, #0
    3948:	3224      	adds	r2, #36	; 0x24
    394a:	5cd2      	ldrb	r2, [r2, r3]
    394c:	1c3b      	adds	r3, r7, #0
    394e:	3310      	adds	r3, #16
    3950:	1c10      	adds	r0, r2, #0
    3952:	1c19      	adds	r1, r3, #0
    3954:	4b63      	ldr	r3, [pc, #396]	; (3ae4 <tc_init+0x368>)
    3956:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    3958:	1c3b      	adds	r3, r7, #0
    395a:	3329      	adds	r3, #41	; 0x29
    395c:	781b      	ldrb	r3, [r3, #0]
    395e:	1c3a      	adds	r2, r7, #0
    3960:	3224      	adds	r2, #36	; 0x24
    3962:	5cd3      	ldrb	r3, [r2, r3]
    3964:	1c18      	adds	r0, r3, #0
    3966:	4b60      	ldr	r3, [pc, #384]	; (3ae8 <tc_init+0x36c>)
    3968:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    396a:	687b      	ldr	r3, [r7, #4]
    396c:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    3972:	4313      	orrs	r3, r2
    3974:	b2db      	uxtb	r3, r3
    3976:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    397c:	4313      	orrs	r3, r2
    397e:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    3980:	687b      	ldr	r3, [r7, #4]
    3982:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    3984:	1c3b      	adds	r3, r7, #0
    3986:	332e      	adds	r3, #46	; 0x2e
    3988:	430a      	orrs	r2, r1
    398a:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    398c:	687b      	ldr	r3, [r7, #4]
    398e:	785b      	ldrb	r3, [r3, #1]
    3990:	2b00      	cmp	r3, #0
    3992:	d009      	beq.n	39a8 <tc_init+0x22c>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    3994:	1c3b      	adds	r3, r7, #0
    3996:	332e      	adds	r3, #46	; 0x2e
    3998:	1c3a      	adds	r2, r7, #0
    399a:	322e      	adds	r2, #46	; 0x2e
    399c:	8812      	ldrh	r2, [r2, #0]
    399e:	2180      	movs	r1, #128	; 0x80
    39a0:	0109      	lsls	r1, r1, #4
    39a2:	430a      	orrs	r2, r1
    39a4:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    39a6:	e7ff      	b.n	39a8 <tc_init+0x22c>
    39a8:	46c0      	nop			; (mov r8, r8)
    39aa:	68fb      	ldr	r3, [r7, #12]
    39ac:	1c18      	adds	r0, r3, #0
    39ae:	4b4f      	ldr	r3, [pc, #316]	; (3aec <tc_init+0x370>)
    39b0:	4798      	blx	r3
    39b2:	1c03      	adds	r3, r0, #0
    39b4:	2b00      	cmp	r3, #0
    39b6:	d1f8      	bne.n	39aa <tc_init+0x22e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    39b8:	68bb      	ldr	r3, [r7, #8]
    39ba:	1c3a      	adds	r2, r7, #0
    39bc:	322e      	adds	r2, #46	; 0x2e
    39be:	8812      	ldrh	r2, [r2, #0]
    39c0:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    39c2:	687b      	ldr	r3, [r7, #4]
    39c4:	7b5b      	ldrb	r3, [r3, #13]
    39c6:	2b00      	cmp	r3, #0
    39c8:	d003      	beq.n	39d2 <tc_init+0x256>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    39ca:	1c3b      	adds	r3, r7, #0
    39cc:	332d      	adds	r3, #45	; 0x2d
    39ce:	2204      	movs	r2, #4
    39d0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	7b9b      	ldrb	r3, [r3, #14]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d008      	beq.n	39ec <tc_init+0x270>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    39da:	1c3b      	adds	r3, r7, #0
    39dc:	332d      	adds	r3, #45	; 0x2d
    39de:	1c3a      	adds	r2, r7, #0
    39e0:	322d      	adds	r2, #45	; 0x2d
    39e2:	7812      	ldrb	r2, [r2, #0]
    39e4:	2101      	movs	r1, #1
    39e6:	430a      	orrs	r2, r1
    39e8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    39ea:	e7ff      	b.n	39ec <tc_init+0x270>
    39ec:	46c0      	nop			; (mov r8, r8)
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	1c18      	adds	r0, r3, #0
    39f2:	4b3e      	ldr	r3, [pc, #248]	; (3aec <tc_init+0x370>)
    39f4:	4798      	blx	r3
    39f6:	1c03      	adds	r3, r0, #0
    39f8:	2b00      	cmp	r3, #0
    39fa:	d1f8      	bne.n	39ee <tc_init+0x272>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    39fc:	68bb      	ldr	r3, [r7, #8]
    39fe:	22ff      	movs	r2, #255	; 0xff
    3a00:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    3a02:	1c3b      	adds	r3, r7, #0
    3a04:	332d      	adds	r3, #45	; 0x2d
    3a06:	781b      	ldrb	r3, [r3, #0]
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d00c      	beq.n	3a26 <tc_init+0x2aa>
		while (tc_is_syncing(module_inst)) {
    3a0c:	46c0      	nop			; (mov r8, r8)
    3a0e:	68fb      	ldr	r3, [r7, #12]
    3a10:	1c18      	adds	r0, r3, #0
    3a12:	4b36      	ldr	r3, [pc, #216]	; (3aec <tc_init+0x370>)
    3a14:	4798      	blx	r3
    3a16:	1c03      	adds	r3, r0, #0
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d1f8      	bne.n	3a0e <tc_init+0x292>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3a1c:	68bb      	ldr	r3, [r7, #8]
    3a1e:	1c3a      	adds	r2, r7, #0
    3a20:	322d      	adds	r2, #45	; 0x2d
    3a22:	7812      	ldrb	r2, [r2, #0]
    3a24:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    3a26:	1c3b      	adds	r3, r7, #0
    3a28:	332c      	adds	r3, #44	; 0x2c
    3a2a:	687a      	ldr	r2, [r7, #4]
    3a2c:	7a92      	ldrb	r2, [r2, #10]
    3a2e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    3a30:	1c3b      	adds	r3, r7, #0
    3a32:	332a      	adds	r3, #42	; 0x2a
    3a34:	2200      	movs	r2, #0
    3a36:	701a      	strb	r2, [r3, #0]
    3a38:	e01d      	b.n	3a76 <tc_init+0x2fa>
		if (config->enable_capture_on_channel[i] == true) {
    3a3a:	1c3b      	adds	r3, r7, #0
    3a3c:	332a      	adds	r3, #42	; 0x2a
    3a3e:	781b      	ldrb	r3, [r3, #0]
    3a40:	687a      	ldr	r2, [r7, #4]
    3a42:	18d3      	adds	r3, r2, r3
    3a44:	7adb      	ldrb	r3, [r3, #11]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d00e      	beq.n	3a68 <tc_init+0x2ec>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    3a4a:	1c3b      	adds	r3, r7, #0
    3a4c:	332a      	adds	r3, #42	; 0x2a
    3a4e:	781b      	ldrb	r3, [r3, #0]
    3a50:	2210      	movs	r2, #16
    3a52:	1c11      	adds	r1, r2, #0
    3a54:	4099      	lsls	r1, r3
    3a56:	1c0b      	adds	r3, r1, #0
    3a58:	b2d9      	uxtb	r1, r3
    3a5a:	1c3b      	adds	r3, r7, #0
    3a5c:	332c      	adds	r3, #44	; 0x2c
    3a5e:	1c3a      	adds	r2, r7, #0
    3a60:	322c      	adds	r2, #44	; 0x2c
    3a62:	7812      	ldrb	r2, [r2, #0]
    3a64:	430a      	orrs	r2, r1
    3a66:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    3a68:	1c3b      	adds	r3, r7, #0
    3a6a:	332a      	adds	r3, #42	; 0x2a
    3a6c:	781a      	ldrb	r2, [r3, #0]
    3a6e:	1c3b      	adds	r3, r7, #0
    3a70:	332a      	adds	r3, #42	; 0x2a
    3a72:	3201      	adds	r2, #1
    3a74:	701a      	strb	r2, [r3, #0]
    3a76:	1c3b      	adds	r3, r7, #0
    3a78:	332a      	adds	r3, #42	; 0x2a
    3a7a:	781b      	ldrb	r3, [r3, #0]
    3a7c:	2b01      	cmp	r3, #1
    3a7e:	d9dc      	bls.n	3a3a <tc_init+0x2be>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3a80:	46c0      	nop			; (mov r8, r8)
    3a82:	68fb      	ldr	r3, [r7, #12]
    3a84:	1c18      	adds	r0, r3, #0
    3a86:	4b19      	ldr	r3, [pc, #100]	; (3aec <tc_init+0x370>)
    3a88:	4798      	blx	r3
    3a8a:	1c03      	adds	r3, r0, #0
    3a8c:	2b00      	cmp	r3, #0
    3a8e:	d1f8      	bne.n	3a82 <tc_init+0x306>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    3a90:	68bb      	ldr	r3, [r7, #8]
    3a92:	1c3a      	adds	r2, r7, #0
    3a94:	322c      	adds	r2, #44	; 0x2c
    3a96:	7812      	ldrb	r2, [r2, #0]
    3a98:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	68fb      	ldr	r3, [r7, #12]
    3a9e:	1c18      	adds	r0, r3, #0
    3aa0:	4b12      	ldr	r3, [pc, #72]	; (3aec <tc_init+0x370>)
    3aa2:	4798      	blx	r3
    3aa4:	1c03      	adds	r3, r0, #0
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d1f8      	bne.n	3a9c <tc_init+0x320>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    3aaa:	68fb      	ldr	r3, [r7, #12]
    3aac:	791b      	ldrb	r3, [r3, #4]
    3aae:	2b04      	cmp	r3, #4
    3ab0:	d01e      	beq.n	3af0 <tc_init+0x374>
    3ab2:	2b08      	cmp	r3, #8
    3ab4:	d100      	bne.n	3ab8 <tc_init+0x33c>
    3ab6:	e077      	b.n	3ba8 <tc_init+0x42c>
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d04f      	beq.n	3b5c <tc_init+0x3e0>
    3abc:	e09a      	b.n	3bf4 <tc_init+0x478>
    3abe:	46c0      	nop			; (mov r8, r8)
    3ac0:	00003731 	.word	0x00003731
    3ac4:	000064a8 	.word	0x000064a8
    3ac8:	0000621d 	.word	0x0000621d
    3acc:	000064b0 	.word	0x000064b0
    3ad0:	2000013c 	.word	0x2000013c
    3ad4:	000036a9 	.word	0x000036a9
    3ad8:	000056a5 	.word	0x000056a5
    3adc:	0000364d 	.word	0x0000364d
    3ae0:	00003639 	.word	0x00003639
    3ae4:	000053c1 	.word	0x000053c1
    3ae8:	00005401 	.word	0x00005401
    3aec:	000036d1 	.word	0x000036d1
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    3af0:	46c0      	nop			; (mov r8, r8)
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	1c18      	adds	r0, r3, #0
    3af6:	4b42      	ldr	r3, [pc, #264]	; (3c00 <tc_init+0x484>)
    3af8:	4798      	blx	r3
    3afa:	1c03      	adds	r3, r0, #0
    3afc:	2b00      	cmp	r3, #0
    3afe:	d1f8      	bne.n	3af2 <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    3b00:	687a      	ldr	r2, [r7, #4]
    3b02:	2328      	movs	r3, #40	; 0x28
    3b04:	5cd2      	ldrb	r2, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    3b06:	68bb      	ldr	r3, [r7, #8]
    3b08:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    3b0a:	46c0      	nop			; (mov r8, r8)
    3b0c:	68fb      	ldr	r3, [r7, #12]
    3b0e:	1c18      	adds	r0, r3, #0
    3b10:	4b3b      	ldr	r3, [pc, #236]	; (3c00 <tc_init+0x484>)
    3b12:	4798      	blx	r3
    3b14:	1c03      	adds	r3, r0, #0
    3b16:	2b00      	cmp	r3, #0
    3b18:	d1f8      	bne.n	3b0c <tc_init+0x390>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    3b1a:	687a      	ldr	r2, [r7, #4]
    3b1c:	2329      	movs	r3, #41	; 0x29
    3b1e:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    3b20:	68bb      	ldr	r3, [r7, #8]
    3b22:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    3b24:	46c0      	nop			; (mov r8, r8)
    3b26:	68fb      	ldr	r3, [r7, #12]
    3b28:	1c18      	adds	r0, r3, #0
    3b2a:	4b35      	ldr	r3, [pc, #212]	; (3c00 <tc_init+0x484>)
    3b2c:	4798      	blx	r3
    3b2e:	1c03      	adds	r3, r0, #0
    3b30:	2b00      	cmp	r3, #0
    3b32:	d1f8      	bne.n	3b26 <tc_init+0x3aa>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    3b34:	687a      	ldr	r2, [r7, #4]
    3b36:	232a      	movs	r3, #42	; 0x2a
    3b38:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    3b3a:	68bb      	ldr	r3, [r7, #8]
    3b3c:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3b3e:	46c0      	nop			; (mov r8, r8)
    3b40:	68fb      	ldr	r3, [r7, #12]
    3b42:	1c18      	adds	r0, r3, #0
    3b44:	4b2e      	ldr	r3, [pc, #184]	; (3c00 <tc_init+0x484>)
    3b46:	4798      	blx	r3
    3b48:	1c03      	adds	r3, r0, #0
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d1f8      	bne.n	3b40 <tc_init+0x3c4>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    3b4e:	687a      	ldr	r2, [r7, #4]
    3b50:	232b      	movs	r3, #43	; 0x2b
    3b52:	5cd2      	ldrb	r2, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    3b54:	68bb      	ldr	r3, [r7, #8]
    3b56:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    3b58:	2300      	movs	r3, #0
    3b5a:	e04c      	b.n	3bf6 <tc_init+0x47a>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    3b5c:	46c0      	nop			; (mov r8, r8)
    3b5e:	68fb      	ldr	r3, [r7, #12]
    3b60:	1c18      	adds	r0, r3, #0
    3b62:	4b27      	ldr	r3, [pc, #156]	; (3c00 <tc_init+0x484>)
    3b64:	4798      	blx	r3
    3b66:	1c03      	adds	r3, r0, #0
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d1f8      	bne.n	3b5e <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    3b6c:	687b      	ldr	r3, [r7, #4]
    3b6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    3b70:	68bb      	ldr	r3, [r7, #8]
    3b72:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    3b74:	46c0      	nop			; (mov r8, r8)
    3b76:	68fb      	ldr	r3, [r7, #12]
    3b78:	1c18      	adds	r0, r3, #0
    3b7a:	4b21      	ldr	r3, [pc, #132]	; (3c00 <tc_init+0x484>)
    3b7c:	4798      	blx	r3
    3b7e:	1c03      	adds	r3, r0, #0
    3b80:	2b00      	cmp	r3, #0
    3b82:	d1f8      	bne.n	3b76 <tc_init+0x3fa>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    3b84:	687b      	ldr	r3, [r7, #4]
    3b86:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    3b88:	68bb      	ldr	r3, [r7, #8]
    3b8a:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3b8c:	46c0      	nop			; (mov r8, r8)
    3b8e:	68fb      	ldr	r3, [r7, #12]
    3b90:	1c18      	adds	r0, r3, #0
    3b92:	4b1b      	ldr	r3, [pc, #108]	; (3c00 <tc_init+0x484>)
    3b94:	4798      	blx	r3
    3b96:	1c03      	adds	r3, r0, #0
    3b98:	2b00      	cmp	r3, #0
    3b9a:	d1f8      	bne.n	3b8e <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    3b9c:	687b      	ldr	r3, [r7, #4]
    3b9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    3ba0:	68bb      	ldr	r3, [r7, #8]
    3ba2:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    3ba4:	2300      	movs	r3, #0
    3ba6:	e026      	b.n	3bf6 <tc_init+0x47a>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    3ba8:	46c0      	nop			; (mov r8, r8)
    3baa:	68fb      	ldr	r3, [r7, #12]
    3bac:	1c18      	adds	r0, r3, #0
    3bae:	4b14      	ldr	r3, [pc, #80]	; (3c00 <tc_init+0x484>)
    3bb0:	4798      	blx	r3
    3bb2:	1c03      	adds	r3, r0, #0
    3bb4:	2b00      	cmp	r3, #0
    3bb6:	d1f8      	bne.n	3baa <tc_init+0x42e>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    3bb8:	687b      	ldr	r3, [r7, #4]
    3bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bbc:	68bb      	ldr	r3, [r7, #8]
    3bbe:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    3bc0:	46c0      	nop			; (mov r8, r8)
    3bc2:	68fb      	ldr	r3, [r7, #12]
    3bc4:	1c18      	adds	r0, r3, #0
    3bc6:	4b0e      	ldr	r3, [pc, #56]	; (3c00 <tc_init+0x484>)
    3bc8:	4798      	blx	r3
    3bca:	1c03      	adds	r3, r0, #0
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d1f8      	bne.n	3bc2 <tc_init+0x446>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    3bd0:	687b      	ldr	r3, [r7, #4]
    3bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    3bd4:	68bb      	ldr	r3, [r7, #8]
    3bd6:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3bd8:	46c0      	nop			; (mov r8, r8)
    3bda:	68fb      	ldr	r3, [r7, #12]
    3bdc:	1c18      	adds	r0, r3, #0
    3bde:	4b08      	ldr	r3, [pc, #32]	; (3c00 <tc_init+0x484>)
    3be0:	4798      	blx	r3
    3be2:	1c03      	adds	r3, r0, #0
    3be4:	2b00      	cmp	r3, #0
    3be6:	d1f8      	bne.n	3bda <tc_init+0x45e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    3be8:	687b      	ldr	r3, [r7, #4]
    3bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    3bec:	68bb      	ldr	r3, [r7, #8]
    3bee:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    3bf0:	2300      	movs	r3, #0
    3bf2:	e000      	b.n	3bf6 <tc_init+0x47a>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    3bf4:	2317      	movs	r3, #23
}
    3bf6:	1c18      	adds	r0, r3, #0
    3bf8:	46bd      	mov	sp, r7
    3bfa:	b00d      	add	sp, #52	; 0x34
    3bfc:	bd90      	pop	{r4, r7, pc}
    3bfe:	46c0      	nop			; (mov r8, r8)
    3c00:	000036d1 	.word	0x000036d1

00003c04 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b084      	sub	sp, #16
    3c08:	af00      	add	r7, sp, #0
    3c0a:	6078      	str	r0, [r7, #4]
    3c0c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3c14:	46c0      	nop			; (mov r8, r8)
    3c16:	687b      	ldr	r3, [r7, #4]
    3c18:	1c18      	adds	r0, r3, #0
    3c1a:	4b12      	ldr	r3, [pc, #72]	; (3c64 <tc_set_count_value+0x60>)
    3c1c:	4798      	blx	r3
    3c1e:	1c03      	adds	r3, r0, #0
    3c20:	2b00      	cmp	r3, #0
    3c22:	d1f8      	bne.n	3c16 <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    3c24:	687b      	ldr	r3, [r7, #4]
    3c26:	791b      	ldrb	r3, [r3, #4]
    3c28:	2b04      	cmp	r3, #4
    3c2a:	d004      	beq.n	3c36 <tc_set_count_value+0x32>
    3c2c:	2b08      	cmp	r3, #8
    3c2e:	d00e      	beq.n	3c4e <tc_set_count_value+0x4a>
    3c30:	2b00      	cmp	r3, #0
    3c32:	d006      	beq.n	3c42 <tc_set_count_value+0x3e>
    3c34:	e010      	b.n	3c58 <tc_set_count_value+0x54>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    3c36:	683b      	ldr	r3, [r7, #0]
    3c38:	b2da      	uxtb	r2, r3
    3c3a:	68fb      	ldr	r3, [r7, #12]
    3c3c:	741a      	strb	r2, [r3, #16]
			return STATUS_OK;
    3c3e:	2300      	movs	r3, #0
    3c40:	e00b      	b.n	3c5a <tc_set_count_value+0x56>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    3c42:	683b      	ldr	r3, [r7, #0]
    3c44:	b29a      	uxth	r2, r3
    3c46:	68fb      	ldr	r3, [r7, #12]
    3c48:	821a      	strh	r2, [r3, #16]
			return STATUS_OK;
    3c4a:	2300      	movs	r3, #0
    3c4c:	e005      	b.n	3c5a <tc_set_count_value+0x56>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    3c4e:	68fb      	ldr	r3, [r7, #12]
    3c50:	683a      	ldr	r2, [r7, #0]
    3c52:	611a      	str	r2, [r3, #16]
			return STATUS_OK;
    3c54:	2300      	movs	r3, #0
    3c56:	e000      	b.n	3c5a <tc_set_count_value+0x56>

		default:
			return STATUS_ERR_INVALID_ARG;
    3c58:	2317      	movs	r3, #23
	}
}
    3c5a:	1c18      	adds	r0, r3, #0
    3c5c:	46bd      	mov	sp, r7
    3c5e:	b004      	add	sp, #16
    3c60:	bd80      	pop	{r7, pc}
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	000036d1 	.word	0x000036d1

00003c68 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    3c68:	b580      	push	{r7, lr}
    3c6a:	b084      	sub	sp, #16
    3c6c:	af00      	add	r7, sp, #0
    3c6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	681b      	ldr	r3, [r3, #0]
    3c74:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    3c76:	46c0      	nop			; (mov r8, r8)
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	1c18      	adds	r0, r3, #0
    3c7c:	4b0e      	ldr	r3, [pc, #56]	; (3cb8 <tc_get_count_value+0x50>)
    3c7e:	4798      	blx	r3
    3c80:	1c03      	adds	r3, r0, #0
    3c82:	2b00      	cmp	r3, #0
    3c84:	d1f8      	bne.n	3c78 <tc_get_count_value+0x10>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	791b      	ldrb	r3, [r3, #4]
    3c8a:	2b04      	cmp	r3, #4
    3c8c:	d004      	beq.n	3c98 <tc_get_count_value+0x30>
    3c8e:	2b08      	cmp	r3, #8
    3c90:	d00a      	beq.n	3ca8 <tc_get_count_value+0x40>
    3c92:	2b00      	cmp	r3, #0
    3c94:	d004      	beq.n	3ca0 <tc_get_count_value+0x38>
    3c96:	e00a      	b.n	3cae <tc_get_count_value+0x46>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    3c98:	68fb      	ldr	r3, [r7, #12]
    3c9a:	7c1b      	ldrb	r3, [r3, #16]
    3c9c:	b2db      	uxtb	r3, r3
    3c9e:	e007      	b.n	3cb0 <tc_get_count_value+0x48>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    3ca0:	68fb      	ldr	r3, [r7, #12]
    3ca2:	8a1b      	ldrh	r3, [r3, #16]
    3ca4:	b29b      	uxth	r3, r3
    3ca6:	e003      	b.n	3cb0 <tc_get_count_value+0x48>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    3ca8:	68fb      	ldr	r3, [r7, #12]
    3caa:	691b      	ldr	r3, [r3, #16]
    3cac:	e000      	b.n	3cb0 <tc_get_count_value+0x48>
	}

	Assert(false);
	return 0;
    3cae:	2300      	movs	r3, #0
}
    3cb0:	1c18      	adds	r0, r3, #0
    3cb2:	46bd      	mov	sp, r7
    3cb4:	b004      	add	sp, #16
    3cb6:	bd80      	pop	{r7, pc}
    3cb8:	000036d1 	.word	0x000036d1

00003cbc <tc_reset>:
 *                                     the function. Only use reset on master
 *                                     TC
 */
enum status_code tc_reset(
		const struct tc_module *const module_inst)
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b084      	sub	sp, #16
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments  */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	681b      	ldr	r3, [r3, #0]
    3cc8:	60fb      	str	r3, [r7, #12]

	if (tc_module->STATUS.reg & TC_STATUS_SLAVE) {
    3cca:	68fb      	ldr	r3, [r7, #12]
    3ccc:	7bdb      	ldrb	r3, [r3, #15]
    3cce:	b2db      	uxtb	r3, r3
    3cd0:	1c1a      	adds	r2, r3, #0
    3cd2:	2310      	movs	r3, #16
    3cd4:	4013      	ands	r3, r2
    3cd6:	d001      	beq.n	3cdc <tc_reset+0x20>
		return STATUS_ERR_UNSUPPORTED_DEV;
    3cd8:	2315      	movs	r3, #21
    3cda:	e01b      	b.n	3d14 <tc_reset+0x58>
	}

	/* Disable this module if it is running */
	if (tc_module->CTRLA.reg & TC_CTRLA_ENABLE) {
    3cdc:	68fb      	ldr	r3, [r7, #12]
    3cde:	881b      	ldrh	r3, [r3, #0]
    3ce0:	b29b      	uxth	r3, r3
    3ce2:	1c1a      	adds	r2, r3, #0
    3ce4:	2302      	movs	r3, #2
    3ce6:	4013      	ands	r3, r2
    3ce8:	d00b      	beq.n	3d02 <tc_reset+0x46>
		tc_disable(module_inst);
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	1c18      	adds	r0, r3, #0
    3cee:	4b0b      	ldr	r3, [pc, #44]	; (3d1c <tc_reset+0x60>)
    3cf0:	4798      	blx	r3
		while (tc_is_syncing(module_inst)) {
    3cf2:	46c0      	nop			; (mov r8, r8)
    3cf4:	687b      	ldr	r3, [r7, #4]
    3cf6:	1c18      	adds	r0, r3, #0
    3cf8:	4b09      	ldr	r3, [pc, #36]	; (3d20 <tc_reset+0x64>)
    3cfa:	4798      	blx	r3
    3cfc:	1c03      	adds	r3, r0, #0
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d1f8      	bne.n	3cf4 <tc_reset+0x38>
			/* wait while module is disabling */
		}
	}

	/* Reset this TC module */
	tc_module->CTRLA.reg  |= TC_CTRLA_SWRST;
    3d02:	68fb      	ldr	r3, [r7, #12]
    3d04:	881b      	ldrh	r3, [r3, #0]
    3d06:	b29b      	uxth	r3, r3
    3d08:	2201      	movs	r2, #1
    3d0a:	4313      	orrs	r3, r2
    3d0c:	b29a      	uxth	r2, r3
    3d0e:	68fb      	ldr	r3, [r7, #12]
    3d10:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    3d12:	2300      	movs	r3, #0
}
    3d14:	1c18      	adds	r0, r3, #0
    3d16:	46bd      	mov	sp, r7
    3d18:	b004      	add	sp, #16
    3d1a:	bd80      	pop	{r7, pc}
    3d1c:	000036f9 	.word	0x000036f9
    3d20:	000036d1 	.word	0x000036d1

00003d24 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    3d24:	b580      	push	{r7, lr}
    3d26:	b084      	sub	sp, #16
    3d28:	af00      	add	r7, sp, #0
    3d2a:	60f8      	str	r0, [r7, #12]
    3d2c:	60b9      	str	r1, [r7, #8]
    3d2e:	1dfb      	adds	r3, r7, #7
    3d30:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3d32:	1dfb      	adds	r3, r7, #7
    3d34:	781a      	ldrb	r2, [r3, #0]
    3d36:	68fb      	ldr	r3, [r7, #12]
    3d38:	3202      	adds	r2, #2
    3d3a:	0092      	lsls	r2, r2, #2
    3d3c:	68b9      	ldr	r1, [r7, #8]
    3d3e:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    3d40:	1dfb      	adds	r3, r7, #7
    3d42:	781b      	ldrb	r3, [r3, #0]
    3d44:	2b02      	cmp	r3, #2
    3d46:	d107      	bne.n	3d58 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    3d48:	68fb      	ldr	r3, [r7, #12]
    3d4a:	7e1b      	ldrb	r3, [r3, #24]
    3d4c:	2210      	movs	r2, #16
    3d4e:	4313      	orrs	r3, r2
    3d50:	b2da      	uxtb	r2, r3
    3d52:	68fb      	ldr	r3, [r7, #12]
    3d54:	761a      	strb	r2, [r3, #24]
    3d56:	e01a      	b.n	3d8e <tc_register_callback+0x6a>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    3d58:	1dfb      	adds	r3, r7, #7
    3d5a:	781b      	ldrb	r3, [r3, #0]
    3d5c:	2b03      	cmp	r3, #3
    3d5e:	d107      	bne.n	3d70 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    3d60:	68fb      	ldr	r3, [r7, #12]
    3d62:	7e1b      	ldrb	r3, [r3, #24]
    3d64:	2220      	movs	r2, #32
    3d66:	4313      	orrs	r3, r2
    3d68:	b2da      	uxtb	r2, r3
    3d6a:	68fb      	ldr	r3, [r7, #12]
    3d6c:	761a      	strb	r2, [r3, #24]
    3d6e:	e00e      	b.n	3d8e <tc_register_callback+0x6a>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    3d70:	68fb      	ldr	r3, [r7, #12]
    3d72:	7e1b      	ldrb	r3, [r3, #24]
    3d74:	b2da      	uxtb	r2, r3
    3d76:	1dfb      	adds	r3, r7, #7
    3d78:	781b      	ldrb	r3, [r3, #0]
    3d7a:	2101      	movs	r1, #1
    3d7c:	1c08      	adds	r0, r1, #0
    3d7e:	4098      	lsls	r0, r3
    3d80:	1c03      	adds	r3, r0, #0
    3d82:	b2db      	uxtb	r3, r3
    3d84:	4313      	orrs	r3, r2
    3d86:	b2db      	uxtb	r3, r3
    3d88:	b2da      	uxtb	r2, r3
    3d8a:	68fb      	ldr	r3, [r7, #12]
    3d8c:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    3d8e:	2300      	movs	r3, #0
}
    3d90:	1c18      	adds	r0, r3, #0
    3d92:	46bd      	mov	sp, r7
    3d94:	b004      	add	sp, #16
    3d96:	bd80      	pop	{r7, pc}

00003d98 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3d98:	b580      	push	{r7, lr}
    3d9a:	af00      	add	r7, sp, #0
    3d9c:	2000      	movs	r0, #0
    3d9e:	4b02      	ldr	r3, [pc, #8]	; (3da8 <TC3_Handler+0x10>)
    3da0:	4798      	blx	r3
    3da2:	46bd      	mov	sp, r7
    3da4:	bd80      	pop	{r7, pc}
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	00003dfd 	.word	0x00003dfd

00003dac <TC4_Handler>:
    3dac:	b580      	push	{r7, lr}
    3dae:	af00      	add	r7, sp, #0
    3db0:	2001      	movs	r0, #1
    3db2:	4b02      	ldr	r3, [pc, #8]	; (3dbc <TC4_Handler+0x10>)
    3db4:	4798      	blx	r3
    3db6:	46bd      	mov	sp, r7
    3db8:	bd80      	pop	{r7, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	00003dfd 	.word	0x00003dfd

00003dc0 <TC5_Handler>:
    3dc0:	b580      	push	{r7, lr}
    3dc2:	af00      	add	r7, sp, #0
    3dc4:	2002      	movs	r0, #2
    3dc6:	4b02      	ldr	r3, [pc, #8]	; (3dd0 <TC5_Handler+0x10>)
    3dc8:	4798      	blx	r3
    3dca:	46bd      	mov	sp, r7
    3dcc:	bd80      	pop	{r7, pc}
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	00003dfd 	.word	0x00003dfd

00003dd4 <TC6_Handler>:
    3dd4:	b580      	push	{r7, lr}
    3dd6:	af00      	add	r7, sp, #0
    3dd8:	2003      	movs	r0, #3
    3dda:	4b02      	ldr	r3, [pc, #8]	; (3de4 <TC6_Handler+0x10>)
    3ddc:	4798      	blx	r3
    3dde:	46bd      	mov	sp, r7
    3de0:	bd80      	pop	{r7, pc}
    3de2:	46c0      	nop			; (mov r8, r8)
    3de4:	00003dfd 	.word	0x00003dfd

00003de8 <TC7_Handler>:
    3de8:	b580      	push	{r7, lr}
    3dea:	af00      	add	r7, sp, #0
    3dec:	2004      	movs	r0, #4
    3dee:	4b02      	ldr	r3, [pc, #8]	; (3df8 <TC7_Handler+0x10>)
    3df0:	4798      	blx	r3
    3df2:	46bd      	mov	sp, r7
    3df4:	bd80      	pop	{r7, pc}
    3df6:	46c0      	nop			; (mov r8, r8)
    3df8:	00003dfd 	.word	0x00003dfd

00003dfc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3dfc:	b580      	push	{r7, lr}
    3dfe:	b084      	sub	sp, #16
    3e00:	af00      	add	r7, sp, #0
    3e02:	1c02      	adds	r2, r0, #0
    3e04:	1dfb      	adds	r3, r7, #7
    3e06:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    3e08:	1dfb      	adds	r3, r7, #7
    3e0a:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    3e0c:	4b28      	ldr	r3, [pc, #160]	; (3eb0 <_tc_interrupt_handler+0xb4>)
    3e0e:	0092      	lsls	r2, r2, #2
    3e10:	58d3      	ldr	r3, [r2, r3]
    3e12:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3e14:	68fb      	ldr	r3, [r7, #12]
    3e16:	681b      	ldr	r3, [r3, #0]
    3e18:	7b9b      	ldrb	r3, [r3, #14]
    3e1a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3e1c:	68fa      	ldr	r2, [r7, #12]
    3e1e:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3e20:	4013      	ands	r3, r2
    3e22:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3e28:	1c3b      	adds	r3, r7, #0
    3e2a:	330b      	adds	r3, #11
    3e2c:	400a      	ands	r2, r1
    3e2e:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3e30:	1c3b      	adds	r3, r7, #0
    3e32:	330b      	adds	r3, #11
    3e34:	781a      	ldrb	r2, [r3, #0]
    3e36:	2301      	movs	r3, #1
    3e38:	4013      	ands	r3, r2
    3e3a:	d008      	beq.n	3e4e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3e3c:	68fb      	ldr	r3, [r7, #12]
    3e3e:	689b      	ldr	r3, [r3, #8]
    3e40:	68fa      	ldr	r2, [r7, #12]
    3e42:	1c10      	adds	r0, r2, #0
    3e44:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3e46:	68fb      	ldr	r3, [r7, #12]
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	2201      	movs	r2, #1
    3e4c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3e4e:	1c3b      	adds	r3, r7, #0
    3e50:	330b      	adds	r3, #11
    3e52:	781a      	ldrb	r2, [r3, #0]
    3e54:	2302      	movs	r3, #2
    3e56:	4013      	ands	r3, r2
    3e58:	d008      	beq.n	3e6c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    3e5a:	68fb      	ldr	r3, [r7, #12]
    3e5c:	68db      	ldr	r3, [r3, #12]
    3e5e:	68fa      	ldr	r2, [r7, #12]
    3e60:	1c10      	adds	r0, r2, #0
    3e62:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3e64:	68fb      	ldr	r3, [r7, #12]
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	2202      	movs	r2, #2
    3e6a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3e6c:	1c3b      	adds	r3, r7, #0
    3e6e:	330b      	adds	r3, #11
    3e70:	781a      	ldrb	r2, [r3, #0]
    3e72:	2310      	movs	r3, #16
    3e74:	4013      	ands	r3, r2
    3e76:	d008      	beq.n	3e8a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    3e78:	68fb      	ldr	r3, [r7, #12]
    3e7a:	691b      	ldr	r3, [r3, #16]
    3e7c:	68fa      	ldr	r2, [r7, #12]
    3e7e:	1c10      	adds	r0, r2, #0
    3e80:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3e82:	68fb      	ldr	r3, [r7, #12]
    3e84:	681b      	ldr	r3, [r3, #0]
    3e86:	2210      	movs	r2, #16
    3e88:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3e8a:	1c3b      	adds	r3, r7, #0
    3e8c:	330b      	adds	r3, #11
    3e8e:	781a      	ldrb	r2, [r3, #0]
    3e90:	2320      	movs	r3, #32
    3e92:	4013      	ands	r3, r2
    3e94:	d008      	beq.n	3ea8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3e96:	68fb      	ldr	r3, [r7, #12]
    3e98:	695b      	ldr	r3, [r3, #20]
    3e9a:	68fa      	ldr	r2, [r7, #12]
    3e9c:	1c10      	adds	r0, r2, #0
    3e9e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3ea0:	68fb      	ldr	r3, [r7, #12]
    3ea2:	681b      	ldr	r3, [r3, #0]
    3ea4:	2220      	movs	r2, #32
    3ea6:	739a      	strb	r2, [r3, #14]
	}
}
    3ea8:	46bd      	mov	sp, r7
    3eaa:	b004      	add	sp, #16
    3eac:	bd80      	pop	{r7, pc}
    3eae:	46c0      	nop			; (mov r8, r8)
    3eb0:	2000013c 	.word	0x2000013c

00003eb4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3eb4:	b580      	push	{r7, lr}
    3eb6:	b082      	sub	sp, #8
    3eb8:	af00      	add	r7, sp, #0
    3eba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	2280      	movs	r2, #128	; 0x80
    3ec0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3ec2:	687b      	ldr	r3, [r7, #4]
    3ec4:	2200      	movs	r2, #0
    3ec6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ec8:	687b      	ldr	r3, [r7, #4]
    3eca:	2201      	movs	r2, #1
    3ecc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	2200      	movs	r2, #0
    3ed2:	70da      	strb	r2, [r3, #3]
}
    3ed4:	46bd      	mov	sp, r7
    3ed6:	b002      	add	sp, #8
    3ed8:	bd80      	pop	{r7, pc}
    3eda:	46c0      	nop			; (mov r8, r8)

00003edc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b084      	sub	sp, #16
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	1c02      	adds	r2, r0, #0
    3ee4:	1dfb      	adds	r3, r7, #7
    3ee6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3ee8:	1c3b      	adds	r3, r7, #0
    3eea:	330f      	adds	r3, #15
    3eec:	1dfa      	adds	r2, r7, #7
    3eee:	7812      	ldrb	r2, [r2, #0]
    3ef0:	09d2      	lsrs	r2, r2, #7
    3ef2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3ef4:	1c3b      	adds	r3, r7, #0
    3ef6:	330e      	adds	r3, #14
    3ef8:	1dfa      	adds	r2, r7, #7
    3efa:	7812      	ldrb	r2, [r2, #0]
    3efc:	0952      	lsrs	r2, r2, #5
    3efe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3f00:	4b0d      	ldr	r3, [pc, #52]	; (3f38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3f02:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3f04:	1c3b      	adds	r3, r7, #0
    3f06:	330f      	adds	r3, #15
    3f08:	781b      	ldrb	r3, [r3, #0]
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d10e      	bne.n	3f2c <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    3f0e:	1c3b      	adds	r3, r7, #0
    3f10:	330f      	adds	r3, #15
    3f12:	781b      	ldrb	r3, [r3, #0]
    3f14:	009b      	lsls	r3, r3, #2
    3f16:	2210      	movs	r2, #16
    3f18:	19d2      	adds	r2, r2, r7
    3f1a:	18d3      	adds	r3, r2, r3
    3f1c:	3b08      	subs	r3, #8
    3f1e:	681a      	ldr	r2, [r3, #0]
    3f20:	1c3b      	adds	r3, r7, #0
    3f22:	330e      	adds	r3, #14
    3f24:	781b      	ldrb	r3, [r3, #0]
    3f26:	01db      	lsls	r3, r3, #7
    3f28:	18d3      	adds	r3, r2, r3
    3f2a:	e000      	b.n	3f2e <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    3f2c:	2300      	movs	r3, #0
	}
}
    3f2e:	1c18      	adds	r0, r3, #0
    3f30:	46bd      	mov	sp, r7
    3f32:	b004      	add	sp, #16
    3f34:	bd80      	pop	{r7, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	41004400 	.word	0x41004400

00003f3c <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    3f3c:	b580      	push	{r7, lr}
    3f3e:	b086      	sub	sp, #24
    3f40:	af00      	add	r7, sp, #0
    3f42:	1c02      	adds	r2, r0, #0
    3f44:	1dfb      	adds	r3, r7, #7
    3f46:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3f48:	1dfb      	adds	r3, r7, #7
    3f4a:	781b      	ldrb	r3, [r3, #0]
    3f4c:	1c18      	adds	r0, r3, #0
    3f4e:	4b19      	ldr	r3, [pc, #100]	; (3fb4 <system_pinmux_pin_get_mux_position+0x78>)
    3f50:	4798      	blx	r3
    3f52:	1c03      	adds	r3, r0, #0
    3f54:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    3f56:	1dfb      	adds	r3, r7, #7
    3f58:	781a      	ldrb	r2, [r3, #0]
    3f5a:	231f      	movs	r3, #31
    3f5c:	4013      	ands	r3, r2
    3f5e:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3f60:	6979      	ldr	r1, [r7, #20]
    3f62:	2340      	movs	r3, #64	; 0x40
    3f64:	693a      	ldr	r2, [r7, #16]
    3f66:	188a      	adds	r2, r1, r2
    3f68:	18d3      	adds	r3, r2, r3
    3f6a:	781b      	ldrb	r3, [r3, #0]
    3f6c:	b2db      	uxtb	r3, r3
    3f6e:	1c1a      	adds	r2, r3, #0
    3f70:	2301      	movs	r3, #1
    3f72:	4013      	ands	r3, r2
    3f74:	d101      	bne.n	3f7a <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    3f76:	2380      	movs	r3, #128	; 0x80
    3f78:	e017      	b.n	3faa <system_pinmux_pin_get_mux_position+0x6e>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3f7a:	693b      	ldr	r3, [r7, #16]
    3f7c:	085a      	lsrs	r2, r3, #1
    3f7e:	6979      	ldr	r1, [r7, #20]
    3f80:	2330      	movs	r3, #48	; 0x30
    3f82:	188a      	adds	r2, r1, r2
    3f84:	18d3      	adds	r3, r2, r3
    3f86:	781b      	ldrb	r3, [r3, #0]
    3f88:	b2db      	uxtb	r3, r3
    3f8a:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    3f8c:	693a      	ldr	r2, [r7, #16]
    3f8e:	2301      	movs	r3, #1
    3f90:	4013      	ands	r3, r2
    3f92:	d005      	beq.n	3fa0 <system_pinmux_pin_get_mux_position+0x64>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    3f94:	68fa      	ldr	r2, [r7, #12]
    3f96:	23f0      	movs	r3, #240	; 0xf0
    3f98:	4013      	ands	r3, r2
    3f9a:	091b      	lsrs	r3, r3, #4
    3f9c:	b2db      	uxtb	r3, r3
    3f9e:	e004      	b.n	3faa <system_pinmux_pin_get_mux_position+0x6e>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    3fa0:	68fb      	ldr	r3, [r7, #12]
    3fa2:	b2da      	uxtb	r2, r3
    3fa4:	230f      	movs	r3, #15
    3fa6:	4013      	ands	r3, r2
    3fa8:	b2db      	uxtb	r3, r3
	}
}
    3faa:	1c18      	adds	r0, r3, #0
    3fac:	46bd      	mov	sp, r7
    3fae:	b006      	add	sp, #24
    3fb0:	bd80      	pop	{r7, pc}
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	00003edd 	.word	0x00003edd

00003fb8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3fb8:	b580      	push	{r7, lr}
    3fba:	b082      	sub	sp, #8
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3fc0:	687b      	ldr	r3, [r7, #4]
    3fc2:	2200      	movs	r2, #0
    3fc4:	701a      	strb	r2, [r3, #0]
}
    3fc6:	46bd      	mov	sp, r7
    3fc8:	b002      	add	sp, #8
    3fca:	bd80      	pop	{r7, pc}

00003fcc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3fcc:	b580      	push	{r7, lr}
    3fce:	b082      	sub	sp, #8
    3fd0:	af00      	add	r7, sp, #0
    3fd2:	1c02      	adds	r2, r0, #0
    3fd4:	6039      	str	r1, [r7, #0]
    3fd6:	1dfb      	adds	r3, r7, #7
    3fd8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3fda:	1dfb      	adds	r3, r7, #7
    3fdc:	781b      	ldrb	r3, [r3, #0]
    3fde:	2b01      	cmp	r3, #1
    3fe0:	d00a      	beq.n	3ff8 <system_apb_clock_set_mask+0x2c>
    3fe2:	2b02      	cmp	r3, #2
    3fe4:	d00f      	beq.n	4006 <system_apb_clock_set_mask+0x3a>
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d114      	bne.n	4014 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3fea:	4b0e      	ldr	r3, [pc, #56]	; (4024 <system_apb_clock_set_mask+0x58>)
    3fec:	4a0d      	ldr	r2, [pc, #52]	; (4024 <system_apb_clock_set_mask+0x58>)
    3fee:	6991      	ldr	r1, [r2, #24]
    3ff0:	683a      	ldr	r2, [r7, #0]
    3ff2:	430a      	orrs	r2, r1
    3ff4:	619a      	str	r2, [r3, #24]
			break;
    3ff6:	e00f      	b.n	4018 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3ff8:	4b0a      	ldr	r3, [pc, #40]	; (4024 <system_apb_clock_set_mask+0x58>)
    3ffa:	4a0a      	ldr	r2, [pc, #40]	; (4024 <system_apb_clock_set_mask+0x58>)
    3ffc:	69d1      	ldr	r1, [r2, #28]
    3ffe:	683a      	ldr	r2, [r7, #0]
    4000:	430a      	orrs	r2, r1
    4002:	61da      	str	r2, [r3, #28]
			break;
    4004:	e008      	b.n	4018 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4006:	4b07      	ldr	r3, [pc, #28]	; (4024 <system_apb_clock_set_mask+0x58>)
    4008:	4a06      	ldr	r2, [pc, #24]	; (4024 <system_apb_clock_set_mask+0x58>)
    400a:	6a11      	ldr	r1, [r2, #32]
    400c:	683a      	ldr	r2, [r7, #0]
    400e:	430a      	orrs	r2, r1
    4010:	621a      	str	r2, [r3, #32]
			break;
    4012:	e001      	b.n	4018 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4014:	2317      	movs	r3, #23
    4016:	e000      	b.n	401a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4018:	2300      	movs	r3, #0
}
    401a:	1c18      	adds	r0, r3, #0
    401c:	46bd      	mov	sp, r7
    401e:	b002      	add	sp, #8
    4020:	bd80      	pop	{r7, pc}
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	40000400 	.word	0x40000400

00004028 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4028:	b580      	push	{r7, lr}
    402a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    402c:	4b05      	ldr	r3, [pc, #20]	; (4044 <system_is_debugger_present+0x1c>)
    402e:	789b      	ldrb	r3, [r3, #2]
    4030:	b2db      	uxtb	r3, r3
    4032:	1c1a      	adds	r2, r3, #0
    4034:	2302      	movs	r3, #2
    4036:	4013      	ands	r3, r2
    4038:	1e5a      	subs	r2, r3, #1
    403a:	4193      	sbcs	r3, r2
    403c:	b2db      	uxtb	r3, r3
}
    403e:	1c18      	adds	r0, r3, #0
    4040:	46bd      	mov	sp, r7
    4042:	bd80      	pop	{r7, pc}
    4044:	41002000 	.word	0x41002000

00004048 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    4048:	b580      	push	{r7, lr}
    404a:	b084      	sub	sp, #16
    404c:	af00      	add	r7, sp, #0
    404e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	681b      	ldr	r3, [r3, #0]
    4054:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4056:	68fb      	ldr	r3, [r7, #12]
    4058:	7e1b      	ldrb	r3, [r3, #24]
    405a:	b2db      	uxtb	r3, r3
    405c:	1c1a      	adds	r2, r3, #0
    405e:	2301      	movs	r3, #1
    4060:	4013      	ands	r3, r2
    4062:	1e5a      	subs	r2, r3, #1
    4064:	4193      	sbcs	r3, r2
    4066:	b2db      	uxtb	r3, r3
}
    4068:	1c18      	adds	r0, r3, #0
    406a:	46bd      	mov	sp, r7
    406c:	b004      	add	sp, #16
    406e:	bd80      	pop	{r7, pc}

00004070 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    4070:	b580      	push	{r7, lr}
    4072:	b084      	sub	sp, #16
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    407e:	68fb      	ldr	r3, [r7, #12]
    4080:	7e1b      	ldrb	r3, [r3, #24]
    4082:	b2db      	uxtb	r3, r3
    4084:	1c1a      	adds	r2, r3, #0
    4086:	2304      	movs	r3, #4
    4088:	4013      	ands	r3, r2
    408a:	1e5a      	subs	r2, r3, #1
    408c:	4193      	sbcs	r3, r2
    408e:	b2db      	uxtb	r3, r3
}
    4090:	1c18      	adds	r0, r3, #0
    4092:	46bd      	mov	sp, r7
    4094:	b004      	add	sp, #16
    4096:	bd80      	pop	{r7, pc}

00004098 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4098:	b580      	push	{r7, lr}
    409a:	b084      	sub	sp, #16
    409c:	af00      	add	r7, sp, #0
    409e:	6078      	str	r0, [r7, #4]
    40a0:	1c0a      	adds	r2, r1, #0
    40a2:	1cbb      	adds	r3, r7, #2
    40a4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    40ac:	687b      	ldr	r3, [r7, #4]
    40ae:	1c18      	adds	r0, r3, #0
    40b0:	4b0a      	ldr	r3, [pc, #40]	; (40dc <spi_write+0x44>)
    40b2:	4798      	blx	r3
    40b4:	1c03      	adds	r3, r0, #0
    40b6:	2201      	movs	r2, #1
    40b8:	4053      	eors	r3, r2
    40ba:	b2db      	uxtb	r3, r3
    40bc:	2b00      	cmp	r3, #0
    40be:	d001      	beq.n	40c4 <spi_write+0x2c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    40c0:	2305      	movs	r3, #5
    40c2:	e006      	b.n	40d2 <spi_write+0x3a>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40c4:	1cbb      	adds	r3, r7, #2
    40c6:	881b      	ldrh	r3, [r3, #0]
    40c8:	05db      	lsls	r3, r3, #23
    40ca:	0dda      	lsrs	r2, r3, #23
    40cc:	68fb      	ldr	r3, [r7, #12]
    40ce:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    40d0:	2300      	movs	r3, #0
}
    40d2:	1c18      	adds	r0, r3, #0
    40d4:	46bd      	mov	sp, r7
    40d6:	b004      	add	sp, #16
    40d8:	bd80      	pop	{r7, pc}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	00004049 	.word	0x00004049

000040e0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    40e0:	b580      	push	{r7, lr}
    40e2:	b084      	sub	sp, #16
    40e4:	af00      	add	r7, sp, #0
    40e6:	6078      	str	r0, [r7, #4]
    40e8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40ea:	687b      	ldr	r3, [r7, #4]
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	1c18      	adds	r0, r3, #0
    40f4:	4b1d      	ldr	r3, [pc, #116]	; (416c <spi_read+0x8c>)
    40f6:	4798      	blx	r3
    40f8:	1c03      	adds	r3, r0, #0
    40fa:	2201      	movs	r2, #1
    40fc:	4053      	eors	r3, r2
    40fe:	b2db      	uxtb	r3, r3
    4100:	2b00      	cmp	r3, #0
    4102:	d001      	beq.n	4108 <spi_read+0x28>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4104:	2310      	movs	r3, #16
    4106:	e02c      	b.n	4162 <spi_read+0x82>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4108:	1c3b      	adds	r3, r7, #0
    410a:	330f      	adds	r3, #15
    410c:	2200      	movs	r2, #0
    410e:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4110:	68bb      	ldr	r3, [r7, #8]
    4112:	8b5b      	ldrh	r3, [r3, #26]
    4114:	b29b      	uxth	r3, r3
    4116:	1c1a      	adds	r2, r3, #0
    4118:	2304      	movs	r3, #4
    411a:	4013      	ands	r3, r2
    411c:	d00b      	beq.n	4136 <spi_read+0x56>
		retval = STATUS_ERR_OVERFLOW;
    411e:	1c3b      	adds	r3, r7, #0
    4120:	330f      	adds	r3, #15
    4122:	221e      	movs	r2, #30
    4124:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4126:	68bb      	ldr	r3, [r7, #8]
    4128:	8b5b      	ldrh	r3, [r3, #26]
    412a:	b29b      	uxth	r3, r3
    412c:	2204      	movs	r2, #4
    412e:	4313      	orrs	r3, r2
    4130:	b29a      	uxth	r2, r3
    4132:	68bb      	ldr	r3, [r7, #8]
    4134:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4136:	687b      	ldr	r3, [r7, #4]
    4138:	799b      	ldrb	r3, [r3, #6]
    413a:	2b01      	cmp	r3, #1
    413c:	d108      	bne.n	4150 <spi_read+0x70>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    413e:	68bb      	ldr	r3, [r7, #8]
    4140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4142:	b29b      	uxth	r3, r3
    4144:	05db      	lsls	r3, r3, #23
    4146:	0ddb      	lsrs	r3, r3, #23
    4148:	b29a      	uxth	r2, r3
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	801a      	strh	r2, [r3, #0]
    414e:	e005      	b.n	415c <spi_read+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4150:	68bb      	ldr	r3, [r7, #8]
    4152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4154:	b2db      	uxtb	r3, r3
    4156:	1c1a      	adds	r2, r3, #0
    4158:	683b      	ldr	r3, [r7, #0]
    415a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    415c:	1c3b      	adds	r3, r7, #0
    415e:	330f      	adds	r3, #15
    4160:	781b      	ldrb	r3, [r3, #0]
}
    4162:	1c18      	adds	r0, r3, #0
    4164:	46bd      	mov	sp, r7
    4166:	b004      	add	sp, #16
    4168:	bd80      	pop	{r7, pc}
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	00004071 	.word	0x00004071

00004170 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4170:	b590      	push	{r4, r7, lr}
    4172:	b093      	sub	sp, #76	; 0x4c
    4174:	af00      	add	r7, sp, #0
    4176:	6078      	str	r0, [r7, #4]
    4178:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	681b      	ldr	r3, [r3, #0]
    417e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    4180:	687b      	ldr	r3, [r7, #4]
    4182:	681b      	ldr	r3, [r3, #0]
    4184:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4186:	1c3b      	adds	r3, r7, #0
    4188:	331c      	adds	r3, #28
    418a:	1c18      	adds	r0, r3, #0
    418c:	4b86      	ldr	r3, [pc, #536]	; (43a8 <_spi_set_config+0x238>)
    418e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4190:	1c3b      	adds	r3, r7, #0
    4192:	331c      	adds	r3, #28
    4194:	2200      	movs	r2, #0
    4196:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4198:	683b      	ldr	r3, [r7, #0]
    419a:	781b      	ldrb	r3, [r3, #0]
    419c:	2b00      	cmp	r3, #0
    419e:	d103      	bne.n	41a8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    41a0:	1c3b      	adds	r3, r7, #0
    41a2:	331c      	adds	r3, #28
    41a4:	2200      	movs	r2, #0
    41a6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    41a8:	683b      	ldr	r3, [r7, #0]
    41aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    41ac:	1c3b      	adds	r3, r7, #0
    41ae:	330c      	adds	r3, #12
    41b0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    41b6:	1c3b      	adds	r3, r7, #0
    41b8:	330c      	adds	r3, #12
    41ba:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    41bc:	683b      	ldr	r3, [r7, #0]
    41be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    41c0:	1c3b      	adds	r3, r7, #0
    41c2:	330c      	adds	r3, #12
    41c4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    41c6:	683b      	ldr	r3, [r7, #0]
    41c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    41ca:	1c3b      	adds	r3, r7, #0
    41cc:	330c      	adds	r3, #12
    41ce:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    41d0:	1c3b      	adds	r3, r7, #0
    41d2:	3347      	adds	r3, #71	; 0x47
    41d4:	2200      	movs	r2, #0
    41d6:	701a      	strb	r2, [r3, #0]
    41d8:	e02c      	b.n	4234 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    41da:	1c3b      	adds	r3, r7, #0
    41dc:	3347      	adds	r3, #71	; 0x47
    41de:	781a      	ldrb	r2, [r3, #0]
    41e0:	1c3b      	adds	r3, r7, #0
    41e2:	330c      	adds	r3, #12
    41e4:	0092      	lsls	r2, r2, #2
    41e6:	58d3      	ldr	r3, [r2, r3]
    41e8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    41ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41ec:	2b00      	cmp	r3, #0
    41ee:	d109      	bne.n	4204 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    41f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    41f2:	1c3b      	adds	r3, r7, #0
    41f4:	3347      	adds	r3, #71	; 0x47
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	1c10      	adds	r0, r2, #0
    41fa:	1c19      	adds	r1, r3, #0
    41fc:	4b6b      	ldr	r3, [pc, #428]	; (43ac <_spi_set_config+0x23c>)
    41fe:	4798      	blx	r3
    4200:	1c03      	adds	r3, r0, #0
    4202:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4206:	3301      	adds	r3, #1
    4208:	d00d      	beq.n	4226 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    420a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    420c:	b2da      	uxtb	r2, r3
    420e:	1c3b      	adds	r3, r7, #0
    4210:	331c      	adds	r3, #28
    4212:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4216:	0c1b      	lsrs	r3, r3, #16
    4218:	b2da      	uxtb	r2, r3
    421a:	1c3b      	adds	r3, r7, #0
    421c:	331c      	adds	r3, #28
    421e:	1c10      	adds	r0, r2, #0
    4220:	1c19      	adds	r1, r3, #0
    4222:	4b63      	ldr	r3, [pc, #396]	; (43b0 <_spi_set_config+0x240>)
    4224:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4226:	1c3b      	adds	r3, r7, #0
    4228:	3347      	adds	r3, #71	; 0x47
    422a:	781a      	ldrb	r2, [r3, #0]
    422c:	1c3b      	adds	r3, r7, #0
    422e:	3347      	adds	r3, #71	; 0x47
    4230:	3201      	adds	r2, #1
    4232:	701a      	strb	r2, [r3, #0]
    4234:	1c3b      	adds	r3, r7, #0
    4236:	3347      	adds	r3, #71	; 0x47
    4238:	781b      	ldrb	r3, [r3, #0]
    423a:	2b03      	cmp	r3, #3
    423c:	d9cd      	bls.n	41da <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    423e:	683b      	ldr	r3, [r7, #0]
    4240:	781a      	ldrb	r2, [r3, #0]
    4242:	687b      	ldr	r3, [r7, #4]
    4244:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4246:	683b      	ldr	r3, [r7, #0]
    4248:	7c1a      	ldrb	r2, [r3, #16]
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    424e:	683b      	ldr	r3, [r7, #0]
    4250:	7c9a      	ldrb	r2, [r3, #18]
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4256:	683b      	ldr	r3, [r7, #0]
    4258:	7d1a      	ldrb	r2, [r3, #20]
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    425e:	1c3b      	adds	r3, r7, #0
    4260:	330a      	adds	r3, #10
    4262:	2200      	movs	r2, #0
    4264:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4266:	2300      	movs	r3, #0
    4268:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    426a:	2300      	movs	r3, #0
    426c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    426e:	683b      	ldr	r3, [r7, #0]
    4270:	781b      	ldrb	r3, [r3, #0]
    4272:	2b01      	cmp	r3, #1
    4274:	d12b      	bne.n	42ce <_spi_set_config+0x15e>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	681b      	ldr	r3, [r3, #0]
    427a:	1c18      	adds	r0, r3, #0
    427c:	4b4d      	ldr	r3, [pc, #308]	; (43b4 <_spi_set_config+0x244>)
    427e:	4798      	blx	r3
    4280:	1c03      	adds	r3, r0, #0
    4282:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4286:	3314      	adds	r3, #20
    4288:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    428c:	b2db      	uxtb	r3, r3
    428e:	1c18      	adds	r0, r3, #0
    4290:	4b49      	ldr	r3, [pc, #292]	; (43b8 <_spi_set_config+0x248>)
    4292:	4798      	blx	r3
    4294:	1c03      	adds	r3, r0, #0
    4296:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4298:	683b      	ldr	r3, [r7, #0]
    429a:	6999      	ldr	r1, [r3, #24]
    429c:	1c3c      	adds	r4, r7, #0
    429e:	3423      	adds	r4, #35	; 0x23
    42a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    42a2:	1c3b      	adds	r3, r7, #0
    42a4:	330a      	adds	r3, #10
    42a6:	1c08      	adds	r0, r1, #0
    42a8:	1c11      	adds	r1, r2, #0
    42aa:	1c1a      	adds	r2, r3, #0
    42ac:	4b43      	ldr	r3, [pc, #268]	; (43bc <_spi_set_config+0x24c>)
    42ae:	4798      	blx	r3
    42b0:	1c03      	adds	r3, r0, #0
    42b2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    42b4:	1c3b      	adds	r3, r7, #0
    42b6:	3323      	adds	r3, #35	; 0x23
    42b8:	781b      	ldrb	r3, [r3, #0]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d001      	beq.n	42c2 <_spi_set_config+0x152>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    42be:	2317      	movs	r3, #23
    42c0:	e06d      	b.n	439e <_spi_set_config+0x22e>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    42c2:	1c3b      	adds	r3, r7, #0
    42c4:	330a      	adds	r3, #10
    42c6:	881b      	ldrh	r3, [r3, #0]
    42c8:	b2da      	uxtb	r2, r3
    42ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42cc:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    42ce:	683b      	ldr	r3, [r7, #0]
    42d0:	781b      	ldrb	r3, [r3, #0]
    42d2:	2b00      	cmp	r3, #0
    42d4:	d11a      	bne.n	430c <_spi_set_config+0x19c>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    42d6:	683b      	ldr	r3, [r7, #0]
    42d8:	699b      	ldr	r3, [r3, #24]
    42da:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    42dc:	683b      	ldr	r3, [r7, #0]
    42de:	8b9b      	ldrh	r3, [r3, #28]
    42e0:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    42e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    42e6:	683b      	ldr	r3, [r7, #0]
    42e8:	7f9b      	ldrb	r3, [r3, #30]
    42ea:	1c19      	adds	r1, r3, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    42ec:	683b      	ldr	r3, [r7, #0]
    42ee:	7fdb      	ldrb	r3, [r3, #31]
    42f0:	041b      	lsls	r3, r3, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    42f2:	430b      	orrs	r3, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    42f4:	431a      	orrs	r2, r3
    42f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42f8:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    42fa:	683a      	ldr	r2, [r7, #0]
    42fc:	2320      	movs	r3, #32
    42fe:	5cd3      	ldrb	r3, [r2, r3]
    4300:	2b00      	cmp	r3, #0
    4302:	d003      	beq.n	430c <_spi_set_config+0x19c>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    4304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4306:	2240      	movs	r2, #64	; 0x40
    4308:	4313      	orrs	r3, r2
    430a:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    430c:	683b      	ldr	r3, [r7, #0]
    430e:	685b      	ldr	r3, [r3, #4]
    4310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4312:	4313      	orrs	r3, r2
    4314:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4316:	683b      	ldr	r3, [r7, #0]
    4318:	689b      	ldr	r3, [r3, #8]
    431a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    431c:	4313      	orrs	r3, r2
    431e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4320:	683b      	ldr	r3, [r7, #0]
    4322:	68db      	ldr	r3, [r3, #12]
    4324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4326:	4313      	orrs	r3, r2
    4328:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    432a:	683b      	ldr	r3, [r7, #0]
    432c:	7c1b      	ldrb	r3, [r3, #16]
    432e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4330:	4313      	orrs	r3, r2
    4332:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4334:	683b      	ldr	r3, [r7, #0]
    4336:	7c5b      	ldrb	r3, [r3, #17]
    4338:	2b00      	cmp	r3, #0
    433a:	d104      	bne.n	4346 <_spi_set_config+0x1d6>
    433c:	4b20      	ldr	r3, [pc, #128]	; (43c0 <_spi_set_config+0x250>)
    433e:	4798      	blx	r3
    4340:	1c03      	adds	r3, r0, #0
    4342:	2b00      	cmp	r3, #0
    4344:	d003      	beq.n	434e <_spi_set_config+0x1de>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4348:	2280      	movs	r2, #128	; 0x80
    434a:	4313      	orrs	r3, r2
    434c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    434e:	683b      	ldr	r3, [r7, #0]
    4350:	7c9b      	ldrb	r3, [r3, #18]
    4352:	2b00      	cmp	r3, #0
    4354:	d004      	beq.n	4360 <_spi_set_config+0x1f0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4358:	2280      	movs	r2, #128	; 0x80
    435a:	0292      	lsls	r2, r2, #10
    435c:	4313      	orrs	r3, r2
    435e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4360:	683b      	ldr	r3, [r7, #0]
    4362:	7cdb      	ldrb	r3, [r3, #19]
    4364:	2b00      	cmp	r3, #0
    4366:	d004      	beq.n	4372 <_spi_set_config+0x202>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    436a:	2280      	movs	r2, #128	; 0x80
    436c:	0092      	lsls	r2, r2, #2
    436e:	4313      	orrs	r3, r2
    4370:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4372:	683b      	ldr	r3, [r7, #0]
    4374:	7d1b      	ldrb	r3, [r3, #20]
    4376:	2b00      	cmp	r3, #0
    4378:	d004      	beq.n	4384 <_spi_set_config+0x214>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    437c:	2280      	movs	r2, #128	; 0x80
    437e:	0192      	lsls	r2, r2, #6
    4380:	4313      	orrs	r3, r2
    4382:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4386:	681a      	ldr	r2, [r3, #0]
    4388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    438a:	431a      	orrs	r2, r3
    438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    438e:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    4390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4392:	685a      	ldr	r2, [r3, #4]
    4394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4396:	431a      	orrs	r2, r3
    4398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    439a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    439c:	2300      	movs	r3, #0
}
    439e:	1c18      	adds	r0, r3, #0
    43a0:	46bd      	mov	sp, r7
    43a2:	b013      	add	sp, #76	; 0x4c
    43a4:	bd90      	pop	{r4, r7, pc}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	00003eb5 	.word	0x00003eb5
    43ac:	00003431 	.word	0x00003431
    43b0:	000056a5 	.word	0x000056a5
    43b4:	000035ed 	.word	0x000035ed
    43b8:	000054dd 	.word	0x000054dd
    43bc:	00003329 	.word	0x00003329
    43c0:	00004029 	.word	0x00004029

000043c4 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    43c4:	b590      	push	{r4, r7, lr}
    43c6:	b091      	sub	sp, #68	; 0x44
    43c8:	af00      	add	r7, sp, #0
    43ca:	6078      	str	r0, [r7, #4]
    43cc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    43d4:	687b      	ldr	r3, [r7, #4]
    43d6:	681b      	ldr	r3, [r3, #0]
    43d8:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    43da:	683b      	ldr	r3, [r7, #0]
    43dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    43de:	1c3b      	adds	r3, r7, #0
    43e0:	330c      	adds	r3, #12
    43e2:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    43e4:	683b      	ldr	r3, [r7, #0]
    43e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    43e8:	1c3b      	adds	r3, r7, #0
    43ea:	330c      	adds	r3, #12
    43ec:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    43ee:	683b      	ldr	r3, [r7, #0]
    43f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    43f2:	1c3b      	adds	r3, r7, #0
    43f4:	330c      	adds	r3, #12
    43f6:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    43f8:	683b      	ldr	r3, [r7, #0]
    43fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    43fc:	1c3b      	adds	r3, r7, #0
    43fe:	330c      	adds	r3, #12
    4400:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4402:	1c3b      	adds	r3, r7, #0
    4404:	333f      	adds	r3, #63	; 0x3f
    4406:	2200      	movs	r2, #0
    4408:	701a      	strb	r2, [r3, #0]
    440a:	e030      	b.n	446e <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    440c:	1c3b      	adds	r3, r7, #0
    440e:	333f      	adds	r3, #63	; 0x3f
    4410:	781a      	ldrb	r2, [r3, #0]
    4412:	1c3b      	adds	r3, r7, #0
    4414:	330c      	adds	r3, #12
    4416:	0092      	lsls	r2, r2, #2
    4418:	58d3      	ldr	r3, [r2, r3]
    441a:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    441e:	2b00      	cmp	r3, #0
    4420:	d109      	bne.n	4436 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4422:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4424:	1c3b      	adds	r3, r7, #0
    4426:	333f      	adds	r3, #63	; 0x3f
    4428:	781b      	ldrb	r3, [r3, #0]
    442a:	1c10      	adds	r0, r2, #0
    442c:	1c19      	adds	r1, r3, #0
    442e:	4b6d      	ldr	r3, [pc, #436]	; (45e4 <_spi_check_config+0x220>)
    4430:	4798      	blx	r3
    4432:	1c03      	adds	r3, r0, #0
    4434:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    4436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4438:	3301      	adds	r3, #1
    443a:	d100      	bne.n	443e <_spi_check_config+0x7a>
			continue;
    443c:	e010      	b.n	4460 <_spi_check_config+0x9c>
		}

		if ((current_pinmux & 0xFFFF) !=
    443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4440:	041b      	lsls	r3, r3, #16
    4442:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    4444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4446:	0c1b      	lsrs	r3, r3, #16
    4448:	b2db      	uxtb	r3, r3
    444a:	1c18      	adds	r0, r3, #0
    444c:	4b66      	ldr	r3, [pc, #408]	; (45e8 <_spi_check_config+0x224>)
    444e:	4798      	blx	r3
    4450:	1c03      	adds	r3, r0, #0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    4452:	429c      	cmp	r4, r3
    4454:	d004      	beq.n	4460 <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    4456:	687b      	ldr	r3, [r7, #4]
    4458:	2200      	movs	r2, #0
    445a:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    445c:	231c      	movs	r3, #28
    445e:	e0bd      	b.n	45dc <_spi_check_config+0x218>
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4460:	1c3b      	adds	r3, r7, #0
    4462:	333f      	adds	r3, #63	; 0x3f
    4464:	781a      	ldrb	r2, [r3, #0]
    4466:	1c3b      	adds	r3, r7, #0
    4468:	333f      	adds	r3, #63	; 0x3f
    446a:	3201      	adds	r2, #1
    446c:	701a      	strb	r2, [r3, #0]
    446e:	1c3b      	adds	r3, r7, #0
    4470:	333f      	adds	r3, #63	; 0x3f
    4472:	781b      	ldrb	r3, [r3, #0]
    4474:	2b03      	cmp	r3, #3
    4476:	d9c9      	bls.n	440c <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    4478:	2013      	movs	r0, #19
    447a:	4b5c      	ldr	r3, [pc, #368]	; (45ec <_spi_check_config+0x228>)
    447c:	4798      	blx	r3
    447e:	1c03      	adds	r3, r0, #0
    4480:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    4482:	2300      	movs	r3, #0
    4484:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    4486:	2300      	movs	r3, #0
    4488:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    448a:	2300      	movs	r3, #0
    448c:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    448e:	683b      	ldr	r3, [r7, #0]
    4490:	781b      	ldrb	r3, [r3, #0]
    4492:	2b01      	cmp	r3, #1
    4494:	d123      	bne.n	44de <_spi_check_config+0x11a>
		enum status_code error_code = _sercom_get_sync_baud_val(
    4496:	683b      	ldr	r3, [r7, #0]
    4498:	6999      	ldr	r1, [r3, #24]
    449a:	1c3c      	adds	r4, r7, #0
    449c:	341f      	adds	r4, #31
    449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    44a0:	1c3b      	adds	r3, r7, #0
    44a2:	330a      	adds	r3, #10
    44a4:	1c08      	adds	r0, r1, #0
    44a6:	1c11      	adds	r1, r2, #0
    44a8:	1c1a      	adds	r2, r3, #0
    44aa:	4b51      	ldr	r3, [pc, #324]	; (45f0 <_spi_check_config+0x22c>)
    44ac:	4798      	blx	r3
    44ae:	1c03      	adds	r3, r0, #0
    44b0:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    44b2:	1c3b      	adds	r3, r7, #0
    44b4:	331f      	adds	r3, #31
    44b6:	781b      	ldrb	r3, [r3, #0]
    44b8:	2b00      	cmp	r3, #0
    44ba:	d001      	beq.n	44c0 <_spi_check_config+0xfc>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    44bc:	2317      	movs	r3, #23
    44be:	e08d      	b.n	45dc <_spi_check_config+0x218>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    44c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44c2:	7b1b      	ldrb	r3, [r3, #12]
    44c4:	b2da      	uxtb	r2, r3
    44c6:	1c3b      	adds	r3, r7, #0
    44c8:	330a      	adds	r3, #10
    44ca:	881b      	ldrh	r3, [r3, #0]
    44cc:	b2db      	uxtb	r3, r3
    44ce:	429a      	cmp	r2, r3
    44d0:	d001      	beq.n	44d6 <_spi_check_config+0x112>
			return STATUS_ERR_DENIED;
    44d2:	231c      	movs	r3, #28
    44d4:	e082      	b.n	45dc <_spi_check_config+0x218>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    44d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44d8:	220c      	movs	r2, #12
    44da:	4313      	orrs	r3, r2
    44dc:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    44de:	683b      	ldr	r3, [r7, #0]
    44e0:	781b      	ldrb	r3, [r3, #0]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d127      	bne.n	4536 <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    44e6:	683b      	ldr	r3, [r7, #0]
    44e8:	699b      	ldr	r3, [r3, #24]
    44ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    44ec:	4313      	orrs	r3, r2
    44ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    44f0:	683b      	ldr	r3, [r7, #0]
    44f2:	8b9b      	ldrh	r3, [r3, #28]
    44f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    44f6:	4313      	orrs	r3, r2
    44f8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    44fa:	683b      	ldr	r3, [r7, #0]
    44fc:	7f9b      	ldrb	r3, [r3, #30]
    44fe:	1c1a      	adds	r2, r3, #0
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    4500:	683b      	ldr	r3, [r7, #0]
    4502:	7fdb      	ldrb	r3, [r3, #31]
    4504:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4506:	4313      	orrs	r3, r2
    4508:	6a3a      	ldr	r2, [r7, #32]
    450a:	4313      	orrs	r3, r2
    450c:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4510:	681a      	ldr	r2, [r3, #0]
    4512:	6a3b      	ldr	r3, [r7, #32]
    4514:	429a      	cmp	r2, r3
    4516:	d001      	beq.n	451c <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    4518:	231c      	movs	r3, #28
    451a:	e05f      	b.n	45dc <_spi_check_config+0x218>
		}

		if (config->mode_specific.slave.preload_enable) {
    451c:	683a      	ldr	r2, [r7, #0]
    451e:	2320      	movs	r3, #32
    4520:	5cd3      	ldrb	r3, [r2, r3]
    4522:	2b00      	cmp	r3, #0
    4524:	d003      	beq.n	452e <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    4526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4528:	2240      	movs	r2, #64	; 0x40
    452a:	4313      	orrs	r3, r2
    452c:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4530:	2208      	movs	r2, #8
    4532:	4313      	orrs	r3, r2
    4534:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    4536:	683b      	ldr	r3, [r7, #0]
    4538:	685b      	ldr	r3, [r3, #4]
    453a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    453c:	4313      	orrs	r3, r2
    453e:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4540:	683b      	ldr	r3, [r7, #0]
    4542:	689b      	ldr	r3, [r3, #8]
    4544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4546:	4313      	orrs	r3, r2
    4548:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    454a:	683b      	ldr	r3, [r7, #0]
    454c:	68db      	ldr	r3, [r3, #12]
    454e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4550:	4313      	orrs	r3, r2
    4552:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4554:	683b      	ldr	r3, [r7, #0]
    4556:	7c1b      	ldrb	r3, [r3, #16]
    4558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    455a:	4313      	orrs	r3, r2
    455c:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    455e:	683b      	ldr	r3, [r7, #0]
    4560:	7c5b      	ldrb	r3, [r3, #17]
    4562:	2b00      	cmp	r3, #0
    4564:	d003      	beq.n	456e <_spi_check_config+0x1aa>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4568:	2280      	movs	r2, #128	; 0x80
    456a:	4313      	orrs	r3, r2
    456c:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    456e:	683b      	ldr	r3, [r7, #0]
    4570:	7c9b      	ldrb	r3, [r3, #18]
    4572:	2b00      	cmp	r3, #0
    4574:	d004      	beq.n	4580 <_spi_check_config+0x1bc>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4578:	2280      	movs	r2, #128	; 0x80
    457a:	0292      	lsls	r2, r2, #10
    457c:	4313      	orrs	r3, r2
    457e:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4580:	683b      	ldr	r3, [r7, #0]
    4582:	7cdb      	ldrb	r3, [r3, #19]
    4584:	2b00      	cmp	r3, #0
    4586:	d004      	beq.n	4592 <_spi_check_config+0x1ce>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    458a:	2280      	movs	r2, #128	; 0x80
    458c:	0092      	lsls	r2, r2, #2
    458e:	4313      	orrs	r3, r2
    4590:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4592:	683b      	ldr	r3, [r7, #0]
    4594:	7d1b      	ldrb	r3, [r3, #20]
    4596:	2b00      	cmp	r3, #0
    4598:	d004      	beq.n	45a4 <_spi_check_config+0x1e0>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    459c:	2280      	movs	r2, #128	; 0x80
    459e:	0192      	lsls	r2, r2, #6
    45a0:	4313      	orrs	r3, r2
    45a2:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    45a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45a6:	2202      	movs	r2, #2
    45a8:	4313      	orrs	r3, r2
    45aa:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    45ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45ae:	681a      	ldr	r2, [r3, #0]
    45b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    45b2:	429a      	cmp	r2, r3
    45b4:	d10e      	bne.n	45d4 <_spi_check_config+0x210>
			spi_module->CTRLB.reg == ctrlb) {
    45b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45b8:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    45ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    45bc:	429a      	cmp	r2, r3
    45be:	d109      	bne.n	45d4 <_spi_check_config+0x210>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    45c0:	683b      	ldr	r3, [r7, #0]
    45c2:	781a      	ldrb	r2, [r3, #0]
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    45c8:	683b      	ldr	r3, [r7, #0]
    45ca:	7c1a      	ldrb	r2, [r3, #16]
    45cc:	687b      	ldr	r3, [r7, #4]
    45ce:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    45d0:	2300      	movs	r3, #0
    45d2:	e003      	b.n	45dc <_spi_check_config+0x218>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    45d4:	687b      	ldr	r3, [r7, #4]
    45d6:	2200      	movs	r2, #0
    45d8:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    45da:	231c      	movs	r3, #28
}
    45dc:	1c18      	adds	r0, r3, #0
    45de:	46bd      	mov	sp, r7
    45e0:	b011      	add	sp, #68	; 0x44
    45e2:	bd90      	pop	{r4, r7, pc}
    45e4:	00003431 	.word	0x00003431
    45e8:	00003f3d 	.word	0x00003f3d
    45ec:	000054dd 	.word	0x000054dd
    45f0:	00003329 	.word	0x00003329

000045f4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    45f4:	b580      	push	{r7, lr}
    45f6:	b08a      	sub	sp, #40	; 0x28
    45f8:	af00      	add	r7, sp, #0
    45fa:	60f8      	str	r0, [r7, #12]
    45fc:	60b9      	str	r1, [r7, #8]
    45fe:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4600:	68fb      	ldr	r3, [r7, #12]
    4602:	68ba      	ldr	r2, [r7, #8]
    4604:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4606:	68fb      	ldr	r3, [r7, #12]
    4608:	681b      	ldr	r3, [r3, #0]
    460a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    460e:	681a      	ldr	r2, [r3, #0]
    4610:	2302      	movs	r3, #2
    4612:	4013      	ands	r3, r2
    4614:	d007      	beq.n	4626 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    4616:	68fa      	ldr	r2, [r7, #12]
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	1c10      	adds	r0, r2, #0
    461c:	1c19      	adds	r1, r3, #0
    461e:	4b2f      	ldr	r3, [pc, #188]	; (46dc <spi_init+0xe8>)
    4620:	4798      	blx	r3
    4622:	1c03      	adds	r3, r0, #0
    4624:	e056      	b.n	46d4 <spi_init+0xe0>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4628:	681a      	ldr	r2, [r3, #0]
    462a:	2301      	movs	r3, #1
    462c:	4013      	ands	r3, r2
    462e:	d001      	beq.n	4634 <spi_init+0x40>
		return STATUS_BUSY;
    4630:	2305      	movs	r3, #5
    4632:	e04f      	b.n	46d4 <spi_init+0xe0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4634:	68fb      	ldr	r3, [r7, #12]
    4636:	681b      	ldr	r3, [r3, #0]
    4638:	1c18      	adds	r0, r3, #0
    463a:	4b29      	ldr	r3, [pc, #164]	; (46e0 <spi_init+0xec>)
    463c:	4798      	blx	r3
    463e:	1c03      	adds	r3, r0, #0
    4640:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4642:	6a3b      	ldr	r3, [r7, #32]
    4644:	3302      	adds	r3, #2
    4646:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4648:	6a3b      	ldr	r3, [r7, #32]
    464a:	3314      	adds	r3, #20
    464c:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    464e:	69fb      	ldr	r3, [r7, #28]
    4650:	2201      	movs	r2, #1
    4652:	1c11      	adds	r1, r2, #0
    4654:	4099      	lsls	r1, r3
    4656:	1c0b      	adds	r3, r1, #0
    4658:	2002      	movs	r0, #2
    465a:	1c19      	adds	r1, r3, #0
    465c:	4b21      	ldr	r3, [pc, #132]	; (46e4 <spi_init+0xf0>)
    465e:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4660:	1c3b      	adds	r3, r7, #0
    4662:	3314      	adds	r3, #20
    4664:	1c18      	adds	r0, r3, #0
    4666:	4b20      	ldr	r3, [pc, #128]	; (46e8 <spi_init+0xf4>)
    4668:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    466a:	687a      	ldr	r2, [r7, #4]
    466c:	2324      	movs	r3, #36	; 0x24
    466e:	5cd2      	ldrb	r2, [r2, r3]
    4670:	1c3b      	adds	r3, r7, #0
    4672:	3314      	adds	r3, #20
    4674:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4676:	69bb      	ldr	r3, [r7, #24]
    4678:	b2da      	uxtb	r2, r3
    467a:	1c3b      	adds	r3, r7, #0
    467c:	3314      	adds	r3, #20
    467e:	1c10      	adds	r0, r2, #0
    4680:	1c19      	adds	r1, r3, #0
    4682:	4b1a      	ldr	r3, [pc, #104]	; (46ec <spi_init+0xf8>)
    4684:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4686:	69bb      	ldr	r3, [r7, #24]
    4688:	b2db      	uxtb	r3, r3
    468a:	1c18      	adds	r0, r3, #0
    468c:	4b18      	ldr	r3, [pc, #96]	; (46f0 <spi_init+0xfc>)
    468e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4690:	687a      	ldr	r2, [r7, #4]
    4692:	2324      	movs	r3, #36	; 0x24
    4694:	5cd3      	ldrb	r3, [r2, r3]
    4696:	1c18      	adds	r0, r3, #0
    4698:	2100      	movs	r1, #0
    469a:	4b16      	ldr	r3, [pc, #88]	; (46f4 <spi_init+0x100>)
    469c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	781b      	ldrb	r3, [r3, #0]
    46a2:	2b01      	cmp	r3, #1
    46a4:	d105      	bne.n	46b2 <spi_init+0xbe>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    46a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	220c      	movs	r2, #12
    46ac:	431a      	orrs	r2, r3
    46ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46b0:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	781b      	ldrb	r3, [r3, #0]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d105      	bne.n	46c6 <spi_init+0xd2>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    46ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46bc:	681b      	ldr	r3, [r3, #0]
    46be:	2208      	movs	r2, #8
    46c0:	431a      	orrs	r2, r3
    46c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46c4:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    46c6:	68fa      	ldr	r2, [r7, #12]
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	1c10      	adds	r0, r2, #0
    46cc:	1c19      	adds	r1, r3, #0
    46ce:	4b0a      	ldr	r3, [pc, #40]	; (46f8 <spi_init+0x104>)
    46d0:	4798      	blx	r3
    46d2:	1c03      	adds	r3, r0, #0
}
    46d4:	1c18      	adds	r0, r3, #0
    46d6:	46bd      	mov	sp, r7
    46d8:	b00a      	add	sp, #40	; 0x28
    46da:	bd80      	pop	{r7, pc}
    46dc:	000043c5 	.word	0x000043c5
    46e0:	000035ed 	.word	0x000035ed
    46e4:	00003fcd 	.word	0x00003fcd
    46e8:	00003fb9 	.word	0x00003fb9
    46ec:	000053c1 	.word	0x000053c1
    46f0:	00005401 	.word	0x00005401
    46f4:	000033a5 	.word	0x000033a5
    46f8:	00004171 	.word	0x00004171

000046fc <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    46fc:	b590      	push	{r4, r7, lr}
    46fe:	b087      	sub	sp, #28
    4700:	af00      	add	r7, sp, #0
    4702:	60f8      	str	r0, [r7, #12]
    4704:	607a      	str	r2, [r7, #4]
    4706:	1c3b      	adds	r3, r7, #0
    4708:	330a      	adds	r3, #10
    470a:	1c0a      	adds	r2, r1, #0
    470c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    470e:	68fb      	ldr	r3, [r7, #12]
    4710:	79db      	ldrb	r3, [r3, #7]
    4712:	2201      	movs	r2, #1
    4714:	4053      	eors	r3, r2
    4716:	b2db      	uxtb	r3, r3
    4718:	2b00      	cmp	r3, #0
    471a:	d001      	beq.n	4720 <spi_transceive_wait+0x24>
		return STATUS_ERR_DENIED;
    471c:	231c      	movs	r3, #28
    471e:	e07a      	b.n	4816 <spi_transceive_wait+0x11a>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	uint16_t j;
#  endif
	enum status_code retval = STATUS_OK;
    4720:	1c3b      	adds	r3, r7, #0
    4722:	3315      	adds	r3, #21
    4724:	2200      	movs	r2, #0
    4726:	701a      	strb	r2, [r3, #0]

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    4728:	68fb      	ldr	r3, [r7, #12]
    472a:	795b      	ldrb	r3, [r3, #5]
    472c:	2b00      	cmp	r3, #0
    472e:	d121      	bne.n	4774 <spi_transceive_wait+0x78>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    4730:	1c3b      	adds	r3, r7, #0
    4732:	3316      	adds	r3, #22
    4734:	2200      	movs	r2, #0
    4736:	801a      	strh	r2, [r3, #0]
    4738:	e016      	b.n	4768 <spi_transceive_wait+0x6c>
			if (spi_is_ready_to_write(module)) {
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	1c18      	adds	r0, r3, #0
    473e:	4b38      	ldr	r3, [pc, #224]	; (4820 <spi_transceive_wait+0x124>)
    4740:	4798      	blx	r3
    4742:	1c03      	adds	r3, r0, #0
    4744:	2b00      	cmp	r3, #0
    4746:	d000      	beq.n	474a <spi_transceive_wait+0x4e>
				break;
    4748:	e014      	b.n	4774 <spi_transceive_wait+0x78>
			} else if (j == SPI_TIMEOUT) {
    474a:	1c3b      	adds	r3, r7, #0
    474c:	3316      	adds	r3, #22
    474e:	881a      	ldrh	r2, [r3, #0]
    4750:	4b34      	ldr	r3, [pc, #208]	; (4824 <spi_transceive_wait+0x128>)
    4752:	429a      	cmp	r2, r3
    4754:	d101      	bne.n	475a <spi_transceive_wait+0x5e>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    4756:	2312      	movs	r3, #18
    4758:	e05d      	b.n	4816 <spi_transceive_wait+0x11a>
	enum status_code retval = STATUS_OK;

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    475a:	1c3b      	adds	r3, r7, #0
    475c:	3316      	adds	r3, #22
    475e:	881a      	ldrh	r2, [r3, #0]
    4760:	1c3b      	adds	r3, r7, #0
    4762:	3316      	adds	r3, #22
    4764:	3201      	adds	r2, #1
    4766:	801a      	strh	r2, [r3, #0]
    4768:	1c3b      	adds	r3, r7, #0
    476a:	3316      	adds	r3, #22
    476c:	881a      	ldrh	r2, [r3, #0]
    476e:	4b2d      	ldr	r3, [pc, #180]	; (4824 <spi_transceive_wait+0x128>)
    4770:	429a      	cmp	r2, r3
    4772:	d9e2      	bls.n	473a <spi_transceive_wait+0x3e>
			}
		}
	}
#  endif
	/* Wait until the module is ready to write the character */
	while (!spi_is_ready_to_write(module)) {
    4774:	46c0      	nop			; (mov r8, r8)
    4776:	68fb      	ldr	r3, [r7, #12]
    4778:	1c18      	adds	r0, r3, #0
    477a:	4b29      	ldr	r3, [pc, #164]	; (4820 <spi_transceive_wait+0x124>)
    477c:	4798      	blx	r3
    477e:	1c03      	adds	r3, r0, #0
    4780:	2201      	movs	r2, #1
    4782:	4053      	eors	r3, r2
    4784:	b2db      	uxtb	r3, r3
    4786:	2b00      	cmp	r3, #0
    4788:	d1f5      	bne.n	4776 <spi_transceive_wait+0x7a>
	}

	/* Write data */
	spi_write(module, tx_data);
    478a:	68fa      	ldr	r2, [r7, #12]
    478c:	1c3b      	adds	r3, r7, #0
    478e:	330a      	adds	r3, #10
    4790:	881b      	ldrh	r3, [r3, #0]
    4792:	1c10      	adds	r0, r2, #0
    4794:	1c19      	adds	r1, r3, #0
    4796:	4b24      	ldr	r3, [pc, #144]	; (4828 <spi_transceive_wait+0x12c>)
    4798:	4798      	blx	r3

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
    479a:	68fb      	ldr	r3, [r7, #12]
    479c:	795b      	ldrb	r3, [r3, #5]
    479e:	2b00      	cmp	r3, #0
    47a0:	d121      	bne.n	47e6 <spi_transceive_wait+0xea>
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    47a2:	1c3b      	adds	r3, r7, #0
    47a4:	3316      	adds	r3, #22
    47a6:	2200      	movs	r2, #0
    47a8:	801a      	strh	r2, [r3, #0]
    47aa:	e016      	b.n	47da <spi_transceive_wait+0xde>
			if (spi_is_ready_to_read(module)) {
    47ac:	68fb      	ldr	r3, [r7, #12]
    47ae:	1c18      	adds	r0, r3, #0
    47b0:	4b1e      	ldr	r3, [pc, #120]	; (482c <spi_transceive_wait+0x130>)
    47b2:	4798      	blx	r3
    47b4:	1c03      	adds	r3, r0, #0
    47b6:	2b00      	cmp	r3, #0
    47b8:	d000      	beq.n	47bc <spi_transceive_wait+0xc0>
				break;
    47ba:	e014      	b.n	47e6 <spi_transceive_wait+0xea>
			} else if (j == SPI_TIMEOUT) {
    47bc:	1c3b      	adds	r3, r7, #0
    47be:	3316      	adds	r3, #22
    47c0:	881a      	ldrh	r2, [r3, #0]
    47c2:	4b18      	ldr	r3, [pc, #96]	; (4824 <spi_transceive_wait+0x128>)
    47c4:	429a      	cmp	r2, r3
    47c6:	d101      	bne.n	47cc <spi_transceive_wait+0xd0>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    47c8:	2312      	movs	r3, #18
    47ca:	e024      	b.n	4816 <spi_transceive_wait+0x11a>
	spi_write(module, tx_data);

#  if CONF_SPI_SLAVE_ENABLE == true
	/* Start timeout period for slave */
	if (module->mode == SPI_MODE_SLAVE) {
		for (j = 0; j <= SPI_TIMEOUT; j++) {
    47cc:	1c3b      	adds	r3, r7, #0
    47ce:	3316      	adds	r3, #22
    47d0:	881a      	ldrh	r2, [r3, #0]
    47d2:	1c3b      	adds	r3, r7, #0
    47d4:	3316      	adds	r3, #22
    47d6:	3201      	adds	r2, #1
    47d8:	801a      	strh	r2, [r3, #0]
    47da:	1c3b      	adds	r3, r7, #0
    47dc:	3316      	adds	r3, #22
    47de:	881a      	ldrh	r2, [r3, #0]
    47e0:	4b10      	ldr	r3, [pc, #64]	; (4824 <spi_transceive_wait+0x128>)
    47e2:	429a      	cmp	r2, r3
    47e4:	d9e2      	bls.n	47ac <spi_transceive_wait+0xb0>
		}
	}
#  endif

	/* Wait until the module is ready to read the character */
	while (!spi_is_ready_to_read(module)) {
    47e6:	46c0      	nop			; (mov r8, r8)
    47e8:	68fb      	ldr	r3, [r7, #12]
    47ea:	1c18      	adds	r0, r3, #0
    47ec:	4b0f      	ldr	r3, [pc, #60]	; (482c <spi_transceive_wait+0x130>)
    47ee:	4798      	blx	r3
    47f0:	1c03      	adds	r3, r0, #0
    47f2:	2201      	movs	r2, #1
    47f4:	4053      	eors	r3, r2
    47f6:	b2db      	uxtb	r3, r3
    47f8:	2b00      	cmp	r3, #0
    47fa:	d1f5      	bne.n	47e8 <spi_transceive_wait+0xec>
	}

	/* Read data */
	retval = spi_read(module, rx_data);
    47fc:	1c3c      	adds	r4, r7, #0
    47fe:	3415      	adds	r4, #21
    4800:	68fa      	ldr	r2, [r7, #12]
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	1c10      	adds	r0, r2, #0
    4806:	1c19      	adds	r1, r3, #0
    4808:	4b09      	ldr	r3, [pc, #36]	; (4830 <spi_transceive_wait+0x134>)
    480a:	4798      	blx	r3
    480c:	1c03      	adds	r3, r0, #0
    480e:	7023      	strb	r3, [r4, #0]

	return retval;
    4810:	1c3b      	adds	r3, r7, #0
    4812:	3315      	adds	r3, #21
    4814:	781b      	ldrb	r3, [r3, #0]
}
    4816:	1c18      	adds	r0, r3, #0
    4818:	46bd      	mov	sp, r7
    481a:	b007      	add	sp, #28
    481c:	bd90      	pop	{r4, r7, pc}
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	00004049 	.word	0x00004049
    4824:	00002710 	.word	0x00002710
    4828:	00004099 	.word	0x00004099
    482c:	00004071 	.word	0x00004071
    4830:	000040e1 	.word	0x000040e1

00004834 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    4834:	b580      	push	{r7, lr}
    4836:	b082      	sub	sp, #8
    4838:	af00      	add	r7, sp, #0
    483a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	2b00      	cmp	r3, #0
    4840:	d00c      	beq.n	485c <delay_cycles+0x28>
		SysTick->LOAD = n;
    4842:	4b08      	ldr	r3, [pc, #32]	; (4864 <delay_cycles+0x30>)
    4844:	687a      	ldr	r2, [r7, #4]
    4846:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    4848:	4b06      	ldr	r3, [pc, #24]	; (4864 <delay_cycles+0x30>)
    484a:	2200      	movs	r2, #0
    484c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	4b04      	ldr	r3, [pc, #16]	; (4864 <delay_cycles+0x30>)
    4852:	681a      	ldr	r2, [r3, #0]
    4854:	2380      	movs	r3, #128	; 0x80
    4856:	025b      	lsls	r3, r3, #9
    4858:	4013      	ands	r3, r2
    485a:	d0f9      	beq.n	4850 <delay_cycles+0x1c>
		};
	}
}
    485c:	46bd      	mov	sp, r7
    485e:	b002      	add	sp, #8
    4860:	bd80      	pop	{r7, pc}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	e000e010 	.word	0xe000e010

00004868 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4868:	b580      	push	{r7, lr}
    486a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    486c:	2000      	movs	r0, #0
    486e:	4b10      	ldr	r3, [pc, #64]	; (48b0 <delay_init+0x48>)
    4870:	4798      	blx	r3
    4872:	1c02      	adds	r2, r0, #0
    4874:	4b0f      	ldr	r3, [pc, #60]	; (48b4 <delay_init+0x4c>)
    4876:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    4878:	4b0e      	ldr	r3, [pc, #56]	; (48b4 <delay_init+0x4c>)
    487a:	681a      	ldr	r2, [r3, #0]
    487c:	4b0e      	ldr	r3, [pc, #56]	; (48b8 <delay_init+0x50>)
    487e:	1c10      	adds	r0, r2, #0
    4880:	22fa      	movs	r2, #250	; 0xfa
    4882:	0091      	lsls	r1, r2, #2
    4884:	4798      	blx	r3
    4886:	1c03      	adds	r3, r0, #0
    4888:	1c1a      	adds	r2, r3, #0
    488a:	4b0a      	ldr	r3, [pc, #40]	; (48b4 <delay_init+0x4c>)
    488c:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    488e:	4b09      	ldr	r3, [pc, #36]	; (48b4 <delay_init+0x4c>)
    4890:	681a      	ldr	r2, [r3, #0]
    4892:	4b09      	ldr	r3, [pc, #36]	; (48b8 <delay_init+0x50>)
    4894:	1c10      	adds	r0, r2, #0
    4896:	22fa      	movs	r2, #250	; 0xfa
    4898:	0091      	lsls	r1, r2, #2
    489a:	4798      	blx	r3
    489c:	1c03      	adds	r3, r0, #0
    489e:	1c1a      	adds	r2, r3, #0
    48a0:	4b06      	ldr	r3, [pc, #24]	; (48bc <delay_init+0x54>)
    48a2:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    48a4:	4b06      	ldr	r3, [pc, #24]	; (48c0 <delay_init+0x58>)
    48a6:	2205      	movs	r2, #5
    48a8:	601a      	str	r2, [r3, #0]
}
    48aa:	46bd      	mov	sp, r7
    48ac:	bd80      	pop	{r7, pc}
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	000052d5 	.word	0x000052d5
    48b4:	20000008 	.word	0x20000008
    48b8:	00005871 	.word	0x00005871
    48bc:	2000000c 	.word	0x2000000c
    48c0:	e000e010 	.word	0xe000e010

000048c4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    48c4:	b580      	push	{r7, lr}
    48c6:	b082      	sub	sp, #8
    48c8:	af00      	add	r7, sp, #0
    48ca:	6078      	str	r0, [r7, #4]
	while (n--) {
    48cc:	e004      	b.n	48d8 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    48ce:	4b06      	ldr	r3, [pc, #24]	; (48e8 <delay_cycles_ms+0x24>)
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	1c18      	adds	r0, r3, #0
    48d4:	4b05      	ldr	r3, [pc, #20]	; (48ec <delay_cycles_ms+0x28>)
    48d6:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	1e5a      	subs	r2, r3, #1
    48dc:	607a      	str	r2, [r7, #4]
    48de:	2b00      	cmp	r3, #0
    48e0:	d1f5      	bne.n	48ce <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    48e2:	46bd      	mov	sp, r7
    48e4:	b002      	add	sp, #8
    48e6:	bd80      	pop	{r7, pc}
    48e8:	20000008 	.word	0x20000008
    48ec:	00004835 	.word	0x00004835

000048f0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    48f0:	b580      	push	{r7, lr}
    48f2:	b082      	sub	sp, #8
    48f4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    48f6:	4b0f      	ldr	r3, [pc, #60]	; (4934 <cpu_irq_enter_critical+0x44>)
    48f8:	681b      	ldr	r3, [r3, #0]
    48fa:	2b00      	cmp	r3, #0
    48fc:	d112      	bne.n	4924 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    48fe:	f3ef 8310 	mrs	r3, PRIMASK
    4902:	607b      	str	r3, [r7, #4]
  return(result);
    4904:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    4906:	2b00      	cmp	r3, #0
    4908:	d109      	bne.n	491e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    490a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    490c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4910:	4b09      	ldr	r3, [pc, #36]	; (4938 <cpu_irq_enter_critical+0x48>)
    4912:	2200      	movs	r2, #0
    4914:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4916:	4b09      	ldr	r3, [pc, #36]	; (493c <cpu_irq_enter_critical+0x4c>)
    4918:	2201      	movs	r2, #1
    491a:	701a      	strb	r2, [r3, #0]
    491c:	e002      	b.n	4924 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    491e:	4b07      	ldr	r3, [pc, #28]	; (493c <cpu_irq_enter_critical+0x4c>)
    4920:	2200      	movs	r2, #0
    4922:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4924:	4b03      	ldr	r3, [pc, #12]	; (4934 <cpu_irq_enter_critical+0x44>)
    4926:	681b      	ldr	r3, [r3, #0]
    4928:	1c5a      	adds	r2, r3, #1
    492a:	4b02      	ldr	r3, [pc, #8]	; (4934 <cpu_irq_enter_critical+0x44>)
    492c:	601a      	str	r2, [r3, #0]
}
    492e:	46bd      	mov	sp, r7
    4930:	b002      	add	sp, #8
    4932:	bd80      	pop	{r7, pc}
    4934:	200000d8 	.word	0x200000d8
    4938:	20000010 	.word	0x20000010
    493c:	200000dc 	.word	0x200000dc

00004940 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    4940:	b580      	push	{r7, lr}
    4942:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4944:	4b0a      	ldr	r3, [pc, #40]	; (4970 <cpu_irq_leave_critical+0x30>)
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	1e5a      	subs	r2, r3, #1
    494a:	4b09      	ldr	r3, [pc, #36]	; (4970 <cpu_irq_leave_critical+0x30>)
    494c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    494e:	4b08      	ldr	r3, [pc, #32]	; (4970 <cpu_irq_leave_critical+0x30>)
    4950:	681b      	ldr	r3, [r3, #0]
    4952:	2b00      	cmp	r3, #0
    4954:	d10a      	bne.n	496c <cpu_irq_leave_critical+0x2c>
    4956:	4b07      	ldr	r3, [pc, #28]	; (4974 <cpu_irq_leave_critical+0x34>)
    4958:	781b      	ldrb	r3, [r3, #0]
    495a:	b2db      	uxtb	r3, r3
    495c:	2b00      	cmp	r3, #0
    495e:	d005      	beq.n	496c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    4960:	4b05      	ldr	r3, [pc, #20]	; (4978 <cpu_irq_leave_critical+0x38>)
    4962:	2201      	movs	r2, #1
    4964:	701a      	strb	r2, [r3, #0]
    4966:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    496a:	b662      	cpsie	i
	}
}
    496c:	46bd      	mov	sp, r7
    496e:	bd80      	pop	{r7, pc}
    4970:	200000d8 	.word	0x200000d8
    4974:	200000dc 	.word	0x200000dc
    4978:	20000010 	.word	0x20000010

0000497c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    497c:	b580      	push	{r7, lr}
    497e:	b082      	sub	sp, #8
    4980:	af00      	add	r7, sp, #0
    4982:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	2201      	movs	r2, #1
    4988:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    498a:	687b      	ldr	r3, [r7, #4]
    498c:	2200      	movs	r2, #0
    498e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	2206      	movs	r2, #6
    4994:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    4996:	687b      	ldr	r3, [r7, #4]
    4998:	2200      	movs	r2, #0
    499a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	2200      	movs	r2, #0
    49a0:	725a      	strb	r2, [r3, #9]
}
    49a2:	46bd      	mov	sp, r7
    49a4:	b002      	add	sp, #8
    49a6:	bd80      	pop	{r7, pc}

000049a8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    49a8:	b580      	push	{r7, lr}
    49aa:	b082      	sub	sp, #8
    49ac:	af00      	add	r7, sp, #0
    49ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	2200      	movs	r2, #0
    49b4:	701a      	strb	r2, [r3, #0]
}
    49b6:	46bd      	mov	sp, r7
    49b8:	b002      	add	sp, #8
    49ba:	bd80      	pop	{r7, pc}

000049bc <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    49bc:	b580      	push	{r7, lr}
    49be:	b082      	sub	sp, #8
    49c0:	af00      	add	r7, sp, #0
    49c2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    49c4:	687b      	ldr	r3, [r7, #4]
    49c6:	2203      	movs	r2, #3
    49c8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    49ca:	687b      	ldr	r3, [r7, #4]
    49cc:	2200      	movs	r2, #0
    49ce:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	2201      	movs	r2, #1
    49d4:	709a      	strb	r2, [r3, #2]
}
    49d6:	46bd      	mov	sp, r7
    49d8:	b002      	add	sp, #8
    49da:	bd80      	pop	{r7, pc}

000049dc <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    49dc:	b580      	push	{r7, lr}
    49de:	b082      	sub	sp, #8
    49e0:	af00      	add	r7, sp, #0
    49e2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    49e4:	687b      	ldr	r3, [r7, #4]
    49e6:	2200      	movs	r2, #0
    49e8:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	2200      	movs	r2, #0
    49ee:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	2200      	movs	r2, #0
    49f4:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    49f6:	687b      	ldr	r3, [r7, #4]
    49f8:	2200      	movs	r2, #0
    49fa:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	2200      	movs	r2, #0
    4a00:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	2201      	movs	r2, #1
    4a06:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	2207      	movs	r2, #7
    4a0c:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	223f      	movs	r2, #63	; 0x3f
    4a12:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    4a14:	687b      	ldr	r3, [r7, #4]
    4a16:	2201      	movs	r2, #1
    4a18:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    4a1a:	687b      	ldr	r3, [r7, #4]
    4a1c:	2201      	movs	r2, #1
    4a1e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	2206      	movs	r2, #6
    4a24:	821a      	strh	r2, [r3, #16]
}
    4a26:	46bd      	mov	sp, r7
    4a28:	b002      	add	sp, #8
    4a2a:	bd80      	pop	{r7, pc}

00004a2c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    4a2c:	b580      	push	{r7, lr}
    4a2e:	b082      	sub	sp, #8
    4a30:	af00      	add	r7, sp, #0
    4a32:	1c02      	adds	r2, r0, #0
    4a34:	1dfb      	adds	r3, r7, #7
    4a36:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4a38:	4b03      	ldr	r3, [pc, #12]	; (4a48 <system_cpu_clock_set_divider+0x1c>)
    4a3a:	1dfa      	adds	r2, r7, #7
    4a3c:	7812      	ldrb	r2, [r2, #0]
    4a3e:	721a      	strb	r2, [r3, #8]
}
    4a40:	46bd      	mov	sp, r7
    4a42:	b002      	add	sp, #8
    4a44:	bd80      	pop	{r7, pc}
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	40000400 	.word	0x40000400

00004a4c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    4a4c:	b580      	push	{r7, lr}
    4a4e:	b082      	sub	sp, #8
    4a50:	af00      	add	r7, sp, #0
    4a52:	1c0a      	adds	r2, r1, #0
    4a54:	1dfb      	adds	r3, r7, #7
    4a56:	1c01      	adds	r1, r0, #0
    4a58:	7019      	strb	r1, [r3, #0]
    4a5a:	1dbb      	adds	r3, r7, #6
    4a5c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4a5e:	1dfb      	adds	r3, r7, #7
    4a60:	781b      	ldrb	r3, [r3, #0]
    4a62:	2b01      	cmp	r3, #1
    4a64:	d008      	beq.n	4a78 <system_apb_clock_set_divider+0x2c>
    4a66:	2b02      	cmp	r3, #2
    4a68:	d00b      	beq.n	4a82 <system_apb_clock_set_divider+0x36>
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d10e      	bne.n	4a8c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4a6e:	4b0b      	ldr	r3, [pc, #44]	; (4a9c <system_apb_clock_set_divider+0x50>)
    4a70:	1dba      	adds	r2, r7, #6
    4a72:	7812      	ldrb	r2, [r2, #0]
    4a74:	725a      	strb	r2, [r3, #9]
			break;
    4a76:	e00b      	b.n	4a90 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4a78:	4b08      	ldr	r3, [pc, #32]	; (4a9c <system_apb_clock_set_divider+0x50>)
    4a7a:	1dba      	adds	r2, r7, #6
    4a7c:	7812      	ldrb	r2, [r2, #0]
    4a7e:	729a      	strb	r2, [r3, #10]
			break;
    4a80:	e006      	b.n	4a90 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4a82:	4b06      	ldr	r3, [pc, #24]	; (4a9c <system_apb_clock_set_divider+0x50>)
    4a84:	1dba      	adds	r2, r7, #6
    4a86:	7812      	ldrb	r2, [r2, #0]
    4a88:	72da      	strb	r2, [r3, #11]
			break;
    4a8a:	e001      	b.n	4a90 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4a8c:	2317      	movs	r3, #23
    4a8e:	e000      	b.n	4a92 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    4a90:	2300      	movs	r3, #0
}
    4a92:	1c18      	adds	r0, r3, #0
    4a94:	46bd      	mov	sp, r7
    4a96:	b002      	add	sp, #8
    4a98:	bd80      	pop	{r7, pc}
    4a9a:	46c0      	nop			; (mov r8, r8)
    4a9c:	40000400 	.word	0x40000400

00004aa0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    4aa0:	b580      	push	{r7, lr}
    4aa2:	b082      	sub	sp, #8
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	1c02      	adds	r2, r0, #0
    4aa8:	1dfb      	adds	r3, r7, #7
    4aaa:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4aac:	4b08      	ldr	r3, [pc, #32]	; (4ad0 <system_flash_set_waitstates+0x30>)
    4aae:	1dfa      	adds	r2, r7, #7
    4ab0:	7811      	ldrb	r1, [r2, #0]
    4ab2:	220f      	movs	r2, #15
    4ab4:	400a      	ands	r2, r1
    4ab6:	b2d1      	uxtb	r1, r2
    4ab8:	220f      	movs	r2, #15
    4aba:	400a      	ands	r2, r1
    4abc:	0052      	lsls	r2, r2, #1
    4abe:	6859      	ldr	r1, [r3, #4]
    4ac0:	201e      	movs	r0, #30
    4ac2:	4381      	bics	r1, r0
    4ac4:	430a      	orrs	r2, r1
    4ac6:	605a      	str	r2, [r3, #4]
}
    4ac8:	46bd      	mov	sp, r7
    4aca:	b002      	add	sp, #8
    4acc:	bd80      	pop	{r7, pc}
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	41004000 	.word	0x41004000

00004ad4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4ad4:	b580      	push	{r7, lr}
    4ad6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4ad8:	46c0      	nop			; (mov r8, r8)
    4ada:	4b03      	ldr	r3, [pc, #12]	; (4ae8 <_system_dfll_wait_for_sync+0x14>)
    4adc:	68da      	ldr	r2, [r3, #12]
    4ade:	2310      	movs	r3, #16
    4ae0:	4013      	ands	r3, r2
    4ae2:	d0fa      	beq.n	4ada <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4ae4:	46bd      	mov	sp, r7
    4ae6:	bd80      	pop	{r7, pc}
    4ae8:	40000800 	.word	0x40000800

00004aec <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    4aec:	b580      	push	{r7, lr}
    4aee:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4af0:	4b0c      	ldr	r3, [pc, #48]	; (4b24 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4af2:	2202      	movs	r2, #2
    4af4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4af6:	4b0c      	ldr	r3, [pc, #48]	; (4b28 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4af8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4afa:	4b0a      	ldr	r3, [pc, #40]	; (4b24 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4afc:	4a0b      	ldr	r2, [pc, #44]	; (4b2c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4afe:	6892      	ldr	r2, [r2, #8]
    4b00:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4b02:	4b08      	ldr	r3, [pc, #32]	; (4b24 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4b04:	4a09      	ldr	r2, [pc, #36]	; (4b2c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4b06:	6852      	ldr	r2, [r2, #4]
    4b08:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4b0a:	4b06      	ldr	r3, [pc, #24]	; (4b24 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4b0c:	2200      	movs	r2, #0
    4b0e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    4b10:	4b05      	ldr	r3, [pc, #20]	; (4b28 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4b12:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4b14:	4a03      	ldr	r2, [pc, #12]	; (4b24 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4b16:	4b05      	ldr	r3, [pc, #20]	; (4b2c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	b29b      	uxth	r3, r3
    4b1c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    4b1e:	46bd      	mov	sp, r7
    4b20:	bd80      	pop	{r7, pc}
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	40000800 	.word	0x40000800
    4b28:	00004ad5 	.word	0x00004ad5
    4b2c:	200000e0 	.word	0x200000e0

00004b30 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4b30:	b580      	push	{r7, lr}
    4b32:	b082      	sub	sp, #8
    4b34:	af00      	add	r7, sp, #0
    4b36:	1c02      	adds	r2, r0, #0
    4b38:	1dfb      	adds	r3, r7, #7
    4b3a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4b3c:	1dfb      	adds	r3, r7, #7
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	2b08      	cmp	r3, #8
    4b42:	d843      	bhi.n	4bcc <system_clock_source_get_hz+0x9c>
    4b44:	009a      	lsls	r2, r3, #2
    4b46:	4b24      	ldr	r3, [pc, #144]	; (4bd8 <system_clock_source_get_hz+0xa8>)
    4b48:	18d3      	adds	r3, r2, r3
    4b4a:	681b      	ldr	r3, [r3, #0]
    4b4c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4b4e:	4b23      	ldr	r3, [pc, #140]	; (4bdc <system_clock_source_get_hz+0xac>)
    4b50:	691b      	ldr	r3, [r3, #16]
    4b52:	e03c      	b.n	4bce <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4b54:	4b22      	ldr	r3, [pc, #136]	; (4be0 <system_clock_source_get_hz+0xb0>)
    4b56:	6a1b      	ldr	r3, [r3, #32]
    4b58:	0a1b      	lsrs	r3, r3, #8
    4b5a:	1c1a      	adds	r2, r3, #0
    4b5c:	2303      	movs	r3, #3
    4b5e:	4013      	ands	r3, r2
    4b60:	b2db      	uxtb	r3, r3
    4b62:	4a20      	ldr	r2, [pc, #128]	; (4be4 <system_clock_source_get_hz+0xb4>)
    4b64:	1c11      	adds	r1, r2, #0
    4b66:	40d9      	lsrs	r1, r3
    4b68:	1c0b      	adds	r3, r1, #0
    4b6a:	e030      	b.n	4bce <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4b6c:	2380      	movs	r3, #128	; 0x80
    4b6e:	021b      	lsls	r3, r3, #8
    4b70:	e02d      	b.n	4bce <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    4b72:	2380      	movs	r3, #128	; 0x80
    4b74:	021b      	lsls	r3, r3, #8
    4b76:	e02a      	b.n	4bce <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4b78:	4b18      	ldr	r3, [pc, #96]	; (4bdc <system_clock_source_get_hz+0xac>)
    4b7a:	695b      	ldr	r3, [r3, #20]
    4b7c:	e027      	b.n	4bce <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4b7e:	4b17      	ldr	r3, [pc, #92]	; (4bdc <system_clock_source_get_hz+0xac>)
    4b80:	681a      	ldr	r2, [r3, #0]
    4b82:	2302      	movs	r3, #2
    4b84:	4013      	ands	r3, r2
    4b86:	d101      	bne.n	4b8c <system_clock_source_get_hz+0x5c>
			return 0;
    4b88:	2300      	movs	r3, #0
    4b8a:	e020      	b.n	4bce <system_clock_source_get_hz+0x9e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    4b8c:	4b16      	ldr	r3, [pc, #88]	; (4be8 <system_clock_source_get_hz+0xb8>)
    4b8e:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4b90:	4b12      	ldr	r3, [pc, #72]	; (4bdc <system_clock_source_get_hz+0xac>)
    4b92:	681a      	ldr	r2, [r3, #0]
    4b94:	2304      	movs	r3, #4
    4b96:	4013      	ands	r3, r2
    4b98:	d009      	beq.n	4bae <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4b9a:	2000      	movs	r0, #0
    4b9c:	4b13      	ldr	r3, [pc, #76]	; (4bec <system_clock_source_get_hz+0xbc>)
    4b9e:	4798      	blx	r3
    4ba0:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    4ba2:	4b0e      	ldr	r3, [pc, #56]	; (4bdc <system_clock_source_get_hz+0xac>)
    4ba4:	689b      	ldr	r3, [r3, #8]
    4ba6:	041b      	lsls	r3, r3, #16
    4ba8:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4baa:	4353      	muls	r3, r2
    4bac:	e00f      	b.n	4bce <system_clock_source_get_hz+0x9e>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4bae:	4b10      	ldr	r3, [pc, #64]	; (4bf0 <system_clock_source_get_hz+0xc0>)
    4bb0:	e00d      	b.n	4bce <system_clock_source_get_hz+0x9e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4bb2:	4a0b      	ldr	r2, [pc, #44]	; (4be0 <system_clock_source_get_hz+0xb0>)
    4bb4:	2350      	movs	r3, #80	; 0x50
    4bb6:	5cd3      	ldrb	r3, [r2, r3]
    4bb8:	b2db      	uxtb	r3, r3
    4bba:	1c1a      	adds	r2, r3, #0
    4bbc:	2304      	movs	r3, #4
    4bbe:	4013      	ands	r3, r2
    4bc0:	d101      	bne.n	4bc6 <system_clock_source_get_hz+0x96>
			return 0;
    4bc2:	2300      	movs	r3, #0
    4bc4:	e003      	b.n	4bce <system_clock_source_get_hz+0x9e>
		}

		return _system_clock_inst.dpll.frequency;
    4bc6:	4b05      	ldr	r3, [pc, #20]	; (4bdc <system_clock_source_get_hz+0xac>)
    4bc8:	68db      	ldr	r3, [r3, #12]
    4bca:	e000      	b.n	4bce <system_clock_source_get_hz+0x9e>
#endif

	default:
		return 0;
    4bcc:	2300      	movs	r3, #0
	}
}
    4bce:	1c18      	adds	r0, r3, #0
    4bd0:	46bd      	mov	sp, r7
    4bd2:	b002      	add	sp, #8
    4bd4:	bd80      	pop	{r7, pc}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	0000921c 	.word	0x0000921c
    4bdc:	200000e0 	.word	0x200000e0
    4be0:	40000800 	.word	0x40000800
    4be4:	007a1200 	.word	0x007a1200
    4be8:	00004ad5 	.word	0x00004ad5
    4bec:	000054dd 	.word	0x000054dd
    4bf0:	02dc6c00 	.word	0x02dc6c00

00004bf4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b084      	sub	sp, #16
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4bfc:	4b16      	ldr	r3, [pc, #88]	; (4c58 <system_clock_source_osc8m_set_config+0x64>)
    4bfe:	6a1b      	ldr	r3, [r3, #32]
    4c00:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	781b      	ldrb	r3, [r3, #0]
    4c06:	1c1a      	adds	r2, r3, #0
    4c08:	2303      	movs	r3, #3
    4c0a:	4013      	ands	r3, r2
    4c0c:	b2d9      	uxtb	r1, r3
    4c0e:	1c3b      	adds	r3, r7, #0
    4c10:	330d      	adds	r3, #13
    4c12:	2203      	movs	r2, #3
    4c14:	400a      	ands	r2, r1
    4c16:	7819      	ldrb	r1, [r3, #0]
    4c18:	2003      	movs	r0, #3
    4c1a:	4381      	bics	r1, r0
    4c1c:	430a      	orrs	r2, r1
    4c1e:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	789a      	ldrb	r2, [r3, #2]
    4c24:	1c3b      	adds	r3, r7, #0
    4c26:	330c      	adds	r3, #12
    4c28:	01d2      	lsls	r2, r2, #7
    4c2a:	7818      	ldrb	r0, [r3, #0]
    4c2c:	217f      	movs	r1, #127	; 0x7f
    4c2e:	4001      	ands	r1, r0
    4c30:	430a      	orrs	r2, r1
    4c32:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4c34:	687b      	ldr	r3, [r7, #4]
    4c36:	7859      	ldrb	r1, [r3, #1]
    4c38:	1c3b      	adds	r3, r7, #0
    4c3a:	330c      	adds	r3, #12
    4c3c:	2201      	movs	r2, #1
    4c3e:	400a      	ands	r2, r1
    4c40:	0192      	lsls	r2, r2, #6
    4c42:	7819      	ldrb	r1, [r3, #0]
    4c44:	2040      	movs	r0, #64	; 0x40
    4c46:	4381      	bics	r1, r0
    4c48:	430a      	orrs	r2, r1
    4c4a:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    4c4c:	4b02      	ldr	r3, [pc, #8]	; (4c58 <system_clock_source_osc8m_set_config+0x64>)
    4c4e:	68fa      	ldr	r2, [r7, #12]
    4c50:	621a      	str	r2, [r3, #32]
}
    4c52:	46bd      	mov	sp, r7
    4c54:	b004      	add	sp, #16
    4c56:	bd80      	pop	{r7, pc}
    4c58:	40000800 	.word	0x40000800

00004c5c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4c5c:	b580      	push	{r7, lr}
    4c5e:	b082      	sub	sp, #8
    4c60:	af00      	add	r7, sp, #0
    4c62:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	7a1b      	ldrb	r3, [r3, #8]
    4c68:	029b      	lsls	r3, r3, #10
    4c6a:	041b      	lsls	r3, r3, #16
    4c6c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	895b      	ldrh	r3, [r3, #10]
    4c72:	059b      	lsls	r3, r3, #22
    4c74:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4c76:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    4c78:	4b29      	ldr	r3, [pc, #164]	; (4d20 <system_clock_source_dfll_set_config+0xc4>)
    4c7a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    4c80:	687b      	ldr	r3, [r7, #4]
    4c82:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4c84:	4313      	orrs	r3, r2
    4c86:	b2db      	uxtb	r3, r3
    4c88:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4c8a:	687b      	ldr	r3, [r7, #4]
    4c8c:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    4c8e:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4c90:	687b      	ldr	r3, [r7, #4]
    4c92:	889b      	ldrh	r3, [r3, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4c94:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4c96:	687b      	ldr	r3, [r7, #4]
    4c98:	785b      	ldrb	r3, [r3, #1]
    4c9a:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4c9c:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    4c9e:	4b20      	ldr	r3, [pc, #128]	; (4d20 <system_clock_source_dfll_set_config+0xc4>)
    4ca0:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4ca2:	687b      	ldr	r3, [r7, #4]
    4ca4:	781b      	ldrb	r3, [r3, #0]
    4ca6:	2b04      	cmp	r3, #4
    4ca8:	d116      	bne.n	4cd8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4caa:	687b      	ldr	r3, [r7, #4]
    4cac:	7b1b      	ldrb	r3, [r3, #12]
    4cae:	069b      	lsls	r3, r3, #26
    4cb0:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	89db      	ldrh	r3, [r3, #14]
    4cb6:	041b      	lsls	r3, r3, #16
    4cb8:	1c19      	adds	r1, r3, #0
    4cba:	4b1a      	ldr	r3, [pc, #104]	; (4d24 <system_clock_source_dfll_set_config+0xc8>)
    4cbc:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4cbe:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	8a1b      	ldrh	r3, [r3, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4cc4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    4cc6:	4b16      	ldr	r3, [pc, #88]	; (4d20 <system_clock_source_dfll_set_config+0xc4>)
    4cc8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4cca:	4b15      	ldr	r3, [pc, #84]	; (4d20 <system_clock_source_dfll_set_config+0xc4>)
    4ccc:	681a      	ldr	r2, [r3, #0]
    4cce:	687b      	ldr	r3, [r7, #4]
    4cd0:	781b      	ldrb	r3, [r3, #0]
    4cd2:	431a      	orrs	r2, r3
    4cd4:	4b12      	ldr	r3, [pc, #72]	; (4d20 <system_clock_source_dfll_set_config+0xc4>)
    4cd6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	781b      	ldrb	r3, [r3, #0]
    4cdc:	2b20      	cmp	r3, #32
    4cde:	d11c      	bne.n	4d1a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	7b1b      	ldrb	r3, [r3, #12]
    4ce4:	069b      	lsls	r3, r3, #26
    4ce6:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	89db      	ldrh	r3, [r3, #14]
    4cec:	041b      	lsls	r3, r3, #16
    4cee:	1c19      	adds	r1, r3, #0
    4cf0:	4b0c      	ldr	r3, [pc, #48]	; (4d24 <system_clock_source_dfll_set_config+0xc8>)
    4cf2:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4cf4:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4cf6:	687b      	ldr	r3, [r7, #4]
    4cf8:	8a1b      	ldrh	r3, [r3, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4cfa:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4cfc:	4b08      	ldr	r3, [pc, #32]	; (4d20 <system_clock_source_dfll_set_config+0xc4>)
    4cfe:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4d00:	4b07      	ldr	r3, [pc, #28]	; (4d20 <system_clock_source_dfll_set_config+0xc4>)
    4d02:	681a      	ldr	r2, [r3, #0]
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	781b      	ldrb	r3, [r3, #0]
    4d08:	2104      	movs	r1, #4
    4d0a:	430b      	orrs	r3, r1
    4d0c:	b2db      	uxtb	r3, r3
    4d0e:	4313      	orrs	r3, r2
    4d10:	2280      	movs	r2, #128	; 0x80
    4d12:	00d2      	lsls	r2, r2, #3
    4d14:	431a      	orrs	r2, r3
    4d16:	4b02      	ldr	r3, [pc, #8]	; (4d20 <system_clock_source_dfll_set_config+0xc4>)
    4d18:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4d1a:	46bd      	mov	sp, r7
    4d1c:	b002      	add	sp, #8
    4d1e:	bd80      	pop	{r7, pc}
    4d20:	200000e0 	.word	0x200000e0
    4d24:	03ff0000 	.word	0x03ff0000

00004d28 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4d28:	b580      	push	{r7, lr}
    4d2a:	b082      	sub	sp, #8
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	1c02      	adds	r2, r0, #0
    4d30:	1dfb      	adds	r3, r7, #7
    4d32:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4d34:	1dfb      	adds	r3, r7, #7
    4d36:	781b      	ldrb	r3, [r3, #0]
    4d38:	2b08      	cmp	r3, #8
    4d3a:	d83b      	bhi.n	4db4 <system_clock_source_enable+0x8c>
    4d3c:	009a      	lsls	r2, r3, #2
    4d3e:	4b21      	ldr	r3, [pc, #132]	; (4dc4 <system_clock_source_enable+0x9c>)
    4d40:	18d3      	adds	r3, r2, r3
    4d42:	681b      	ldr	r3, [r3, #0]
    4d44:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4d46:	4b20      	ldr	r3, [pc, #128]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d48:	4a1f      	ldr	r2, [pc, #124]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d4a:	6a12      	ldr	r2, [r2, #32]
    4d4c:	2102      	movs	r1, #2
    4d4e:	430a      	orrs	r2, r1
    4d50:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4d52:	2300      	movs	r3, #0
    4d54:	e031      	b.n	4dba <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4d56:	4b1c      	ldr	r3, [pc, #112]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d58:	4a1b      	ldr	r2, [pc, #108]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d5a:	6992      	ldr	r2, [r2, #24]
    4d5c:	2102      	movs	r1, #2
    4d5e:	430a      	orrs	r2, r1
    4d60:	619a      	str	r2, [r3, #24]
		break;
    4d62:	e029      	b.n	4db8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4d64:	4b18      	ldr	r3, [pc, #96]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d66:	4a18      	ldr	r2, [pc, #96]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d68:	8a12      	ldrh	r2, [r2, #16]
    4d6a:	b292      	uxth	r2, r2
    4d6c:	2102      	movs	r1, #2
    4d6e:	430a      	orrs	r2, r1
    4d70:	b292      	uxth	r2, r2
    4d72:	821a      	strh	r2, [r3, #16]
		break;
    4d74:	e020      	b.n	4db8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4d76:	4b14      	ldr	r3, [pc, #80]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d78:	4a13      	ldr	r2, [pc, #76]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d7a:	8a92      	ldrh	r2, [r2, #20]
    4d7c:	b292      	uxth	r2, r2
    4d7e:	2102      	movs	r1, #2
    4d80:	430a      	orrs	r2, r1
    4d82:	b292      	uxth	r2, r2
    4d84:	829a      	strh	r2, [r3, #20]
		break;
    4d86:	e017      	b.n	4db8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4d88:	4b10      	ldr	r3, [pc, #64]	; (4dcc <system_clock_source_enable+0xa4>)
    4d8a:	681b      	ldr	r3, [r3, #0]
    4d8c:	2202      	movs	r2, #2
    4d8e:	431a      	orrs	r2, r3
    4d90:	4b0e      	ldr	r3, [pc, #56]	; (4dcc <system_clock_source_enable+0xa4>)
    4d92:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4d94:	4b0e      	ldr	r3, [pc, #56]	; (4dd0 <system_clock_source_enable+0xa8>)
    4d96:	4798      	blx	r3
		break;
    4d98:	e00e      	b.n	4db8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4d9a:	4a0b      	ldr	r2, [pc, #44]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d9c:	490a      	ldr	r1, [pc, #40]	; (4dc8 <system_clock_source_enable+0xa0>)
    4d9e:	2344      	movs	r3, #68	; 0x44
    4da0:	5ccb      	ldrb	r3, [r1, r3]
    4da2:	b2db      	uxtb	r3, r3
    4da4:	2102      	movs	r1, #2
    4da6:	430b      	orrs	r3, r1
    4da8:	b2d9      	uxtb	r1, r3
    4daa:	2344      	movs	r3, #68	; 0x44
    4dac:	54d1      	strb	r1, [r2, r3]
		break;
    4dae:	e003      	b.n	4db8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4db0:	2300      	movs	r3, #0
    4db2:	e002      	b.n	4dba <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4db4:	2317      	movs	r3, #23
    4db6:	e000      	b.n	4dba <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    4db8:	2300      	movs	r3, #0
}
    4dba:	1c18      	adds	r0, r3, #0
    4dbc:	46bd      	mov	sp, r7
    4dbe:	b002      	add	sp, #8
    4dc0:	bd80      	pop	{r7, pc}
    4dc2:	46c0      	nop			; (mov r8, r8)
    4dc4:	00009240 	.word	0x00009240
    4dc8:	40000800 	.word	0x40000800
    4dcc:	200000e0 	.word	0x200000e0
    4dd0:	00004aed 	.word	0x00004aed

00004dd4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    4dd4:	b580      	push	{r7, lr}
    4dd6:	b084      	sub	sp, #16
    4dd8:	af00      	add	r7, sp, #0
    4dda:	1c02      	adds	r2, r0, #0
    4ddc:	1dfb      	adds	r3, r7, #7
    4dde:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    4de0:	2300      	movs	r3, #0
    4de2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    4de4:	1dfb      	adds	r3, r7, #7
    4de6:	781b      	ldrb	r3, [r3, #0]
    4de8:	2b08      	cmp	r3, #8
    4dea:	d821      	bhi.n	4e30 <system_clock_source_is_ready+0x5c>
    4dec:	009a      	lsls	r2, r3, #2
    4dee:	4b18      	ldr	r3, [pc, #96]	; (4e50 <system_clock_source_is_ready+0x7c>)
    4df0:	18d3      	adds	r3, r2, r3
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    4df6:	2308      	movs	r3, #8
    4df8:	60fb      	str	r3, [r7, #12]
		break;
    4dfa:	e01b      	b.n	4e34 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    4dfc:	2304      	movs	r3, #4
    4dfe:	60fb      	str	r3, [r7, #12]
		break;
    4e00:	e018      	b.n	4e34 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    4e02:	2301      	movs	r3, #1
    4e04:	60fb      	str	r3, [r7, #12]
		break;
    4e06:	e015      	b.n	4e34 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    4e08:	2302      	movs	r3, #2
    4e0a:	60fb      	str	r3, [r7, #12]
		break;
    4e0c:	e012      	b.n	4e34 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    4e0e:	23d0      	movs	r3, #208	; 0xd0
    4e10:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    4e12:	e00f      	b.n	4e34 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4e14:	4a0f      	ldr	r2, [pc, #60]	; (4e54 <system_clock_source_is_ready+0x80>)
    4e16:	2350      	movs	r3, #80	; 0x50
    4e18:	5cd3      	ldrb	r3, [r2, r3]
    4e1a:	b2db      	uxtb	r3, r3
    4e1c:	1c1a      	adds	r2, r3, #0
    4e1e:	2303      	movs	r3, #3
    4e20:	4013      	ands	r3, r2
    4e22:	3b03      	subs	r3, #3
    4e24:	425a      	negs	r2, r3
    4e26:	4153      	adcs	r3, r2
    4e28:	b2db      	uxtb	r3, r3
    4e2a:	e00c      	b.n	4e46 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    4e2c:	2301      	movs	r3, #1
    4e2e:	e00a      	b.n	4e46 <system_clock_source_is_ready+0x72>

	default:
		return false;
    4e30:	2300      	movs	r3, #0
    4e32:	e008      	b.n	4e46 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4e34:	4b07      	ldr	r3, [pc, #28]	; (4e54 <system_clock_source_is_ready+0x80>)
    4e36:	68db      	ldr	r3, [r3, #12]
    4e38:	68fa      	ldr	r2, [r7, #12]
    4e3a:	401a      	ands	r2, r3
    4e3c:	68fb      	ldr	r3, [r7, #12]
    4e3e:	1ad3      	subs	r3, r2, r3
    4e40:	425a      	negs	r2, r3
    4e42:	4153      	adcs	r3, r2
    4e44:	b2db      	uxtb	r3, r3
}
    4e46:	1c18      	adds	r0, r3, #0
    4e48:	46bd      	mov	sp, r7
    4e4a:	b004      	add	sp, #16
    4e4c:	bd80      	pop	{r7, pc}
    4e4e:	46c0      	nop			; (mov r8, r8)
    4e50:	00009264 	.word	0x00009264
    4e54:	40000800 	.word	0x40000800

00004e58 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    4e58:	b580      	push	{r7, lr}
    4e5a:	b082      	sub	sp, #8
    4e5c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4e5e:	1c3b      	adds	r3, r7, #0
    4e60:	2202      	movs	r2, #2
    4e62:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4e64:	2300      	movs	r3, #0
    4e66:	607b      	str	r3, [r7, #4]
    4e68:	e009      	b.n	4e7e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	b2da      	uxtb	r2, r3
    4e6e:	1c3b      	adds	r3, r7, #0
    4e70:	1c10      	adds	r0, r2, #0
    4e72:	1c19      	adds	r1, r3, #0
    4e74:	4b05      	ldr	r3, [pc, #20]	; (4e8c <_switch_peripheral_gclk+0x34>)
    4e76:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4e78:	687b      	ldr	r3, [r7, #4]
    4e7a:	3301      	adds	r3, #1
    4e7c:	607b      	str	r3, [r7, #4]
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	2b24      	cmp	r3, #36	; 0x24
    4e82:	d9f2      	bls.n	4e6a <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    4e84:	46bd      	mov	sp, r7
    4e86:	b002      	add	sp, #8
    4e88:	bd80      	pop	{r7, pc}
    4e8a:	46c0      	nop			; (mov r8, r8)
    4e8c:	000053c1 	.word	0x000053c1

00004e90 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4e90:	b580      	push	{r7, lr}
    4e92:	b0a6      	sub	sp, #152	; 0x98
    4e94:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4e96:	4b67      	ldr	r3, [pc, #412]	; (5034 <system_clock_init+0x1a4>)
    4e98:	22c2      	movs	r2, #194	; 0xc2
    4e9a:	00d2      	lsls	r2, r2, #3
    4e9c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4e9e:	2002      	movs	r0, #2
    4ea0:	4b65      	ldr	r3, [pc, #404]	; (5038 <system_clock_init+0x1a8>)
    4ea2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    4ea4:	4b65      	ldr	r3, [pc, #404]	; (503c <system_clock_init+0x1ac>)
    4ea6:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    4ea8:	1c3b      	adds	r3, r7, #0
    4eaa:	3380      	adds	r3, #128	; 0x80
    4eac:	1c18      	adds	r0, r3, #0
    4eae:	4b64      	ldr	r3, [pc, #400]	; (5040 <system_clock_init+0x1b0>)
    4eb0:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4eb2:	1c3b      	adds	r3, r7, #0
    4eb4:	3380      	adds	r3, #128	; 0x80
    4eb6:	2204      	movs	r2, #4
    4eb8:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    4eba:	1c3b      	adds	r3, r7, #0
    4ebc:	3380      	adds	r3, #128	; 0x80
    4ebe:	2200      	movs	r2, #0
    4ec0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4ec2:	4b60      	ldr	r3, [pc, #384]	; (5044 <system_clock_init+0x1b4>)
    4ec4:	681b      	ldr	r3, [r3, #0]
    4ec6:	0e9b      	lsrs	r3, r3, #26
    4ec8:	2294      	movs	r2, #148	; 0x94
    4eca:	19d2      	adds	r2, r2, r7
    4ecc:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4ece:	2294      	movs	r2, #148	; 0x94
    4ed0:	19d2      	adds	r2, r2, r7
    4ed2:	6813      	ldr	r3, [r2, #0]
    4ed4:	2b3f      	cmp	r3, #63	; 0x3f
    4ed6:	d103      	bne.n	4ee0 <system_clock_init+0x50>
		coarse = 0x1f;
    4ed8:	231f      	movs	r3, #31
    4eda:	2294      	movs	r2, #148	; 0x94
    4edc:	19d2      	adds	r2, r2, r7
    4ede:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    4ee0:	2294      	movs	r2, #148	; 0x94
    4ee2:	19d2      	adds	r2, r2, r7
    4ee4:	6813      	ldr	r3, [r2, #0]
    4ee6:	b2da      	uxtb	r2, r3
    4ee8:	1c3b      	adds	r3, r7, #0
    4eea:	3380      	adds	r3, #128	; 0x80
    4eec:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4eee:	1c3b      	adds	r3, r7, #0
    4ef0:	3380      	adds	r3, #128	; 0x80
    4ef2:	2200      	movs	r2, #0
    4ef4:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4ef6:	1c3b      	adds	r3, r7, #0
    4ef8:	3380      	adds	r3, #128	; 0x80
    4efa:	2200      	movs	r2, #0
    4efc:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4efe:	1c3b      	adds	r3, r7, #0
    4f00:	3380      	adds	r3, #128	; 0x80
    4f02:	2200      	movs	r2, #0
    4f04:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4f06:	1c3b      	adds	r3, r7, #0
    4f08:	3380      	adds	r3, #128	; 0x80
    4f0a:	2200      	movs	r2, #0
    4f0c:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    4f0e:	1c3b      	adds	r3, r7, #0
    4f10:	3380      	adds	r3, #128	; 0x80
    4f12:	2206      	movs	r2, #6
    4f14:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4f16:	1c3b      	adds	r3, r7, #0
    4f18:	3380      	adds	r3, #128	; 0x80
    4f1a:	2207      	movs	r2, #7
    4f1c:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4f1e:	1c3b      	adds	r3, r7, #0
    4f20:	3380      	adds	r3, #128	; 0x80
    4f22:	223f      	movs	r2, #63	; 0x3f
    4f24:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4f26:	1c3b      	adds	r3, r7, #0
    4f28:	3380      	adds	r3, #128	; 0x80
    4f2a:	1c18      	adds	r0, r3, #0
    4f2c:	4b46      	ldr	r3, [pc, #280]	; (5048 <system_clock_init+0x1b8>)
    4f2e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    4f30:	1c3b      	adds	r3, r7, #0
    4f32:	337c      	adds	r3, #124	; 0x7c
    4f34:	1c18      	adds	r0, r3, #0
    4f36:	4b45      	ldr	r3, [pc, #276]	; (504c <system_clock_init+0x1bc>)
    4f38:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4f3a:	1c3b      	adds	r3, r7, #0
    4f3c:	337c      	adds	r3, #124	; 0x7c
    4f3e:	2200      	movs	r2, #0
    4f40:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    4f42:	1c3b      	adds	r3, r7, #0
    4f44:	337c      	adds	r3, #124	; 0x7c
    4f46:	2201      	movs	r2, #1
    4f48:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4f4a:	1c3b      	adds	r3, r7, #0
    4f4c:	337c      	adds	r3, #124	; 0x7c
    4f4e:	2200      	movs	r2, #0
    4f50:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4f52:	1c3b      	adds	r3, r7, #0
    4f54:	337c      	adds	r3, #124	; 0x7c
    4f56:	1c18      	adds	r0, r3, #0
    4f58:	4b3d      	ldr	r3, [pc, #244]	; (5050 <system_clock_init+0x1c0>)
    4f5a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4f5c:	2006      	movs	r0, #6
    4f5e:	4b3d      	ldr	r3, [pc, #244]	; (5054 <system_clock_init+0x1c4>)
    4f60:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4f62:	4b3d      	ldr	r3, [pc, #244]	; (5058 <system_clock_init+0x1c8>)
    4f64:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4f66:	1c3b      	adds	r3, r7, #0
    4f68:	3364      	adds	r3, #100	; 0x64
    4f6a:	1c18      	adds	r0, r3, #0
    4f6c:	4b3b      	ldr	r3, [pc, #236]	; (505c <system_clock_init+0x1cc>)
    4f6e:	4798      	blx	r3
    4f70:	1c3b      	adds	r3, r7, #0
    4f72:	3364      	adds	r3, #100	; 0x64
    4f74:	2206      	movs	r2, #6
    4f76:	701a      	strb	r2, [r3, #0]
    4f78:	1c3b      	adds	r3, r7, #0
    4f7a:	3364      	adds	r3, #100	; 0x64
    4f7c:	2201      	movs	r2, #1
    4f7e:	605a      	str	r2, [r3, #4]
    4f80:	1c3b      	adds	r3, r7, #0
    4f82:	3364      	adds	r3, #100	; 0x64
    4f84:	2200      	movs	r2, #0
    4f86:	721a      	strb	r2, [r3, #8]
    4f88:	1c3b      	adds	r3, r7, #0
    4f8a:	3364      	adds	r3, #100	; 0x64
    4f8c:	2200      	movs	r2, #0
    4f8e:	725a      	strb	r2, [r3, #9]
    4f90:	1c3b      	adds	r3, r7, #0
    4f92:	3364      	adds	r3, #100	; 0x64
    4f94:	2001      	movs	r0, #1
    4f96:	1c19      	adds	r1, r3, #0
    4f98:	4b31      	ldr	r3, [pc, #196]	; (5060 <system_clock_init+0x1d0>)
    4f9a:	4798      	blx	r3
    4f9c:	2001      	movs	r0, #1
    4f9e:	4b31      	ldr	r3, [pc, #196]	; (5064 <system_clock_init+0x1d4>)
    4fa0:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    4fa2:	1c3b      	adds	r3, r7, #0
    4fa4:	330c      	adds	r3, #12
    4fa6:	1c18      	adds	r0, r3, #0
    4fa8:	4b2f      	ldr	r3, [pc, #188]	; (5068 <system_clock_init+0x1d8>)
    4faa:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    4fac:	1c3b      	adds	r3, r7, #0
    4fae:	330c      	adds	r3, #12
    4fb0:	2201      	movs	r2, #1
    4fb2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    4fb4:	1c3b      	adds	r3, r7, #0
    4fb6:	330c      	adds	r3, #12
    4fb8:	2000      	movs	r0, #0
    4fba:	1c19      	adds	r1, r3, #0
    4fbc:	4b2b      	ldr	r3, [pc, #172]	; (506c <system_clock_init+0x1dc>)
    4fbe:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    4fc0:	2000      	movs	r0, #0
    4fc2:	4b2b      	ldr	r3, [pc, #172]	; (5070 <system_clock_init+0x1e0>)
    4fc4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4fc6:	2007      	movs	r0, #7
    4fc8:	4b22      	ldr	r3, [pc, #136]	; (5054 <system_clock_init+0x1c4>)
    4fca:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4fcc:	46c0      	nop			; (mov r8, r8)
    4fce:	2007      	movs	r0, #7
    4fd0:	4b28      	ldr	r3, [pc, #160]	; (5074 <system_clock_init+0x1e4>)
    4fd2:	4798      	blx	r3
    4fd4:	1c03      	adds	r3, r0, #0
    4fd6:	2201      	movs	r2, #1
    4fd8:	4053      	eors	r3, r2
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d1f6      	bne.n	4fce <system_clock_init+0x13e>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    4fe0:	2000      	movs	r0, #0
    4fe2:	4b25      	ldr	r3, [pc, #148]	; (5078 <system_clock_init+0x1e8>)
    4fe4:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    4fe6:	2000      	movs	r0, #0
    4fe8:	2100      	movs	r1, #0
    4fea:	4b24      	ldr	r3, [pc, #144]	; (507c <system_clock_init+0x1ec>)
    4fec:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    4fee:	2001      	movs	r0, #1
    4ff0:	2100      	movs	r1, #0
    4ff2:	4b22      	ldr	r3, [pc, #136]	; (507c <system_clock_init+0x1ec>)
    4ff4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    4ff6:	2002      	movs	r0, #2
    4ff8:	2100      	movs	r1, #0
    4ffa:	4b20      	ldr	r3, [pc, #128]	; (507c <system_clock_init+0x1ec>)
    4ffc:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4ffe:	1c3b      	adds	r3, r7, #0
    5000:	1c18      	adds	r0, r3, #0
    5002:	4b16      	ldr	r3, [pc, #88]	; (505c <system_clock_init+0x1cc>)
    5004:	4798      	blx	r3
    5006:	1c3b      	adds	r3, r7, #0
    5008:	2207      	movs	r2, #7
    500a:	701a      	strb	r2, [r3, #0]
    500c:	1c3b      	adds	r3, r7, #0
    500e:	2201      	movs	r2, #1
    5010:	605a      	str	r2, [r3, #4]
    5012:	1c3b      	adds	r3, r7, #0
    5014:	2200      	movs	r2, #0
    5016:	721a      	strb	r2, [r3, #8]
    5018:	1c3b      	adds	r3, r7, #0
    501a:	2200      	movs	r2, #0
    501c:	725a      	strb	r2, [r3, #9]
    501e:	1c3b      	adds	r3, r7, #0
    5020:	2000      	movs	r0, #0
    5022:	1c19      	adds	r1, r3, #0
    5024:	4b0e      	ldr	r3, [pc, #56]	; (5060 <system_clock_init+0x1d0>)
    5026:	4798      	blx	r3
    5028:	2000      	movs	r0, #0
    502a:	4b0e      	ldr	r3, [pc, #56]	; (5064 <system_clock_init+0x1d4>)
    502c:	4798      	blx	r3
#endif
}
    502e:	46bd      	mov	sp, r7
    5030:	b026      	add	sp, #152	; 0x98
    5032:	bd80      	pop	{r7, pc}
    5034:	40000800 	.word	0x40000800
    5038:	00004aa1 	.word	0x00004aa1
    503c:	00004e59 	.word	0x00004e59
    5040:	000049dd 	.word	0x000049dd
    5044:	00806024 	.word	0x00806024
    5048:	00004c5d 	.word	0x00004c5d
    504c:	000049bd 	.word	0x000049bd
    5050:	00004bf5 	.word	0x00004bf5
    5054:	00004d29 	.word	0x00004d29
    5058:	00005121 	.word	0x00005121
    505c:	0000497d 	.word	0x0000497d
    5060:	00005151 	.word	0x00005151
    5064:	00005279 	.word	0x00005279
    5068:	000049a9 	.word	0x000049a9
    506c:	000053c1 	.word	0x000053c1
    5070:	00005401 	.word	0x00005401
    5074:	00004dd5 	.word	0x00004dd5
    5078:	00004a2d 	.word	0x00004a2d
    507c:	00004a4d 	.word	0x00004a4d

00005080 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5080:	b580      	push	{r7, lr}
    5082:	b082      	sub	sp, #8
    5084:	af00      	add	r7, sp, #0
    5086:	1c02      	adds	r2, r0, #0
    5088:	6039      	str	r1, [r7, #0]
    508a:	1dfb      	adds	r3, r7, #7
    508c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    508e:	1dfb      	adds	r3, r7, #7
    5090:	781b      	ldrb	r3, [r3, #0]
    5092:	2b01      	cmp	r3, #1
    5094:	d00a      	beq.n	50ac <system_apb_clock_set_mask+0x2c>
    5096:	2b02      	cmp	r3, #2
    5098:	d00f      	beq.n	50ba <system_apb_clock_set_mask+0x3a>
    509a:	2b00      	cmp	r3, #0
    509c:	d114      	bne.n	50c8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    509e:	4b0e      	ldr	r3, [pc, #56]	; (50d8 <system_apb_clock_set_mask+0x58>)
    50a0:	4a0d      	ldr	r2, [pc, #52]	; (50d8 <system_apb_clock_set_mask+0x58>)
    50a2:	6991      	ldr	r1, [r2, #24]
    50a4:	683a      	ldr	r2, [r7, #0]
    50a6:	430a      	orrs	r2, r1
    50a8:	619a      	str	r2, [r3, #24]
			break;
    50aa:	e00f      	b.n	50cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    50ac:	4b0a      	ldr	r3, [pc, #40]	; (50d8 <system_apb_clock_set_mask+0x58>)
    50ae:	4a0a      	ldr	r2, [pc, #40]	; (50d8 <system_apb_clock_set_mask+0x58>)
    50b0:	69d1      	ldr	r1, [r2, #28]
    50b2:	683a      	ldr	r2, [r7, #0]
    50b4:	430a      	orrs	r2, r1
    50b6:	61da      	str	r2, [r3, #28]
			break;
    50b8:	e008      	b.n	50cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    50ba:	4b07      	ldr	r3, [pc, #28]	; (50d8 <system_apb_clock_set_mask+0x58>)
    50bc:	4a06      	ldr	r2, [pc, #24]	; (50d8 <system_apb_clock_set_mask+0x58>)
    50be:	6a11      	ldr	r1, [r2, #32]
    50c0:	683a      	ldr	r2, [r7, #0]
    50c2:	430a      	orrs	r2, r1
    50c4:	621a      	str	r2, [r3, #32]
			break;
    50c6:	e001      	b.n	50cc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    50c8:	2317      	movs	r3, #23
    50ca:	e000      	b.n	50ce <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    50cc:	2300      	movs	r3, #0
}
    50ce:	1c18      	adds	r0, r3, #0
    50d0:	46bd      	mov	sp, r7
    50d2:	b002      	add	sp, #8
    50d4:	bd80      	pop	{r7, pc}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	40000400 	.word	0x40000400

000050dc <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    50dc:	b580      	push	{r7, lr}
    50de:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    50e0:	4b01      	ldr	r3, [pc, #4]	; (50e8 <system_interrupt_enter_critical_section+0xc>)
    50e2:	4798      	blx	r3
}
    50e4:	46bd      	mov	sp, r7
    50e6:	bd80      	pop	{r7, pc}
    50e8:	000048f1 	.word	0x000048f1

000050ec <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    50ec:	b580      	push	{r7, lr}
    50ee:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    50f0:	4b01      	ldr	r3, [pc, #4]	; (50f8 <system_interrupt_leave_critical_section+0xc>)
    50f2:	4798      	blx	r3
}
    50f4:	46bd      	mov	sp, r7
    50f6:	bd80      	pop	{r7, pc}
    50f8:	00004941 	.word	0x00004941

000050fc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    50fc:	b580      	push	{r7, lr}
    50fe:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5100:	4b06      	ldr	r3, [pc, #24]	; (511c <system_gclk_is_syncing+0x20>)
    5102:	785b      	ldrb	r3, [r3, #1]
    5104:	b2db      	uxtb	r3, r3
    5106:	b2db      	uxtb	r3, r3
    5108:	b25b      	sxtb	r3, r3
    510a:	2b00      	cmp	r3, #0
    510c:	da01      	bge.n	5112 <system_gclk_is_syncing+0x16>
		return true;
    510e:	2301      	movs	r3, #1
    5110:	e000      	b.n	5114 <system_gclk_is_syncing+0x18>
	}

	return false;
    5112:	2300      	movs	r3, #0
}
    5114:	1c18      	adds	r0, r3, #0
    5116:	46bd      	mov	sp, r7
    5118:	bd80      	pop	{r7, pc}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	40000c00 	.word	0x40000c00

00005120 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5120:	b580      	push	{r7, lr}
    5122:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5124:	2000      	movs	r0, #0
    5126:	2108      	movs	r1, #8
    5128:	4b07      	ldr	r3, [pc, #28]	; (5148 <system_gclk_init+0x28>)
    512a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    512c:	4b07      	ldr	r3, [pc, #28]	; (514c <system_gclk_init+0x2c>)
    512e:	2201      	movs	r2, #1
    5130:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5132:	46c0      	nop			; (mov r8, r8)
    5134:	4b05      	ldr	r3, [pc, #20]	; (514c <system_gclk_init+0x2c>)
    5136:	781b      	ldrb	r3, [r3, #0]
    5138:	b2db      	uxtb	r3, r3
    513a:	1c1a      	adds	r2, r3, #0
    513c:	2301      	movs	r3, #1
    513e:	4013      	ands	r3, r2
    5140:	d1f8      	bne.n	5134 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5142:	46bd      	mov	sp, r7
    5144:	bd80      	pop	{r7, pc}
    5146:	46c0      	nop			; (mov r8, r8)
    5148:	00005081 	.word	0x00005081
    514c:	40000c00 	.word	0x40000c00

00005150 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5150:	b580      	push	{r7, lr}
    5152:	b086      	sub	sp, #24
    5154:	af00      	add	r7, sp, #0
    5156:	1c02      	adds	r2, r0, #0
    5158:	6039      	str	r1, [r7, #0]
    515a:	1dfb      	adds	r3, r7, #7
    515c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    515e:	1dfb      	adds	r3, r7, #7
    5160:	781b      	ldrb	r3, [r3, #0]
    5162:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    5164:	1dfb      	adds	r3, r7, #7
    5166:	781b      	ldrb	r3, [r3, #0]
    5168:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    516a:	683b      	ldr	r3, [r7, #0]
    516c:	781b      	ldrb	r3, [r3, #0]
    516e:	021b      	lsls	r3, r3, #8
    5170:	697a      	ldr	r2, [r7, #20]
    5172:	4313      	orrs	r3, r2
    5174:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5176:	683b      	ldr	r3, [r7, #0]
    5178:	785b      	ldrb	r3, [r3, #1]
    517a:	2b00      	cmp	r3, #0
    517c:	d004      	beq.n	5188 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    517e:	697b      	ldr	r3, [r7, #20]
    5180:	2280      	movs	r2, #128	; 0x80
    5182:	02d2      	lsls	r2, r2, #11
    5184:	4313      	orrs	r3, r2
    5186:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5188:	683b      	ldr	r3, [r7, #0]
    518a:	7a5b      	ldrb	r3, [r3, #9]
    518c:	2b00      	cmp	r3, #0
    518e:	d004      	beq.n	519a <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5190:	697b      	ldr	r3, [r7, #20]
    5192:	2280      	movs	r2, #128	; 0x80
    5194:	0312      	lsls	r2, r2, #12
    5196:	4313      	orrs	r3, r2
    5198:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    519a:	683b      	ldr	r3, [r7, #0]
    519c:	685b      	ldr	r3, [r3, #4]
    519e:	2b01      	cmp	r3, #1
    51a0:	d92c      	bls.n	51fc <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    51a2:	683b      	ldr	r3, [r7, #0]
    51a4:	685a      	ldr	r2, [r3, #4]
    51a6:	683b      	ldr	r3, [r7, #0]
    51a8:	685b      	ldr	r3, [r3, #4]
    51aa:	3b01      	subs	r3, #1
    51ac:	4013      	ands	r3, r2
    51ae:	d11a      	bne.n	51e6 <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    51b0:	2300      	movs	r3, #0
    51b2:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    51b4:	2302      	movs	r3, #2
    51b6:	60bb      	str	r3, [r7, #8]
    51b8:	e005      	b.n	51c6 <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    51ba:	68fb      	ldr	r3, [r7, #12]
    51bc:	3301      	adds	r3, #1
    51be:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    51c0:	68bb      	ldr	r3, [r7, #8]
    51c2:	005b      	lsls	r3, r3, #1
    51c4:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    51c6:	683b      	ldr	r3, [r7, #0]
    51c8:	685a      	ldr	r2, [r3, #4]
    51ca:	68bb      	ldr	r3, [r7, #8]
    51cc:	429a      	cmp	r2, r3
    51ce:	d8f4      	bhi.n	51ba <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    51d0:	68fb      	ldr	r3, [r7, #12]
    51d2:	021b      	lsls	r3, r3, #8
    51d4:	693a      	ldr	r2, [r7, #16]
    51d6:	4313      	orrs	r3, r2
    51d8:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    51da:	697b      	ldr	r3, [r7, #20]
    51dc:	2280      	movs	r2, #128	; 0x80
    51de:	0352      	lsls	r2, r2, #13
    51e0:	4313      	orrs	r3, r2
    51e2:	617b      	str	r3, [r7, #20]
    51e4:	e00a      	b.n	51fc <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    51e6:	683b      	ldr	r3, [r7, #0]
    51e8:	685b      	ldr	r3, [r3, #4]
    51ea:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    51ec:	693a      	ldr	r2, [r7, #16]
    51ee:	4313      	orrs	r3, r2
    51f0:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    51f2:	697b      	ldr	r3, [r7, #20]
    51f4:	2280      	movs	r2, #128	; 0x80
    51f6:	0292      	lsls	r2, r2, #10
    51f8:	4313      	orrs	r3, r2
    51fa:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    51fc:	683b      	ldr	r3, [r7, #0]
    51fe:	7a1b      	ldrb	r3, [r3, #8]
    5200:	2b00      	cmp	r3, #0
    5202:	d005      	beq.n	5210 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5204:	697b      	ldr	r3, [r7, #20]
    5206:	2280      	movs	r2, #128	; 0x80
    5208:	0392      	lsls	r2, r2, #14
    520a:	4313      	orrs	r3, r2
    520c:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    520e:	e7ff      	b.n	5210 <system_gclk_gen_set_config+0xc0>
    5210:	46c0      	nop			; (mov r8, r8)
    5212:	4b14      	ldr	r3, [pc, #80]	; (5264 <system_gclk_gen_set_config+0x114>)
    5214:	4798      	blx	r3
    5216:	1c03      	adds	r3, r0, #0
    5218:	2b00      	cmp	r3, #0
    521a:	d1fa      	bne.n	5212 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    521c:	4b12      	ldr	r3, [pc, #72]	; (5268 <system_gclk_gen_set_config+0x118>)
    521e:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5220:	4b12      	ldr	r3, [pc, #72]	; (526c <system_gclk_gen_set_config+0x11c>)
    5222:	1dfa      	adds	r2, r7, #7
    5224:	7812      	ldrb	r2, [r2, #0]
    5226:	701a      	strb	r2, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5228:	46c0      	nop			; (mov r8, r8)
    522a:	4b0e      	ldr	r3, [pc, #56]	; (5264 <system_gclk_gen_set_config+0x114>)
    522c:	4798      	blx	r3
    522e:	1c03      	adds	r3, r0, #0
    5230:	2b00      	cmp	r3, #0
    5232:	d1fa      	bne.n	522a <system_gclk_gen_set_config+0xda>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5234:	4b0e      	ldr	r3, [pc, #56]	; (5270 <system_gclk_gen_set_config+0x120>)
    5236:	693a      	ldr	r2, [r7, #16]
    5238:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    523a:	46c0      	nop			; (mov r8, r8)
    523c:	4b09      	ldr	r3, [pc, #36]	; (5264 <system_gclk_gen_set_config+0x114>)
    523e:	4798      	blx	r3
    5240:	1c03      	adds	r3, r0, #0
    5242:	2b00      	cmp	r3, #0
    5244:	d1fa      	bne.n	523c <system_gclk_gen_set_config+0xec>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5246:	4b0a      	ldr	r3, [pc, #40]	; (5270 <system_gclk_gen_set_config+0x120>)
    5248:	4a09      	ldr	r2, [pc, #36]	; (5270 <system_gclk_gen_set_config+0x120>)
    524a:	6851      	ldr	r1, [r2, #4]
    524c:	2280      	movs	r2, #128	; 0x80
    524e:	0252      	lsls	r2, r2, #9
    5250:	4011      	ands	r1, r2
    5252:	697a      	ldr	r2, [r7, #20]
    5254:	430a      	orrs	r2, r1
    5256:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    5258:	4b06      	ldr	r3, [pc, #24]	; (5274 <system_gclk_gen_set_config+0x124>)
    525a:	4798      	blx	r3
}
    525c:	46bd      	mov	sp, r7
    525e:	b006      	add	sp, #24
    5260:	bd80      	pop	{r7, pc}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	000050fd 	.word	0x000050fd
    5268:	000050dd 	.word	0x000050dd
    526c:	40000c08 	.word	0x40000c08
    5270:	40000c00 	.word	0x40000c00
    5274:	000050ed 	.word	0x000050ed

00005278 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5278:	b580      	push	{r7, lr}
    527a:	b082      	sub	sp, #8
    527c:	af00      	add	r7, sp, #0
    527e:	1c02      	adds	r2, r0, #0
    5280:	1dfb      	adds	r3, r7, #7
    5282:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5284:	46c0      	nop			; (mov r8, r8)
    5286:	4b0e      	ldr	r3, [pc, #56]	; (52c0 <system_gclk_gen_enable+0x48>)
    5288:	4798      	blx	r3
    528a:	1c03      	adds	r3, r0, #0
    528c:	2b00      	cmp	r3, #0
    528e:	d1fa      	bne.n	5286 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5290:	4b0c      	ldr	r3, [pc, #48]	; (52c4 <system_gclk_gen_enable+0x4c>)
    5292:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5294:	4b0c      	ldr	r3, [pc, #48]	; (52c8 <system_gclk_gen_enable+0x50>)
    5296:	1dfa      	adds	r2, r7, #7
    5298:	7812      	ldrb	r2, [r2, #0]
    529a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    529c:	46c0      	nop			; (mov r8, r8)
    529e:	4b08      	ldr	r3, [pc, #32]	; (52c0 <system_gclk_gen_enable+0x48>)
    52a0:	4798      	blx	r3
    52a2:	1c03      	adds	r3, r0, #0
    52a4:	2b00      	cmp	r3, #0
    52a6:	d1fa      	bne.n	529e <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    52a8:	4b08      	ldr	r3, [pc, #32]	; (52cc <system_gclk_gen_enable+0x54>)
    52aa:	4a08      	ldr	r2, [pc, #32]	; (52cc <system_gclk_gen_enable+0x54>)
    52ac:	6852      	ldr	r2, [r2, #4]
    52ae:	2180      	movs	r1, #128	; 0x80
    52b0:	0249      	lsls	r1, r1, #9
    52b2:	430a      	orrs	r2, r1
    52b4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    52b6:	4b06      	ldr	r3, [pc, #24]	; (52d0 <system_gclk_gen_enable+0x58>)
    52b8:	4798      	blx	r3
}
    52ba:	46bd      	mov	sp, r7
    52bc:	b002      	add	sp, #8
    52be:	bd80      	pop	{r7, pc}
    52c0:	000050fd 	.word	0x000050fd
    52c4:	000050dd 	.word	0x000050dd
    52c8:	40000c04 	.word	0x40000c04
    52cc:	40000c00 	.word	0x40000c00
    52d0:	000050ed 	.word	0x000050ed

000052d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    52d4:	b580      	push	{r7, lr}
    52d6:	b086      	sub	sp, #24
    52d8:	af00      	add	r7, sp, #0
    52da:	1c02      	adds	r2, r0, #0
    52dc:	1dfb      	adds	r3, r7, #7
    52de:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    52e0:	46c0      	nop			; (mov r8, r8)
    52e2:	4b2f      	ldr	r3, [pc, #188]	; (53a0 <system_gclk_gen_get_hz+0xcc>)
    52e4:	4798      	blx	r3
    52e6:	1c03      	adds	r3, r0, #0
    52e8:	2b00      	cmp	r3, #0
    52ea:	d1fa      	bne.n	52e2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    52ec:	4b2d      	ldr	r3, [pc, #180]	; (53a4 <system_gclk_gen_get_hz+0xd0>)
    52ee:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    52f0:	4b2d      	ldr	r3, [pc, #180]	; (53a8 <system_gclk_gen_get_hz+0xd4>)
    52f2:	1dfa      	adds	r2, r7, #7
    52f4:	7812      	ldrb	r2, [r2, #0]
    52f6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    52f8:	46c0      	nop			; (mov r8, r8)
    52fa:	4b29      	ldr	r3, [pc, #164]	; (53a0 <system_gclk_gen_get_hz+0xcc>)
    52fc:	4798      	blx	r3
    52fe:	1c03      	adds	r3, r0, #0
    5300:	2b00      	cmp	r3, #0
    5302:	d1fa      	bne.n	52fa <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5304:	4b29      	ldr	r3, [pc, #164]	; (53ac <system_gclk_gen_get_hz+0xd8>)
    5306:	685b      	ldr	r3, [r3, #4]
    5308:	0a1b      	lsrs	r3, r3, #8
    530a:	1c1a      	adds	r2, r3, #0
    530c:	231f      	movs	r3, #31
    530e:	4013      	ands	r3, r2
    5310:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5312:	1c18      	adds	r0, r3, #0
    5314:	4b26      	ldr	r3, [pc, #152]	; (53b0 <system_gclk_gen_get_hz+0xdc>)
    5316:	4798      	blx	r3
    5318:	1c03      	adds	r3, r0, #0
    531a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    531c:	4b22      	ldr	r3, [pc, #136]	; (53a8 <system_gclk_gen_get_hz+0xd4>)
    531e:	1dfa      	adds	r2, r7, #7
    5320:	7812      	ldrb	r2, [r2, #0]
    5322:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5324:	4b21      	ldr	r3, [pc, #132]	; (53ac <system_gclk_gen_get_hz+0xd8>)
    5326:	685b      	ldr	r3, [r3, #4]
    5328:	0d1b      	lsrs	r3, r3, #20
    532a:	1c1a      	adds	r2, r3, #0
    532c:	2301      	movs	r3, #1
    532e:	4013      	ands	r3, r2
    5330:	b2da      	uxtb	r2, r3
    5332:	1c3b      	adds	r3, r7, #0
    5334:	3313      	adds	r3, #19
    5336:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5338:	4b1e      	ldr	r3, [pc, #120]	; (53b4 <system_gclk_gen_get_hz+0xe0>)
    533a:	1dfa      	adds	r2, r7, #7
    533c:	7812      	ldrb	r2, [r2, #0]
    533e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5340:	46c0      	nop			; (mov r8, r8)
    5342:	4b17      	ldr	r3, [pc, #92]	; (53a0 <system_gclk_gen_get_hz+0xcc>)
    5344:	4798      	blx	r3
    5346:	1c03      	adds	r3, r0, #0
    5348:	2b00      	cmp	r3, #0
    534a:	d1fa      	bne.n	5342 <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    534c:	4b17      	ldr	r3, [pc, #92]	; (53ac <system_gclk_gen_get_hz+0xd8>)
    534e:	689b      	ldr	r3, [r3, #8]
    5350:	0a1b      	lsrs	r3, r3, #8
    5352:	2200      	movs	r2, #0
    5354:	4393      	bics	r3, r2
    5356:	b29b      	uxth	r3, r3
    5358:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    535a:	4b17      	ldr	r3, [pc, #92]	; (53b8 <system_gclk_gen_get_hz+0xe4>)
    535c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    535e:	1c3b      	adds	r3, r7, #0
    5360:	3313      	adds	r3, #19
    5362:	781b      	ldrb	r3, [r3, #0]
    5364:	2b00      	cmp	r3, #0
    5366:	d109      	bne.n	537c <system_gclk_gen_get_hz+0xa8>
    5368:	68fb      	ldr	r3, [r7, #12]
    536a:	2b01      	cmp	r3, #1
    536c:	d906      	bls.n	537c <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
    536e:	4b13      	ldr	r3, [pc, #76]	; (53bc <system_gclk_gen_get_hz+0xe8>)
    5370:	6978      	ldr	r0, [r7, #20]
    5372:	68f9      	ldr	r1, [r7, #12]
    5374:	4798      	blx	r3
    5376:	1c03      	adds	r3, r0, #0
    5378:	617b      	str	r3, [r7, #20]
    537a:	e00b      	b.n	5394 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    537c:	1c3b      	adds	r3, r7, #0
    537e:	3313      	adds	r3, #19
    5380:	781b      	ldrb	r3, [r3, #0]
    5382:	2b00      	cmp	r3, #0
    5384:	d006      	beq.n	5394 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    5386:	68fb      	ldr	r3, [r7, #12]
    5388:	3301      	adds	r3, #1
    538a:	697a      	ldr	r2, [r7, #20]
    538c:	1c11      	adds	r1, r2, #0
    538e:	40d9      	lsrs	r1, r3
    5390:	1c0b      	adds	r3, r1, #0
    5392:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    5394:	697b      	ldr	r3, [r7, #20]
}
    5396:	1c18      	adds	r0, r3, #0
    5398:	46bd      	mov	sp, r7
    539a:	b006      	add	sp, #24
    539c:	bd80      	pop	{r7, pc}
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	000050fd 	.word	0x000050fd
    53a4:	000050dd 	.word	0x000050dd
    53a8:	40000c04 	.word	0x40000c04
    53ac:	40000c00 	.word	0x40000c00
    53b0:	00004b31 	.word	0x00004b31
    53b4:	40000c08 	.word	0x40000c08
    53b8:	000050ed 	.word	0x000050ed
    53bc:	00005871 	.word	0x00005871

000053c0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    53c0:	b580      	push	{r7, lr}
    53c2:	b084      	sub	sp, #16
    53c4:	af00      	add	r7, sp, #0
    53c6:	1c02      	adds	r2, r0, #0
    53c8:	6039      	str	r1, [r7, #0]
    53ca:	1dfb      	adds	r3, r7, #7
    53cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    53ce:	1dfb      	adds	r3, r7, #7
    53d0:	781b      	ldrb	r3, [r3, #0]
    53d2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    53d4:	683b      	ldr	r3, [r7, #0]
    53d6:	781b      	ldrb	r3, [r3, #0]
    53d8:	021b      	lsls	r3, r3, #8
    53da:	68fa      	ldr	r2, [r7, #12]
    53dc:	4313      	orrs	r3, r2
    53de:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    53e0:	1dfb      	adds	r3, r7, #7
    53e2:	781b      	ldrb	r3, [r3, #0]
    53e4:	1c18      	adds	r0, r3, #0
    53e6:	4b04      	ldr	r3, [pc, #16]	; (53f8 <system_gclk_chan_set_config+0x38>)
    53e8:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    53ea:	4b04      	ldr	r3, [pc, #16]	; (53fc <system_gclk_chan_set_config+0x3c>)
    53ec:	68fa      	ldr	r2, [r7, #12]
    53ee:	b292      	uxth	r2, r2
    53f0:	805a      	strh	r2, [r3, #2]
}
    53f2:	46bd      	mov	sp, r7
    53f4:	b004      	add	sp, #16
    53f6:	bd80      	pop	{r7, pc}
    53f8:	00005445 	.word	0x00005445
    53fc:	40000c00 	.word	0x40000c00

00005400 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5400:	b580      	push	{r7, lr}
    5402:	b082      	sub	sp, #8
    5404:	af00      	add	r7, sp, #0
    5406:	1c02      	adds	r2, r0, #0
    5408:	1dfb      	adds	r3, r7, #7
    540a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    540c:	4b09      	ldr	r3, [pc, #36]	; (5434 <system_gclk_chan_enable+0x34>)
    540e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5410:	4b09      	ldr	r3, [pc, #36]	; (5438 <system_gclk_chan_enable+0x38>)
    5412:	1dfa      	adds	r2, r7, #7
    5414:	7812      	ldrb	r2, [r2, #0]
    5416:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5418:	4b08      	ldr	r3, [pc, #32]	; (543c <system_gclk_chan_enable+0x3c>)
    541a:	4a08      	ldr	r2, [pc, #32]	; (543c <system_gclk_chan_enable+0x3c>)
    541c:	8852      	ldrh	r2, [r2, #2]
    541e:	b292      	uxth	r2, r2
    5420:	2180      	movs	r1, #128	; 0x80
    5422:	01c9      	lsls	r1, r1, #7
    5424:	430a      	orrs	r2, r1
    5426:	b292      	uxth	r2, r2
    5428:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    542a:	4b05      	ldr	r3, [pc, #20]	; (5440 <system_gclk_chan_enable+0x40>)
    542c:	4798      	blx	r3
}
    542e:	46bd      	mov	sp, r7
    5430:	b002      	add	sp, #8
    5432:	bd80      	pop	{r7, pc}
    5434:	000050dd 	.word	0x000050dd
    5438:	40000c02 	.word	0x40000c02
    543c:	40000c00 	.word	0x40000c00
    5440:	000050ed 	.word	0x000050ed

00005444 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5444:	b580      	push	{r7, lr}
    5446:	b084      	sub	sp, #16
    5448:	af00      	add	r7, sp, #0
    544a:	1c02      	adds	r2, r0, #0
    544c:	1dfb      	adds	r3, r7, #7
    544e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5450:	4b1c      	ldr	r3, [pc, #112]	; (54c4 <system_gclk_chan_disable+0x80>)
    5452:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5454:	4b1c      	ldr	r3, [pc, #112]	; (54c8 <system_gclk_chan_disable+0x84>)
    5456:	1dfa      	adds	r2, r7, #7
    5458:	7812      	ldrb	r2, [r2, #0]
    545a:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    545c:	4b1b      	ldr	r3, [pc, #108]	; (54cc <system_gclk_chan_disable+0x88>)
    545e:	885b      	ldrh	r3, [r3, #2]
    5460:	b29b      	uxth	r3, r3
    5462:	0a1b      	lsrs	r3, r3, #8
    5464:	1c1a      	adds	r2, r3, #0
    5466:	230f      	movs	r3, #15
    5468:	4013      	ands	r3, r2
    546a:	b2db      	uxtb	r3, r3
    546c:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    546e:	4b17      	ldr	r3, [pc, #92]	; (54cc <system_gclk_chan_disable+0x88>)
    5470:	8859      	ldrh	r1, [r3, #2]
    5472:	4a17      	ldr	r2, [pc, #92]	; (54d0 <system_gclk_chan_disable+0x8c>)
    5474:	400a      	ands	r2, r1
    5476:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5478:	4b14      	ldr	r3, [pc, #80]	; (54cc <system_gclk_chan_disable+0x88>)
    547a:	4a14      	ldr	r2, [pc, #80]	; (54cc <system_gclk_chan_disable+0x88>)
    547c:	8852      	ldrh	r2, [r2, #2]
    547e:	b291      	uxth	r1, r2
    5480:	4a14      	ldr	r2, [pc, #80]	; (54d4 <system_gclk_chan_disable+0x90>)
    5482:	400a      	ands	r2, r1
    5484:	b292      	uxth	r2, r2
    5486:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5488:	46c0      	nop			; (mov r8, r8)
    548a:	4b10      	ldr	r3, [pc, #64]	; (54cc <system_gclk_chan_disable+0x88>)
    548c:	885b      	ldrh	r3, [r3, #2]
    548e:	b29b      	uxth	r3, r3
    5490:	1c1a      	adds	r2, r3, #0
    5492:	2380      	movs	r3, #128	; 0x80
    5494:	01db      	lsls	r3, r3, #7
    5496:	4013      	ands	r3, r2
    5498:	d1f7      	bne.n	548a <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    549a:	4b0c      	ldr	r3, [pc, #48]	; (54cc <system_gclk_chan_disable+0x88>)
    549c:	68fa      	ldr	r2, [r7, #12]
    549e:	b2d2      	uxtb	r2, r2
    54a0:	1c11      	adds	r1, r2, #0
    54a2:	220f      	movs	r2, #15
    54a4:	400a      	ands	r2, r1
    54a6:	b2d1      	uxtb	r1, r2
    54a8:	220f      	movs	r2, #15
    54aa:	400a      	ands	r2, r1
    54ac:	0212      	lsls	r2, r2, #8
    54ae:	8858      	ldrh	r0, [r3, #2]
    54b0:	4907      	ldr	r1, [pc, #28]	; (54d0 <system_gclk_chan_disable+0x8c>)
    54b2:	4001      	ands	r1, r0
    54b4:	430a      	orrs	r2, r1
    54b6:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    54b8:	4b07      	ldr	r3, [pc, #28]	; (54d8 <system_gclk_chan_disable+0x94>)
    54ba:	4798      	blx	r3
}
    54bc:	46bd      	mov	sp, r7
    54be:	b004      	add	sp, #16
    54c0:	bd80      	pop	{r7, pc}
    54c2:	46c0      	nop			; (mov r8, r8)
    54c4:	000050dd 	.word	0x000050dd
    54c8:	40000c02 	.word	0x40000c02
    54cc:	40000c00 	.word	0x40000c00
    54d0:	fffff0ff 	.word	0xfffff0ff
    54d4:	ffffbfff 	.word	0xffffbfff
    54d8:	000050ed 	.word	0x000050ed

000054dc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    54dc:	b580      	push	{r7, lr}
    54de:	b084      	sub	sp, #16
    54e0:	af00      	add	r7, sp, #0
    54e2:	1c02      	adds	r2, r0, #0
    54e4:	1dfb      	adds	r3, r7, #7
    54e6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    54e8:	4b0e      	ldr	r3, [pc, #56]	; (5524 <system_gclk_chan_get_hz+0x48>)
    54ea:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    54ec:	4b0e      	ldr	r3, [pc, #56]	; (5528 <system_gclk_chan_get_hz+0x4c>)
    54ee:	1dfa      	adds	r2, r7, #7
    54f0:	7812      	ldrb	r2, [r2, #0]
    54f2:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    54f4:	4b0d      	ldr	r3, [pc, #52]	; (552c <system_gclk_chan_get_hz+0x50>)
    54f6:	885b      	ldrh	r3, [r3, #2]
    54f8:	b29b      	uxth	r3, r3
    54fa:	0a1b      	lsrs	r3, r3, #8
    54fc:	1c1a      	adds	r2, r3, #0
    54fe:	230f      	movs	r3, #15
    5500:	4013      	ands	r3, r2
    5502:	b2da      	uxtb	r2, r3
    5504:	1c3b      	adds	r3, r7, #0
    5506:	330f      	adds	r3, #15
    5508:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    550a:	4b09      	ldr	r3, [pc, #36]	; (5530 <system_gclk_chan_get_hz+0x54>)
    550c:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    550e:	1c3b      	adds	r3, r7, #0
    5510:	330f      	adds	r3, #15
    5512:	781b      	ldrb	r3, [r3, #0]
    5514:	1c18      	adds	r0, r3, #0
    5516:	4b07      	ldr	r3, [pc, #28]	; (5534 <system_gclk_chan_get_hz+0x58>)
    5518:	4798      	blx	r3
    551a:	1c03      	adds	r3, r0, #0
}
    551c:	1c18      	adds	r0, r3, #0
    551e:	46bd      	mov	sp, r7
    5520:	b004      	add	sp, #16
    5522:	bd80      	pop	{r7, pc}
    5524:	000050dd 	.word	0x000050dd
    5528:	40000c02 	.word	0x40000c02
    552c:	40000c00 	.word	0x40000c00
    5530:	000050ed 	.word	0x000050ed
    5534:	000052d5 	.word	0x000052d5

00005538 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5538:	b580      	push	{r7, lr}
    553a:	b084      	sub	sp, #16
    553c:	af00      	add	r7, sp, #0
    553e:	1c02      	adds	r2, r0, #0
    5540:	1dfb      	adds	r3, r7, #7
    5542:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5544:	1c3b      	adds	r3, r7, #0
    5546:	330f      	adds	r3, #15
    5548:	1dfa      	adds	r2, r7, #7
    554a:	7812      	ldrb	r2, [r2, #0]
    554c:	09d2      	lsrs	r2, r2, #7
    554e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5550:	1c3b      	adds	r3, r7, #0
    5552:	330e      	adds	r3, #14
    5554:	1dfa      	adds	r2, r7, #7
    5556:	7812      	ldrb	r2, [r2, #0]
    5558:	0952      	lsrs	r2, r2, #5
    555a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    555c:	4b0d      	ldr	r3, [pc, #52]	; (5594 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    555e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5560:	1c3b      	adds	r3, r7, #0
    5562:	330f      	adds	r3, #15
    5564:	781b      	ldrb	r3, [r3, #0]
    5566:	2b00      	cmp	r3, #0
    5568:	d10e      	bne.n	5588 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    556a:	1c3b      	adds	r3, r7, #0
    556c:	330f      	adds	r3, #15
    556e:	781b      	ldrb	r3, [r3, #0]
    5570:	009b      	lsls	r3, r3, #2
    5572:	2210      	movs	r2, #16
    5574:	19d2      	adds	r2, r2, r7
    5576:	18d3      	adds	r3, r2, r3
    5578:	3b08      	subs	r3, #8
    557a:	681a      	ldr	r2, [r3, #0]
    557c:	1c3b      	adds	r3, r7, #0
    557e:	330e      	adds	r3, #14
    5580:	781b      	ldrb	r3, [r3, #0]
    5582:	01db      	lsls	r3, r3, #7
    5584:	18d3      	adds	r3, r2, r3
    5586:	e000      	b.n	558a <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    5588:	2300      	movs	r3, #0
	}
}
    558a:	1c18      	adds	r0, r3, #0
    558c:	46bd      	mov	sp, r7
    558e:	b004      	add	sp, #16
    5590:	bd80      	pop	{r7, pc}
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	41004400 	.word	0x41004400

00005598 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5598:	b580      	push	{r7, lr}
    559a:	b088      	sub	sp, #32
    559c:	af00      	add	r7, sp, #0
    559e:	60f8      	str	r0, [r7, #12]
    55a0:	60b9      	str	r1, [r7, #8]
    55a2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    55a4:	2300      	movs	r3, #0
    55a6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    55a8:	687b      	ldr	r3, [r7, #4]
    55aa:	78db      	ldrb	r3, [r3, #3]
    55ac:	2201      	movs	r2, #1
    55ae:	4053      	eors	r3, r2
    55b0:	b2db      	uxtb	r3, r3
    55b2:	2b00      	cmp	r3, #0
    55b4:	d034      	beq.n	5620 <_system_pinmux_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    55b6:	687b      	ldr	r3, [r7, #4]
    55b8:	781b      	ldrb	r3, [r3, #0]
    55ba:	2b80      	cmp	r3, #128	; 0x80
    55bc:	d00a      	beq.n	55d4 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    55be:	69fb      	ldr	r3, [r7, #28]
    55c0:	2280      	movs	r2, #128	; 0x80
    55c2:	0252      	lsls	r2, r2, #9
    55c4:	4313      	orrs	r3, r2
    55c6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	781b      	ldrb	r3, [r3, #0]
    55cc:	061b      	lsls	r3, r3, #24
    55ce:	69fa      	ldr	r2, [r7, #28]
    55d0:	4313      	orrs	r3, r2
    55d2:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	785b      	ldrb	r3, [r3, #1]
    55d8:	2b00      	cmp	r3, #0
    55da:	d003      	beq.n	55e4 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    55e0:	2b02      	cmp	r3, #2
    55e2:	d110      	bne.n	5606 <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    55e4:	69fb      	ldr	r3, [r7, #28]
    55e6:	2280      	movs	r2, #128	; 0x80
    55e8:	0292      	lsls	r2, r2, #10
    55ea:	4313      	orrs	r3, r2
    55ec:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    55ee:	687b      	ldr	r3, [r7, #4]
    55f0:	789b      	ldrb	r3, [r3, #2]
    55f2:	2b00      	cmp	r3, #0
    55f4:	d004      	beq.n	5600 <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    55f6:	69fb      	ldr	r3, [r7, #28]
    55f8:	2280      	movs	r2, #128	; 0x80
    55fa:	02d2      	lsls	r2, r2, #11
    55fc:	4313      	orrs	r3, r2
    55fe:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5600:	68fb      	ldr	r3, [r7, #12]
    5602:	68ba      	ldr	r2, [r7, #8]
    5604:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5606:	687b      	ldr	r3, [r7, #4]
    5608:	785b      	ldrb	r3, [r3, #1]
    560a:	2b01      	cmp	r3, #1
    560c:	d003      	beq.n	5616 <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    560e:	687b      	ldr	r3, [r7, #4]
    5610:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5612:	2b02      	cmp	r3, #2
    5614:	d107      	bne.n	5626 <_system_pinmux_config+0x8e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5616:	69fa      	ldr	r2, [r7, #28]
    5618:	4b21      	ldr	r3, [pc, #132]	; (56a0 <_system_pinmux_config+0x108>)
    561a:	4013      	ands	r3, r2
    561c:	61fb      	str	r3, [r7, #28]
    561e:	e002      	b.n	5626 <_system_pinmux_config+0x8e>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5620:	68fb      	ldr	r3, [r7, #12]
    5622:	68ba      	ldr	r2, [r7, #8]
    5624:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5626:	68bb      	ldr	r3, [r7, #8]
    5628:	041b      	lsls	r3, r3, #16
    562a:	0c1b      	lsrs	r3, r3, #16
    562c:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    562e:	68bb      	ldr	r3, [r7, #8]
    5630:	0c1b      	lsrs	r3, r3, #16
    5632:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5634:	69ba      	ldr	r2, [r7, #24]
    5636:	69fb      	ldr	r3, [r7, #28]
    5638:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    563a:	22a0      	movs	r2, #160	; 0xa0
    563c:	05d2      	lsls	r2, r2, #23
    563e:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5640:	68fb      	ldr	r3, [r7, #12]
    5642:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5644:	697a      	ldr	r2, [r7, #20]
    5646:	69fb      	ldr	r3, [r7, #28]
    5648:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    564a:	22d0      	movs	r2, #208	; 0xd0
    564c:	0612      	lsls	r2, r2, #24
    564e:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5650:	68fb      	ldr	r3, [r7, #12]
    5652:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	78db      	ldrb	r3, [r3, #3]
    5658:	2201      	movs	r2, #1
    565a:	4053      	eors	r3, r2
    565c:	b2db      	uxtb	r3, r3
    565e:	2b00      	cmp	r3, #0
    5660:	d01a      	beq.n	5698 <_system_pinmux_config+0x100>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5662:	69fa      	ldr	r2, [r7, #28]
    5664:	2380      	movs	r3, #128	; 0x80
    5666:	02db      	lsls	r3, r3, #11
    5668:	4013      	ands	r3, r2
    566a:	d00a      	beq.n	5682 <_system_pinmux_config+0xea>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	789b      	ldrb	r3, [r3, #2]
    5670:	2b01      	cmp	r3, #1
    5672:	d103      	bne.n	567c <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    5674:	68fb      	ldr	r3, [r7, #12]
    5676:	68ba      	ldr	r2, [r7, #8]
    5678:	619a      	str	r2, [r3, #24]
    567a:	e002      	b.n	5682 <_system_pinmux_config+0xea>
			} else {
				port->OUTCLR.reg = pin_mask;
    567c:	68fb      	ldr	r3, [r7, #12]
    567e:	68ba      	ldr	r2, [r7, #8]
    5680:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	785b      	ldrb	r3, [r3, #1]
    5686:	2b01      	cmp	r3, #1
    5688:	d003      	beq.n	5692 <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    568a:	687b      	ldr	r3, [r7, #4]
    568c:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    568e:	2b02      	cmp	r3, #2
    5690:	d102      	bne.n	5698 <_system_pinmux_config+0x100>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5692:	68fb      	ldr	r3, [r7, #12]
    5694:	68ba      	ldr	r2, [r7, #8]
    5696:	609a      	str	r2, [r3, #8]
		}
	}
}
    5698:	46bd      	mov	sp, r7
    569a:	b008      	add	sp, #32
    569c:	bd80      	pop	{r7, pc}
    569e:	46c0      	nop			; (mov r8, r8)
    56a0:	fffbffff 	.word	0xfffbffff

000056a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    56a4:	b580      	push	{r7, lr}
    56a6:	b084      	sub	sp, #16
    56a8:	af00      	add	r7, sp, #0
    56aa:	1c02      	adds	r2, r0, #0
    56ac:	6039      	str	r1, [r7, #0]
    56ae:	1dfb      	adds	r3, r7, #7
    56b0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    56b2:	1dfb      	adds	r3, r7, #7
    56b4:	781b      	ldrb	r3, [r3, #0]
    56b6:	1c18      	adds	r0, r3, #0
    56b8:	4b0b      	ldr	r3, [pc, #44]	; (56e8 <system_pinmux_pin_set_config+0x44>)
    56ba:	4798      	blx	r3
    56bc:	1c03      	adds	r3, r0, #0
    56be:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    56c0:	1dfb      	adds	r3, r7, #7
    56c2:	781a      	ldrb	r2, [r3, #0]
    56c4:	231f      	movs	r3, #31
    56c6:	4013      	ands	r3, r2
    56c8:	2201      	movs	r2, #1
    56ca:	1c11      	adds	r1, r2, #0
    56cc:	4099      	lsls	r1, r3
    56ce:	1c0b      	adds	r3, r1, #0
    56d0:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    56d2:	68f9      	ldr	r1, [r7, #12]
    56d4:	68ba      	ldr	r2, [r7, #8]
    56d6:	683b      	ldr	r3, [r7, #0]
    56d8:	1c08      	adds	r0, r1, #0
    56da:	1c11      	adds	r1, r2, #0
    56dc:	1c1a      	adds	r2, r3, #0
    56de:	4b03      	ldr	r3, [pc, #12]	; (56ec <system_pinmux_pin_set_config+0x48>)
    56e0:	4798      	blx	r3
}
    56e2:	46bd      	mov	sp, r7
    56e4:	b004      	add	sp, #16
    56e6:	bd80      	pop	{r7, pc}
    56e8:	00005539 	.word	0x00005539
    56ec:	00005599 	.word	0x00005599

000056f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    56f0:	b580      	push	{r7, lr}
    56f2:	b082      	sub	sp, #8
    56f4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    56f6:	4b2d      	ldr	r3, [pc, #180]	; (57ac <Reset_Handler+0xbc>)
    56f8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    56fa:	4b2d      	ldr	r3, [pc, #180]	; (57b0 <Reset_Handler+0xc0>)
    56fc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    56fe:	687a      	ldr	r2, [r7, #4]
    5700:	683b      	ldr	r3, [r7, #0]
    5702:	429a      	cmp	r2, r3
    5704:	d00c      	beq.n	5720 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    5706:	e007      	b.n	5718 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    5708:	683b      	ldr	r3, [r7, #0]
    570a:	1d1a      	adds	r2, r3, #4
    570c:	603a      	str	r2, [r7, #0]
    570e:	687a      	ldr	r2, [r7, #4]
    5710:	1d11      	adds	r1, r2, #4
    5712:	6079      	str	r1, [r7, #4]
    5714:	6812      	ldr	r2, [r2, #0]
    5716:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5718:	683a      	ldr	r2, [r7, #0]
    571a:	4b26      	ldr	r3, [pc, #152]	; (57b4 <Reset_Handler+0xc4>)
    571c:	429a      	cmp	r2, r3
    571e:	d3f3      	bcc.n	5708 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5720:	4b25      	ldr	r3, [pc, #148]	; (57b8 <Reset_Handler+0xc8>)
    5722:	603b      	str	r3, [r7, #0]
    5724:	e004      	b.n	5730 <Reset_Handler+0x40>
                *pDest++ = 0;
    5726:	683b      	ldr	r3, [r7, #0]
    5728:	1d1a      	adds	r2, r3, #4
    572a:	603a      	str	r2, [r7, #0]
    572c:	2200      	movs	r2, #0
    572e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5730:	683a      	ldr	r2, [r7, #0]
    5732:	4b22      	ldr	r3, [pc, #136]	; (57bc <Reset_Handler+0xcc>)
    5734:	429a      	cmp	r2, r3
    5736:	d3f6      	bcc.n	5726 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    5738:	4b21      	ldr	r3, [pc, #132]	; (57c0 <Reset_Handler+0xd0>)
    573a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    573c:	4b21      	ldr	r3, [pc, #132]	; (57c4 <Reset_Handler+0xd4>)
    573e:	687a      	ldr	r2, [r7, #4]
    5740:	21ff      	movs	r1, #255	; 0xff
    5742:	438a      	bics	r2, r1
    5744:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5746:	4a20      	ldr	r2, [pc, #128]	; (57c8 <Reset_Handler+0xd8>)
    5748:	2390      	movs	r3, #144	; 0x90
    574a:	005b      	lsls	r3, r3, #1
    574c:	2102      	movs	r1, #2
    574e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5750:	4b1e      	ldr	r3, [pc, #120]	; (57cc <Reset_Handler+0xdc>)
    5752:	78da      	ldrb	r2, [r3, #3]
    5754:	2103      	movs	r1, #3
    5756:	438a      	bics	r2, r1
    5758:	2102      	movs	r1, #2
    575a:	430a      	orrs	r2, r1
    575c:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    575e:	4b1b      	ldr	r3, [pc, #108]	; (57cc <Reset_Handler+0xdc>)
    5760:	78da      	ldrb	r2, [r3, #3]
    5762:	210c      	movs	r1, #12
    5764:	438a      	bics	r2, r1
    5766:	2108      	movs	r1, #8
    5768:	430a      	orrs	r2, r1
    576a:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    576c:	4b18      	ldr	r3, [pc, #96]	; (57d0 <Reset_Handler+0xe0>)
    576e:	7b9a      	ldrb	r2, [r3, #14]
    5770:	2130      	movs	r1, #48	; 0x30
    5772:	438a      	bics	r2, r1
    5774:	2120      	movs	r1, #32
    5776:	430a      	orrs	r2, r1
    5778:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    577a:	4b15      	ldr	r3, [pc, #84]	; (57d0 <Reset_Handler+0xe0>)
    577c:	7b9a      	ldrb	r2, [r3, #14]
    577e:	210c      	movs	r1, #12
    5780:	438a      	bics	r2, r1
    5782:	2108      	movs	r1, #8
    5784:	430a      	orrs	r2, r1
    5786:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5788:	4b11      	ldr	r3, [pc, #68]	; (57d0 <Reset_Handler+0xe0>)
    578a:	7b9a      	ldrb	r2, [r3, #14]
    578c:	2103      	movs	r1, #3
    578e:	438a      	bics	r2, r1
    5790:	2102      	movs	r1, #2
    5792:	430a      	orrs	r2, r1
    5794:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5796:	4b0f      	ldr	r3, [pc, #60]	; (57d4 <Reset_Handler+0xe4>)
    5798:	685a      	ldr	r2, [r3, #4]
    579a:	2180      	movs	r1, #128	; 0x80
    579c:	430a      	orrs	r2, r1
    579e:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    57a0:	4b0d      	ldr	r3, [pc, #52]	; (57d8 <Reset_Handler+0xe8>)
    57a2:	4798      	blx	r3

        /* Branch to main function */
        main();
    57a4:	4b0d      	ldr	r3, [pc, #52]	; (57dc <Reset_Handler+0xec>)
    57a6:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    57a8:	e7fe      	b.n	57a8 <Reset_Handler+0xb8>
    57aa:	46c0      	nop			; (mov r8, r8)
    57ac:	00009328 	.word	0x00009328
    57b0:	20000000 	.word	0x20000000
    57b4:	20000014 	.word	0x20000014
    57b8:	20000014 	.word	0x20000014
    57bc:	20000150 	.word	0x20000150
    57c0:	00000000 	.word	0x00000000
    57c4:	e000ed00 	.word	0xe000ed00
    57c8:	41007000 	.word	0x41007000
    57cc:	41005000 	.word	0x41005000
    57d0:	41004800 	.word	0x41004800
    57d4:	41004000 	.word	0x41004000
    57d8:	000061d1 	.word	0x000061d1
    57dc:	00005801 	.word	0x00005801

000057e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    57e0:	b580      	push	{r7, lr}
    57e2:	af00      	add	r7, sp, #0
        while (1) {
        }
    57e4:	e7fe      	b.n	57e4 <Dummy_Handler+0x4>
    57e6:	46c0      	nop			; (mov r8, r8)

000057e8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    57e8:	b580      	push	{r7, lr}
    57ea:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    57ec:	4b03      	ldr	r3, [pc, #12]	; (57fc <system_interrupt_enable_global+0x14>)
    57ee:	2201      	movs	r2, #1
    57f0:	701a      	strb	r2, [r3, #0]
    57f2:	f3bf 8f5f 	dmb	sy
    57f6:	b662      	cpsie	i
}
    57f8:	46bd      	mov	sp, r7
    57fa:	bd80      	pop	{r7, pc}
    57fc:	20000010 	.word	0x20000010

00005800 <main>:

/**
* \brief The main function will toggle between two images on
* corresponding EPD depends on specified EPD size
*/
int main (void) {
    5800:	b580      	push	{r7, lr}
    5802:	af00      	add	r7, sp, #0
	/* Initialize system clock and SAM D21 Xplained pro board */
    system_clock_init();
    5804:	4b11      	ldr	r3, [pc, #68]	; (584c <main+0x4c>)
    5806:	4798      	blx	r3
	delay_init();
    5808:	4b11      	ldr	r3, [pc, #68]	; (5850 <main+0x50>)
    580a:	4798      	blx	r3
	delay_ms(1000);
    580c:	23fa      	movs	r3, #250	; 0xfa
    580e:	009b      	lsls	r3, r3, #2
    5810:	1c18      	adds	r0, r3, #0
    5812:	4b10      	ldr	r3, [pc, #64]	; (5854 <main+0x54>)
    5814:	4798      	blx	r3
	/* Initialize EPD hardware */
	EPD_display_init();
    5816:	4b10      	ldr	r3, [pc, #64]	; (5858 <main+0x58>)
    5818:	4798      	blx	r3
   
    system_interrupt_enable_global();
    581a:	4b10      	ldr	r3, [pc, #64]	; (585c <main+0x5c>)
    581c:	4798      	blx	r3
#if(USE_EPD_Type==EPD_144)
		EPD_display_from_pointer(EPD_144,(uint8_t *)&image_array_144_2,(uint8_t *)&image_array_144_1);
#elif(USE_EPD_Type==EPD_200)
		EPD_display_from_pointer(EPD_200,(uint8_t *)&image_array_200_2,(uint8_t *)&image_array_200_1);
#elif(USE_EPD_Type==EPD_270)
		EPD_display_from_pointer(EPD_270,(uint8_t *)&image_array_270_2,(uint8_t *)&image_array_270_1);
    581e:	4a10      	ldr	r2, [pc, #64]	; (5860 <main+0x60>)
    5820:	4b10      	ldr	r3, [pc, #64]	; (5864 <main+0x64>)
    5822:	2002      	movs	r0, #2
    5824:	1c11      	adds	r1, r2, #0
    5826:	1c1a      	adds	r2, r3, #0
    5828:	4b0f      	ldr	r3, [pc, #60]	; (5868 <main+0x68>)
    582a:	4798      	blx	r3
#elif(USE_EPD_Type==EPD_260)
		EPD_display_from_pointer(EPD_260,(uint8_t *)&image_array_260_2,(uint8_t *)&image_array_260_1);
#endif

		/* The interval of two images alternatively change is 10 seconds */
		delay_ms(3000 /*10000*/);
    582c:	4b0f      	ldr	r3, [pc, #60]	; (586c <main+0x6c>)
    582e:	1c18      	adds	r0, r3, #0
    5830:	4b08      	ldr	r3, [pc, #32]	; (5854 <main+0x54>)
    5832:	4798      	blx	r3
#if(USE_EPD_Type==EPD_144)
		EPD_display_from_pointer(EPD_144,(uint8_t *)&image_array_144_1,(uint8_t *)&image_array_144_2);
#elif(USE_EPD_Type==EPD_200)
		EPD_display_from_pointer(EPD_200,(uint8_t *)&image_array_200_1,(uint8_t *)&image_array_200_2);
#elif(USE_EPD_Type==EPD_270)
		EPD_display_from_pointer(EPD_270,(uint8_t *)&image_array_270_1,(uint8_t *)&image_array_270_2);
    5834:	4a0b      	ldr	r2, [pc, #44]	; (5864 <main+0x64>)
    5836:	4b0a      	ldr	r3, [pc, #40]	; (5860 <main+0x60>)
    5838:	2002      	movs	r0, #2
    583a:	1c11      	adds	r1, r2, #0
    583c:	1c1a      	adds	r2, r3, #0
    583e:	4b0a      	ldr	r3, [pc, #40]	; (5868 <main+0x68>)
    5840:	4798      	blx	r3
#elif(USE_EPD_Type==EPD_260)
		EPD_display_from_pointer(EPD_260,(uint8_t *)&image_array_260_1,(uint8_t *)&image_array_260_2);
#endif

		/* The interval of two images alternatively change is 10 seconds */
		delay_ms(3000 /*10000*/);
    5842:	4b0a      	ldr	r3, [pc, #40]	; (586c <main+0x6c>)
    5844:	1c18      	adds	r0, r3, #0
    5846:	4b03      	ldr	r3, [pc, #12]	; (5854 <main+0x54>)
    5848:	4798      	blx	r3
	}
    584a:	e7e8      	b.n	581e <main+0x1e>
    584c:	00004e91 	.word	0x00004e91
    5850:	00004869 	.word	0x00004869
    5854:	000048c5 	.word	0x000048c5
    5858:	00002885 	.word	0x00002885
    585c:	000057e9 	.word	0x000057e9
    5860:	00007b6c 	.word	0x00007b6c
    5864:	000064bc 	.word	0x000064bc
    5868:	00002895 	.word	0x00002895
    586c:	00000bb8 	.word	0x00000bb8

00005870 <__aeabi_uidiv>:
    5870:	2900      	cmp	r1, #0
    5872:	d034      	beq.n	58de <.udivsi3_skip_div0_test+0x6a>

00005874 <.udivsi3_skip_div0_test>:
    5874:	2301      	movs	r3, #1
    5876:	2200      	movs	r2, #0
    5878:	b410      	push	{r4}
    587a:	4288      	cmp	r0, r1
    587c:	d32c      	bcc.n	58d8 <.udivsi3_skip_div0_test+0x64>
    587e:	2401      	movs	r4, #1
    5880:	0724      	lsls	r4, r4, #28
    5882:	42a1      	cmp	r1, r4
    5884:	d204      	bcs.n	5890 <.udivsi3_skip_div0_test+0x1c>
    5886:	4281      	cmp	r1, r0
    5888:	d202      	bcs.n	5890 <.udivsi3_skip_div0_test+0x1c>
    588a:	0109      	lsls	r1, r1, #4
    588c:	011b      	lsls	r3, r3, #4
    588e:	e7f8      	b.n	5882 <.udivsi3_skip_div0_test+0xe>
    5890:	00e4      	lsls	r4, r4, #3
    5892:	42a1      	cmp	r1, r4
    5894:	d204      	bcs.n	58a0 <.udivsi3_skip_div0_test+0x2c>
    5896:	4281      	cmp	r1, r0
    5898:	d202      	bcs.n	58a0 <.udivsi3_skip_div0_test+0x2c>
    589a:	0049      	lsls	r1, r1, #1
    589c:	005b      	lsls	r3, r3, #1
    589e:	e7f8      	b.n	5892 <.udivsi3_skip_div0_test+0x1e>
    58a0:	4288      	cmp	r0, r1
    58a2:	d301      	bcc.n	58a8 <.udivsi3_skip_div0_test+0x34>
    58a4:	1a40      	subs	r0, r0, r1
    58a6:	431a      	orrs	r2, r3
    58a8:	084c      	lsrs	r4, r1, #1
    58aa:	42a0      	cmp	r0, r4
    58ac:	d302      	bcc.n	58b4 <.udivsi3_skip_div0_test+0x40>
    58ae:	1b00      	subs	r0, r0, r4
    58b0:	085c      	lsrs	r4, r3, #1
    58b2:	4322      	orrs	r2, r4
    58b4:	088c      	lsrs	r4, r1, #2
    58b6:	42a0      	cmp	r0, r4
    58b8:	d302      	bcc.n	58c0 <.udivsi3_skip_div0_test+0x4c>
    58ba:	1b00      	subs	r0, r0, r4
    58bc:	089c      	lsrs	r4, r3, #2
    58be:	4322      	orrs	r2, r4
    58c0:	08cc      	lsrs	r4, r1, #3
    58c2:	42a0      	cmp	r0, r4
    58c4:	d302      	bcc.n	58cc <.udivsi3_skip_div0_test+0x58>
    58c6:	1b00      	subs	r0, r0, r4
    58c8:	08dc      	lsrs	r4, r3, #3
    58ca:	4322      	orrs	r2, r4
    58cc:	2800      	cmp	r0, #0
    58ce:	d003      	beq.n	58d8 <.udivsi3_skip_div0_test+0x64>
    58d0:	091b      	lsrs	r3, r3, #4
    58d2:	d001      	beq.n	58d8 <.udivsi3_skip_div0_test+0x64>
    58d4:	0909      	lsrs	r1, r1, #4
    58d6:	e7e3      	b.n	58a0 <.udivsi3_skip_div0_test+0x2c>
    58d8:	1c10      	adds	r0, r2, #0
    58da:	bc10      	pop	{r4}
    58dc:	4770      	bx	lr
    58de:	2800      	cmp	r0, #0
    58e0:	d001      	beq.n	58e6 <.udivsi3_skip_div0_test+0x72>
    58e2:	2000      	movs	r0, #0
    58e4:	43c0      	mvns	r0, r0
    58e6:	b407      	push	{r0, r1, r2}
    58e8:	4802      	ldr	r0, [pc, #8]	; (58f4 <.udivsi3_skip_div0_test+0x80>)
    58ea:	a102      	add	r1, pc, #8	; (adr r1, 58f4 <.udivsi3_skip_div0_test+0x80>)
    58ec:	1840      	adds	r0, r0, r1
    58ee:	9002      	str	r0, [sp, #8]
    58f0:	bd03      	pop	{r0, r1, pc}
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	00000019 	.word	0x00000019

000058f8 <__aeabi_uidivmod>:
    58f8:	2900      	cmp	r1, #0
    58fa:	d0f0      	beq.n	58de <.udivsi3_skip_div0_test+0x6a>
    58fc:	b503      	push	{r0, r1, lr}
    58fe:	f7ff ffb9 	bl	5874 <.udivsi3_skip_div0_test>
    5902:	bc0e      	pop	{r1, r2, r3}
    5904:	4342      	muls	r2, r0
    5906:	1a89      	subs	r1, r1, r2
    5908:	4718      	bx	r3
    590a:	46c0      	nop			; (mov r8, r8)

0000590c <__aeabi_idiv0>:
    590c:	4770      	bx	lr
    590e:	46c0      	nop			; (mov r8, r8)

00005910 <__aeabi_fdiv>:
    5910:	b5f0      	push	{r4, r5, r6, r7, lr}
    5912:	465f      	mov	r7, fp
    5914:	4656      	mov	r6, sl
    5916:	464d      	mov	r5, r9
    5918:	4644      	mov	r4, r8
    591a:	b4f0      	push	{r4, r5, r6, r7}
    591c:	0246      	lsls	r6, r0, #9
    591e:	0045      	lsls	r5, r0, #1
    5920:	0fc0      	lsrs	r0, r0, #31
    5922:	b085      	sub	sp, #20
    5924:	1c0f      	adds	r7, r1, #0
    5926:	0a76      	lsrs	r6, r6, #9
    5928:	0e2d      	lsrs	r5, r5, #24
    592a:	4680      	mov	r8, r0
    592c:	d041      	beq.n	59b2 <__aeabi_fdiv+0xa2>
    592e:	2dff      	cmp	r5, #255	; 0xff
    5930:	d026      	beq.n	5980 <__aeabi_fdiv+0x70>
    5932:	2480      	movs	r4, #128	; 0x80
    5934:	0424      	lsls	r4, r4, #16
    5936:	2100      	movs	r1, #0
    5938:	4326      	orrs	r6, r4
    593a:	00f6      	lsls	r6, r6, #3
    593c:	3d7f      	subs	r5, #127	; 0x7f
    593e:	4689      	mov	r9, r1
    5940:	468b      	mov	fp, r1
    5942:	0ff9      	lsrs	r1, r7, #31
    5944:	027c      	lsls	r4, r7, #9
    5946:	0078      	lsls	r0, r7, #1
    5948:	0a64      	lsrs	r4, r4, #9
    594a:	0e00      	lsrs	r0, r0, #24
    594c:	9100      	str	r1, [sp, #0]
    594e:	468a      	mov	sl, r1
    5950:	d03c      	beq.n	59cc <__aeabi_fdiv+0xbc>
    5952:	28ff      	cmp	r0, #255	; 0xff
    5954:	d034      	beq.n	59c0 <__aeabi_fdiv+0xb0>
    5956:	2380      	movs	r3, #128	; 0x80
    5958:	041b      	lsls	r3, r3, #16
    595a:	431c      	orrs	r4, r3
    595c:	2300      	movs	r3, #0
    595e:	00e4      	lsls	r4, r4, #3
    5960:	387f      	subs	r0, #127	; 0x7f
    5962:	9301      	str	r3, [sp, #4]
    5964:	9f00      	ldr	r7, [sp, #0]
    5966:	4643      	mov	r3, r8
    5968:	9a01      	ldr	r2, [sp, #4]
    596a:	407b      	eors	r3, r7
    596c:	4649      	mov	r1, r9
    596e:	469c      	mov	ip, r3
    5970:	4311      	orrs	r1, r2
    5972:	290f      	cmp	r1, #15
    5974:	d900      	bls.n	5978 <__aeabi_fdiv+0x68>
    5976:	e071      	b.n	5a5c <__aeabi_fdiv+0x14c>
    5978:	4f76      	ldr	r7, [pc, #472]	; (5b54 <__aeabi_fdiv+0x244>)
    597a:	0089      	lsls	r1, r1, #2
    597c:	587f      	ldr	r7, [r7, r1]
    597e:	46bf      	mov	pc, r7
    5980:	2e00      	cmp	r6, #0
    5982:	d13e      	bne.n	5a02 <__aeabi_fdiv+0xf2>
    5984:	2208      	movs	r2, #8
    5986:	2302      	movs	r3, #2
    5988:	4691      	mov	r9, r2
    598a:	469b      	mov	fp, r3
    598c:	e7d9      	b.n	5942 <__aeabi_fdiv+0x32>
    598e:	465a      	mov	r2, fp
    5990:	1c34      	adds	r4, r6, #0
    5992:	46c2      	mov	sl, r8
    5994:	9201      	str	r2, [sp, #4]
    5996:	9901      	ldr	r1, [sp, #4]
    5998:	2902      	cmp	r1, #2
    599a:	d037      	beq.n	5a0c <__aeabi_fdiv+0xfc>
    599c:	2903      	cmp	r1, #3
    599e:	d100      	bne.n	59a2 <__aeabi_fdiv+0x92>
    59a0:	e0cf      	b.n	5b42 <__aeabi_fdiv+0x232>
    59a2:	2901      	cmp	r1, #1
    59a4:	d000      	beq.n	59a8 <__aeabi_fdiv+0x98>
    59a6:	e0ab      	b.n	5b00 <__aeabi_fdiv+0x1f0>
    59a8:	4653      	mov	r3, sl
    59aa:	400b      	ands	r3, r1
    59ac:	2200      	movs	r2, #0
    59ae:	2600      	movs	r6, #0
    59b0:	e032      	b.n	5a18 <__aeabi_fdiv+0x108>
    59b2:	2e00      	cmp	r6, #0
    59b4:	d119      	bne.n	59ea <__aeabi_fdiv+0xda>
    59b6:	2104      	movs	r1, #4
    59b8:	2201      	movs	r2, #1
    59ba:	4689      	mov	r9, r1
    59bc:	4693      	mov	fp, r2
    59be:	e7c0      	b.n	5942 <__aeabi_fdiv+0x32>
    59c0:	1c22      	adds	r2, r4, #0
    59c2:	1e53      	subs	r3, r2, #1
    59c4:	419a      	sbcs	r2, r3
    59c6:	3202      	adds	r2, #2
    59c8:	9201      	str	r2, [sp, #4]
    59ca:	e7cb      	b.n	5964 <__aeabi_fdiv+0x54>
    59cc:	2701      	movs	r7, #1
    59ce:	9701      	str	r7, [sp, #4]
    59d0:	2c00      	cmp	r4, #0
    59d2:	d0c7      	beq.n	5964 <__aeabi_fdiv+0x54>
    59d4:	1c20      	adds	r0, r4, #0
    59d6:	f000 fbdd 	bl	6194 <__clzsi2>
    59da:	1f43      	subs	r3, r0, #5
    59dc:	409c      	lsls	r4, r3
    59de:	2376      	movs	r3, #118	; 0x76
    59e0:	425b      	negs	r3, r3
    59e2:	2100      	movs	r1, #0
    59e4:	1a18      	subs	r0, r3, r0
    59e6:	9101      	str	r1, [sp, #4]
    59e8:	e7bc      	b.n	5964 <__aeabi_fdiv+0x54>
    59ea:	1c30      	adds	r0, r6, #0
    59ec:	f000 fbd2 	bl	6194 <__clzsi2>
    59f0:	2576      	movs	r5, #118	; 0x76
    59f2:	1f43      	subs	r3, r0, #5
    59f4:	409e      	lsls	r6, r3
    59f6:	426d      	negs	r5, r5
    59f8:	2300      	movs	r3, #0
    59fa:	1a2d      	subs	r5, r5, r0
    59fc:	4699      	mov	r9, r3
    59fe:	469b      	mov	fp, r3
    5a00:	e79f      	b.n	5942 <__aeabi_fdiv+0x32>
    5a02:	230c      	movs	r3, #12
    5a04:	2103      	movs	r1, #3
    5a06:	4699      	mov	r9, r3
    5a08:	468b      	mov	fp, r1
    5a0a:	e79a      	b.n	5942 <__aeabi_fdiv+0x32>
    5a0c:	46d4      	mov	ip, sl
    5a0e:	2301      	movs	r3, #1
    5a10:	4667      	mov	r7, ip
    5a12:	403b      	ands	r3, r7
    5a14:	22ff      	movs	r2, #255	; 0xff
    5a16:	2600      	movs	r6, #0
    5a18:	0276      	lsls	r6, r6, #9
    5a1a:	05d2      	lsls	r2, r2, #23
    5a1c:	0a70      	lsrs	r0, r6, #9
    5a1e:	07db      	lsls	r3, r3, #31
    5a20:	4310      	orrs	r0, r2
    5a22:	4318      	orrs	r0, r3
    5a24:	b005      	add	sp, #20
    5a26:	bc3c      	pop	{r2, r3, r4, r5}
    5a28:	4690      	mov	r8, r2
    5a2a:	4699      	mov	r9, r3
    5a2c:	46a2      	mov	sl, r4
    5a2e:	46ab      	mov	fp, r5
    5a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a32:	2680      	movs	r6, #128	; 0x80
    5a34:	2300      	movs	r3, #0
    5a36:	03f6      	lsls	r6, r6, #15
    5a38:	22ff      	movs	r2, #255	; 0xff
    5a3a:	e7ed      	b.n	5a18 <__aeabi_fdiv+0x108>
    5a3c:	2200      	movs	r2, #0
    5a3e:	2600      	movs	r6, #0
    5a40:	e7ea      	b.n	5a18 <__aeabi_fdiv+0x108>
    5a42:	2080      	movs	r0, #128	; 0x80
    5a44:	03c0      	lsls	r0, r0, #15
    5a46:	4206      	tst	r6, r0
    5a48:	d03b      	beq.n	5ac2 <__aeabi_fdiv+0x1b2>
    5a4a:	4204      	tst	r4, r0
    5a4c:	d139      	bne.n	5ac2 <__aeabi_fdiv+0x1b2>
    5a4e:	1c06      	adds	r6, r0, #0
    5a50:	4326      	orrs	r6, r4
    5a52:	0276      	lsls	r6, r6, #9
    5a54:	0a76      	lsrs	r6, r6, #9
    5a56:	9b00      	ldr	r3, [sp, #0]
    5a58:	22ff      	movs	r2, #255	; 0xff
    5a5a:	e7dd      	b.n	5a18 <__aeabi_fdiv+0x108>
    5a5c:	1a28      	subs	r0, r5, r0
    5a5e:	9003      	str	r0, [sp, #12]
    5a60:	0176      	lsls	r6, r6, #5
    5a62:	0164      	lsls	r4, r4, #5
    5a64:	42a6      	cmp	r6, r4
    5a66:	d339      	bcc.n	5adc <__aeabi_fdiv+0x1cc>
    5a68:	1b36      	subs	r6, r6, r4
    5a6a:	221a      	movs	r2, #26
    5a6c:	2301      	movs	r3, #1
    5a6e:	2001      	movs	r0, #1
    5a70:	1c31      	adds	r1, r6, #0
    5a72:	005b      	lsls	r3, r3, #1
    5a74:	0076      	lsls	r6, r6, #1
    5a76:	2900      	cmp	r1, #0
    5a78:	db01      	blt.n	5a7e <__aeabi_fdiv+0x16e>
    5a7a:	42b4      	cmp	r4, r6
    5a7c:	d801      	bhi.n	5a82 <__aeabi_fdiv+0x172>
    5a7e:	1b36      	subs	r6, r6, r4
    5a80:	4303      	orrs	r3, r0
    5a82:	3a01      	subs	r2, #1
    5a84:	2a00      	cmp	r2, #0
    5a86:	dcf3      	bgt.n	5a70 <__aeabi_fdiv+0x160>
    5a88:	1e74      	subs	r4, r6, #1
    5a8a:	41a6      	sbcs	r6, r4
    5a8c:	1c34      	adds	r4, r6, #0
    5a8e:	431c      	orrs	r4, r3
    5a90:	9a03      	ldr	r2, [sp, #12]
    5a92:	327f      	adds	r2, #127	; 0x7f
    5a94:	2a00      	cmp	r2, #0
    5a96:	dd27      	ble.n	5ae8 <__aeabi_fdiv+0x1d8>
    5a98:	0763      	lsls	r3, r4, #29
    5a9a:	d004      	beq.n	5aa6 <__aeabi_fdiv+0x196>
    5a9c:	230f      	movs	r3, #15
    5a9e:	4023      	ands	r3, r4
    5aa0:	2b04      	cmp	r3, #4
    5aa2:	d000      	beq.n	5aa6 <__aeabi_fdiv+0x196>
    5aa4:	3404      	adds	r4, #4
    5aa6:	0127      	lsls	r7, r4, #4
    5aa8:	d503      	bpl.n	5ab2 <__aeabi_fdiv+0x1a2>
    5aaa:	4b2b      	ldr	r3, [pc, #172]	; (5b58 <__aeabi_fdiv+0x248>)
    5aac:	9a03      	ldr	r2, [sp, #12]
    5aae:	401c      	ands	r4, r3
    5ab0:	3280      	adds	r2, #128	; 0x80
    5ab2:	2afe      	cmp	r2, #254	; 0xfe
    5ab4:	dd0b      	ble.n	5ace <__aeabi_fdiv+0x1be>
    5ab6:	2301      	movs	r3, #1
    5ab8:	4661      	mov	r1, ip
    5aba:	400b      	ands	r3, r1
    5abc:	22ff      	movs	r2, #255	; 0xff
    5abe:	2600      	movs	r6, #0
    5ac0:	e7aa      	b.n	5a18 <__aeabi_fdiv+0x108>
    5ac2:	4306      	orrs	r6, r0
    5ac4:	0276      	lsls	r6, r6, #9
    5ac6:	0a76      	lsrs	r6, r6, #9
    5ac8:	4643      	mov	r3, r8
    5aca:	22ff      	movs	r2, #255	; 0xff
    5acc:	e7a4      	b.n	5a18 <__aeabi_fdiv+0x108>
    5ace:	01a4      	lsls	r4, r4, #6
    5ad0:	2301      	movs	r3, #1
    5ad2:	4667      	mov	r7, ip
    5ad4:	0a66      	lsrs	r6, r4, #9
    5ad6:	b2d2      	uxtb	r2, r2
    5ad8:	403b      	ands	r3, r7
    5ada:	e79d      	b.n	5a18 <__aeabi_fdiv+0x108>
    5adc:	9f03      	ldr	r7, [sp, #12]
    5ade:	221b      	movs	r2, #27
    5ae0:	3f01      	subs	r7, #1
    5ae2:	9703      	str	r7, [sp, #12]
    5ae4:	2300      	movs	r3, #0
    5ae6:	e7c2      	b.n	5a6e <__aeabi_fdiv+0x15e>
    5ae8:	237e      	movs	r3, #126	; 0x7e
    5aea:	9f03      	ldr	r7, [sp, #12]
    5aec:	425b      	negs	r3, r3
    5aee:	1bdb      	subs	r3, r3, r7
    5af0:	2b1b      	cmp	r3, #27
    5af2:	dd07      	ble.n	5b04 <__aeabi_fdiv+0x1f4>
    5af4:	2301      	movs	r3, #1
    5af6:	4661      	mov	r1, ip
    5af8:	400b      	ands	r3, r1
    5afa:	2200      	movs	r2, #0
    5afc:	2600      	movs	r6, #0
    5afe:	e78b      	b.n	5a18 <__aeabi_fdiv+0x108>
    5b00:	46d4      	mov	ip, sl
    5b02:	e7c5      	b.n	5a90 <__aeabi_fdiv+0x180>
    5b04:	1c22      	adds	r2, r4, #0
    5b06:	40da      	lsrs	r2, r3
    5b08:	9b03      	ldr	r3, [sp, #12]
    5b0a:	339e      	adds	r3, #158	; 0x9e
    5b0c:	409c      	lsls	r4, r3
    5b0e:	1c23      	adds	r3, r4, #0
    5b10:	1e5c      	subs	r4, r3, #1
    5b12:	41a3      	sbcs	r3, r4
    5b14:	4313      	orrs	r3, r2
    5b16:	075a      	lsls	r2, r3, #29
    5b18:	d004      	beq.n	5b24 <__aeabi_fdiv+0x214>
    5b1a:	220f      	movs	r2, #15
    5b1c:	401a      	ands	r2, r3
    5b1e:	2a04      	cmp	r2, #4
    5b20:	d000      	beq.n	5b24 <__aeabi_fdiv+0x214>
    5b22:	3304      	adds	r3, #4
    5b24:	015f      	lsls	r7, r3, #5
    5b26:	d505      	bpl.n	5b34 <__aeabi_fdiv+0x224>
    5b28:	2301      	movs	r3, #1
    5b2a:	4661      	mov	r1, ip
    5b2c:	400b      	ands	r3, r1
    5b2e:	2201      	movs	r2, #1
    5b30:	2600      	movs	r6, #0
    5b32:	e771      	b.n	5a18 <__aeabi_fdiv+0x108>
    5b34:	019e      	lsls	r6, r3, #6
    5b36:	4662      	mov	r2, ip
    5b38:	2301      	movs	r3, #1
    5b3a:	4013      	ands	r3, r2
    5b3c:	0a76      	lsrs	r6, r6, #9
    5b3e:	2200      	movs	r2, #0
    5b40:	e76a      	b.n	5a18 <__aeabi_fdiv+0x108>
    5b42:	2680      	movs	r6, #128	; 0x80
    5b44:	03f6      	lsls	r6, r6, #15
    5b46:	4326      	orrs	r6, r4
    5b48:	0276      	lsls	r6, r6, #9
    5b4a:	0a76      	lsrs	r6, r6, #9
    5b4c:	4653      	mov	r3, sl
    5b4e:	22ff      	movs	r2, #255	; 0xff
    5b50:	e762      	b.n	5a18 <__aeabi_fdiv+0x108>
    5b52:	46c0      	nop			; (mov r8, r8)
    5b54:	00009288 	.word	0x00009288
    5b58:	f7ffffff 	.word	0xf7ffffff

00005b5c <__aeabi_fmul>:
    5b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b5e:	465f      	mov	r7, fp
    5b60:	4656      	mov	r6, sl
    5b62:	464d      	mov	r5, r9
    5b64:	4644      	mov	r4, r8
    5b66:	b4f0      	push	{r4, r5, r6, r7}
    5b68:	0244      	lsls	r4, r0, #9
    5b6a:	0046      	lsls	r6, r0, #1
    5b6c:	b083      	sub	sp, #12
    5b6e:	1c0f      	adds	r7, r1, #0
    5b70:	0a64      	lsrs	r4, r4, #9
    5b72:	0e36      	lsrs	r6, r6, #24
    5b74:	0fc5      	lsrs	r5, r0, #31
    5b76:	2e00      	cmp	r6, #0
    5b78:	d041      	beq.n	5bfe <__aeabi_fmul+0xa2>
    5b7a:	2eff      	cmp	r6, #255	; 0xff
    5b7c:	d022      	beq.n	5bc4 <__aeabi_fmul+0x68>
    5b7e:	2380      	movs	r3, #128	; 0x80
    5b80:	041b      	lsls	r3, r3, #16
    5b82:	2000      	movs	r0, #0
    5b84:	431c      	orrs	r4, r3
    5b86:	00e4      	lsls	r4, r4, #3
    5b88:	3e7f      	subs	r6, #127	; 0x7f
    5b8a:	4682      	mov	sl, r0
    5b8c:	4680      	mov	r8, r0
    5b8e:	1c39      	adds	r1, r7, #0
    5b90:	004b      	lsls	r3, r1, #1
    5b92:	027f      	lsls	r7, r7, #9
    5b94:	0fc9      	lsrs	r1, r1, #31
    5b96:	0a7f      	lsrs	r7, r7, #9
    5b98:	0e1b      	lsrs	r3, r3, #24
    5b9a:	468b      	mov	fp, r1
    5b9c:	d03b      	beq.n	5c16 <__aeabi_fmul+0xba>
    5b9e:	2bff      	cmp	r3, #255	; 0xff
    5ba0:	d034      	beq.n	5c0c <__aeabi_fmul+0xb0>
    5ba2:	2280      	movs	r2, #128	; 0x80
    5ba4:	0412      	lsls	r2, r2, #16
    5ba6:	4317      	orrs	r7, r2
    5ba8:	00ff      	lsls	r7, r7, #3
    5baa:	3b7f      	subs	r3, #127	; 0x7f
    5bac:	2100      	movs	r1, #0
    5bae:	465a      	mov	r2, fp
    5bb0:	406a      	eors	r2, r5
    5bb2:	9201      	str	r2, [sp, #4]
    5bb4:	4652      	mov	r2, sl
    5bb6:	430a      	orrs	r2, r1
    5bb8:	2a0f      	cmp	r2, #15
    5bba:	d863      	bhi.n	5c84 <__aeabi_fmul+0x128>
    5bbc:	487a      	ldr	r0, [pc, #488]	; (5da8 <__aeabi_fmul+0x24c>)
    5bbe:	0092      	lsls	r2, r2, #2
    5bc0:	5882      	ldr	r2, [r0, r2]
    5bc2:	4697      	mov	pc, r2
    5bc4:	2c00      	cmp	r4, #0
    5bc6:	d13f      	bne.n	5c48 <__aeabi_fmul+0xec>
    5bc8:	2208      	movs	r2, #8
    5bca:	2302      	movs	r3, #2
    5bcc:	4692      	mov	sl, r2
    5bce:	4698      	mov	r8, r3
    5bd0:	e7dd      	b.n	5b8e <__aeabi_fmul+0x32>
    5bd2:	9501      	str	r5, [sp, #4]
    5bd4:	4640      	mov	r0, r8
    5bd6:	2802      	cmp	r0, #2
    5bd8:	d12a      	bne.n	5c30 <__aeabi_fmul+0xd4>
    5bda:	9a01      	ldr	r2, [sp, #4]
    5bdc:	2501      	movs	r5, #1
    5bde:	4015      	ands	r5, r2
    5be0:	23ff      	movs	r3, #255	; 0xff
    5be2:	2400      	movs	r4, #0
    5be4:	0264      	lsls	r4, r4, #9
    5be6:	05db      	lsls	r3, r3, #23
    5be8:	0a60      	lsrs	r0, r4, #9
    5bea:	07ed      	lsls	r5, r5, #31
    5bec:	4318      	orrs	r0, r3
    5bee:	4328      	orrs	r0, r5
    5bf0:	b003      	add	sp, #12
    5bf2:	bc3c      	pop	{r2, r3, r4, r5}
    5bf4:	4690      	mov	r8, r2
    5bf6:	4699      	mov	r9, r3
    5bf8:	46a2      	mov	sl, r4
    5bfa:	46ab      	mov	fp, r5
    5bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bfe:	2c00      	cmp	r4, #0
    5c00:	d127      	bne.n	5c52 <__aeabi_fmul+0xf6>
    5c02:	2004      	movs	r0, #4
    5c04:	2201      	movs	r2, #1
    5c06:	4682      	mov	sl, r0
    5c08:	4690      	mov	r8, r2
    5c0a:	e7c0      	b.n	5b8e <__aeabi_fmul+0x32>
    5c0c:	1c39      	adds	r1, r7, #0
    5c0e:	1e4a      	subs	r2, r1, #1
    5c10:	4191      	sbcs	r1, r2
    5c12:	3102      	adds	r1, #2
    5c14:	e7cb      	b.n	5bae <__aeabi_fmul+0x52>
    5c16:	2101      	movs	r1, #1
    5c18:	2f00      	cmp	r7, #0
    5c1a:	d0c8      	beq.n	5bae <__aeabi_fmul+0x52>
    5c1c:	1c38      	adds	r0, r7, #0
    5c1e:	f000 fab9 	bl	6194 <__clzsi2>
    5c22:	1f43      	subs	r3, r0, #5
    5c24:	409f      	lsls	r7, r3
    5c26:	2376      	movs	r3, #118	; 0x76
    5c28:	425b      	negs	r3, r3
    5c2a:	1a1b      	subs	r3, r3, r0
    5c2c:	2100      	movs	r1, #0
    5c2e:	e7be      	b.n	5bae <__aeabi_fmul+0x52>
    5c30:	2803      	cmp	r0, #3
    5c32:	d100      	bne.n	5c36 <__aeabi_fmul+0xda>
    5c34:	e0ae      	b.n	5d94 <__aeabi_fmul+0x238>
    5c36:	2801      	cmp	r0, #1
    5c38:	d14f      	bne.n	5cda <__aeabi_fmul+0x17e>
    5c3a:	9801      	ldr	r0, [sp, #4]
    5c3c:	4642      	mov	r2, r8
    5c3e:	4010      	ands	r0, r2
    5c40:	b2c5      	uxtb	r5, r0
    5c42:	2300      	movs	r3, #0
    5c44:	2400      	movs	r4, #0
    5c46:	e7cd      	b.n	5be4 <__aeabi_fmul+0x88>
    5c48:	230c      	movs	r3, #12
    5c4a:	2003      	movs	r0, #3
    5c4c:	469a      	mov	sl, r3
    5c4e:	4680      	mov	r8, r0
    5c50:	e79d      	b.n	5b8e <__aeabi_fmul+0x32>
    5c52:	1c20      	adds	r0, r4, #0
    5c54:	f000 fa9e 	bl	6194 <__clzsi2>
    5c58:	2676      	movs	r6, #118	; 0x76
    5c5a:	1f43      	subs	r3, r0, #5
    5c5c:	409c      	lsls	r4, r3
    5c5e:	4276      	negs	r6, r6
    5c60:	2300      	movs	r3, #0
    5c62:	1a36      	subs	r6, r6, r0
    5c64:	469a      	mov	sl, r3
    5c66:	4698      	mov	r8, r3
    5c68:	e791      	b.n	5b8e <__aeabi_fmul+0x32>
    5c6a:	2480      	movs	r4, #128	; 0x80
    5c6c:	2500      	movs	r5, #0
    5c6e:	03e4      	lsls	r4, r4, #15
    5c70:	23ff      	movs	r3, #255	; 0xff
    5c72:	e7b7      	b.n	5be4 <__aeabi_fmul+0x88>
    5c74:	465b      	mov	r3, fp
    5c76:	1c3c      	adds	r4, r7, #0
    5c78:	9301      	str	r3, [sp, #4]
    5c7a:	4688      	mov	r8, r1
    5c7c:	e7aa      	b.n	5bd4 <__aeabi_fmul+0x78>
    5c7e:	1c3c      	adds	r4, r7, #0
    5c80:	4688      	mov	r8, r1
    5c82:	e7a7      	b.n	5bd4 <__aeabi_fmul+0x78>
    5c84:	0c25      	lsrs	r5, r4, #16
    5c86:	0424      	lsls	r4, r4, #16
    5c88:	0c3a      	lsrs	r2, r7, #16
    5c8a:	0c24      	lsrs	r4, r4, #16
    5c8c:	043f      	lsls	r7, r7, #16
    5c8e:	18f6      	adds	r6, r6, r3
    5c90:	0c3f      	lsrs	r7, r7, #16
    5c92:	1c21      	adds	r1, r4, #0
    5c94:	1c23      	adds	r3, r4, #0
    5c96:	4379      	muls	r1, r7
    5c98:	4353      	muls	r3, r2
    5c9a:	436f      	muls	r7, r5
    5c9c:	4355      	muls	r5, r2
    5c9e:	18fb      	adds	r3, r7, r3
    5ca0:	0c0a      	lsrs	r2, r1, #16
    5ca2:	189b      	adds	r3, r3, r2
    5ca4:	46b1      	mov	r9, r6
    5ca6:	429f      	cmp	r7, r3
    5ca8:	d902      	bls.n	5cb0 <__aeabi_fmul+0x154>
    5caa:	2280      	movs	r2, #128	; 0x80
    5cac:	0252      	lsls	r2, r2, #9
    5cae:	18ad      	adds	r5, r5, r2
    5cb0:	0409      	lsls	r1, r1, #16
    5cb2:	041a      	lsls	r2, r3, #16
    5cb4:	0c09      	lsrs	r1, r1, #16
    5cb6:	1852      	adds	r2, r2, r1
    5cb8:	0194      	lsls	r4, r2, #6
    5cba:	0c1b      	lsrs	r3, r3, #16
    5cbc:	1e61      	subs	r1, r4, #1
    5cbe:	418c      	sbcs	r4, r1
    5cc0:	0e92      	lsrs	r2, r2, #26
    5cc2:	18ed      	adds	r5, r5, r3
    5cc4:	4314      	orrs	r4, r2
    5cc6:	01ad      	lsls	r5, r5, #6
    5cc8:	432c      	orrs	r4, r5
    5cca:	0123      	lsls	r3, r4, #4
    5ccc:	d505      	bpl.n	5cda <__aeabi_fmul+0x17e>
    5cce:	2201      	movs	r2, #1
    5cd0:	0863      	lsrs	r3, r4, #1
    5cd2:	2001      	movs	r0, #1
    5cd4:	4014      	ands	r4, r2
    5cd6:	4481      	add	r9, r0
    5cd8:	431c      	orrs	r4, r3
    5cda:	464b      	mov	r3, r9
    5cdc:	337f      	adds	r3, #127	; 0x7f
    5cde:	2b00      	cmp	r3, #0
    5ce0:	dd2d      	ble.n	5d3e <__aeabi_fmul+0x1e2>
    5ce2:	0760      	lsls	r0, r4, #29
    5ce4:	d004      	beq.n	5cf0 <__aeabi_fmul+0x194>
    5ce6:	220f      	movs	r2, #15
    5ce8:	4022      	ands	r2, r4
    5cea:	2a04      	cmp	r2, #4
    5cec:	d000      	beq.n	5cf0 <__aeabi_fmul+0x194>
    5cee:	3404      	adds	r4, #4
    5cf0:	0122      	lsls	r2, r4, #4
    5cf2:	d503      	bpl.n	5cfc <__aeabi_fmul+0x1a0>
    5cf4:	4b2d      	ldr	r3, [pc, #180]	; (5dac <__aeabi_fmul+0x250>)
    5cf6:	401c      	ands	r4, r3
    5cf8:	464b      	mov	r3, r9
    5cfa:	3380      	adds	r3, #128	; 0x80
    5cfc:	2bfe      	cmp	r3, #254	; 0xfe
    5cfe:	dd17      	ble.n	5d30 <__aeabi_fmul+0x1d4>
    5d00:	9b01      	ldr	r3, [sp, #4]
    5d02:	2501      	movs	r5, #1
    5d04:	401d      	ands	r5, r3
    5d06:	2400      	movs	r4, #0
    5d08:	23ff      	movs	r3, #255	; 0xff
    5d0a:	e76b      	b.n	5be4 <__aeabi_fmul+0x88>
    5d0c:	2080      	movs	r0, #128	; 0x80
    5d0e:	03c0      	lsls	r0, r0, #15
    5d10:	4204      	tst	r4, r0
    5d12:	d008      	beq.n	5d26 <__aeabi_fmul+0x1ca>
    5d14:	4207      	tst	r7, r0
    5d16:	d106      	bne.n	5d26 <__aeabi_fmul+0x1ca>
    5d18:	1c04      	adds	r4, r0, #0
    5d1a:	433c      	orrs	r4, r7
    5d1c:	0264      	lsls	r4, r4, #9
    5d1e:	0a64      	lsrs	r4, r4, #9
    5d20:	465d      	mov	r5, fp
    5d22:	23ff      	movs	r3, #255	; 0xff
    5d24:	e75e      	b.n	5be4 <__aeabi_fmul+0x88>
    5d26:	4304      	orrs	r4, r0
    5d28:	0264      	lsls	r4, r4, #9
    5d2a:	0a64      	lsrs	r4, r4, #9
    5d2c:	23ff      	movs	r3, #255	; 0xff
    5d2e:	e759      	b.n	5be4 <__aeabi_fmul+0x88>
    5d30:	9801      	ldr	r0, [sp, #4]
    5d32:	01a4      	lsls	r4, r4, #6
    5d34:	2501      	movs	r5, #1
    5d36:	0a64      	lsrs	r4, r4, #9
    5d38:	b2db      	uxtb	r3, r3
    5d3a:	4005      	ands	r5, r0
    5d3c:	e752      	b.n	5be4 <__aeabi_fmul+0x88>
    5d3e:	237e      	movs	r3, #126	; 0x7e
    5d40:	425b      	negs	r3, r3
    5d42:	464a      	mov	r2, r9
    5d44:	1a9b      	subs	r3, r3, r2
    5d46:	2b1b      	cmp	r3, #27
    5d48:	dd05      	ble.n	5d56 <__aeabi_fmul+0x1fa>
    5d4a:	9b01      	ldr	r3, [sp, #4]
    5d4c:	2501      	movs	r5, #1
    5d4e:	401d      	ands	r5, r3
    5d50:	2400      	movs	r4, #0
    5d52:	2300      	movs	r3, #0
    5d54:	e746      	b.n	5be4 <__aeabi_fmul+0x88>
    5d56:	1c22      	adds	r2, r4, #0
    5d58:	40da      	lsrs	r2, r3
    5d5a:	464b      	mov	r3, r9
    5d5c:	339e      	adds	r3, #158	; 0x9e
    5d5e:	409c      	lsls	r4, r3
    5d60:	1c23      	adds	r3, r4, #0
    5d62:	1e5c      	subs	r4, r3, #1
    5d64:	41a3      	sbcs	r3, r4
    5d66:	4313      	orrs	r3, r2
    5d68:	0758      	lsls	r0, r3, #29
    5d6a:	d004      	beq.n	5d76 <__aeabi_fmul+0x21a>
    5d6c:	220f      	movs	r2, #15
    5d6e:	401a      	ands	r2, r3
    5d70:	2a04      	cmp	r2, #4
    5d72:	d000      	beq.n	5d76 <__aeabi_fmul+0x21a>
    5d74:	3304      	adds	r3, #4
    5d76:	015a      	lsls	r2, r3, #5
    5d78:	d505      	bpl.n	5d86 <__aeabi_fmul+0x22a>
    5d7a:	9b01      	ldr	r3, [sp, #4]
    5d7c:	2501      	movs	r5, #1
    5d7e:	401d      	ands	r5, r3
    5d80:	2400      	movs	r4, #0
    5d82:	2301      	movs	r3, #1
    5d84:	e72e      	b.n	5be4 <__aeabi_fmul+0x88>
    5d86:	9801      	ldr	r0, [sp, #4]
    5d88:	019c      	lsls	r4, r3, #6
    5d8a:	2501      	movs	r5, #1
    5d8c:	0a64      	lsrs	r4, r4, #9
    5d8e:	4005      	ands	r5, r0
    5d90:	2300      	movs	r3, #0
    5d92:	e727      	b.n	5be4 <__aeabi_fmul+0x88>
    5d94:	2780      	movs	r7, #128	; 0x80
    5d96:	03ff      	lsls	r7, r7, #15
    5d98:	9b01      	ldr	r3, [sp, #4]
    5d9a:	433c      	orrs	r4, r7
    5d9c:	0264      	lsls	r4, r4, #9
    5d9e:	2501      	movs	r5, #1
    5da0:	401d      	ands	r5, r3
    5da2:	0a64      	lsrs	r4, r4, #9
    5da4:	23ff      	movs	r3, #255	; 0xff
    5da6:	e71d      	b.n	5be4 <__aeabi_fmul+0x88>
    5da8:	000092c8 	.word	0x000092c8
    5dac:	f7ffffff 	.word	0xf7ffffff

00005db0 <__aeabi_fsub>:
    5db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5db2:	0fc2      	lsrs	r2, r0, #31
    5db4:	0243      	lsls	r3, r0, #9
    5db6:	0044      	lsls	r4, r0, #1
    5db8:	024d      	lsls	r5, r1, #9
    5dba:	0048      	lsls	r0, r1, #1
    5dbc:	0e24      	lsrs	r4, r4, #24
    5dbe:	1c16      	adds	r6, r2, #0
    5dc0:	099b      	lsrs	r3, r3, #6
    5dc2:	0e00      	lsrs	r0, r0, #24
    5dc4:	0fc9      	lsrs	r1, r1, #31
    5dc6:	09ad      	lsrs	r5, r5, #6
    5dc8:	28ff      	cmp	r0, #255	; 0xff
    5dca:	d100      	bne.n	5dce <__aeabi_fsub+0x1e>
    5dcc:	e083      	b.n	5ed6 <__aeabi_fsub+0x126>
    5dce:	2701      	movs	r7, #1
    5dd0:	4079      	eors	r1, r7
    5dd2:	428a      	cmp	r2, r1
    5dd4:	d05c      	beq.n	5e90 <__aeabi_fsub+0xe0>
    5dd6:	1a22      	subs	r2, r4, r0
    5dd8:	2a00      	cmp	r2, #0
    5dda:	dc00      	bgt.n	5dde <__aeabi_fsub+0x2e>
    5ddc:	e08e      	b.n	5efc <__aeabi_fsub+0x14c>
    5dde:	2800      	cmp	r0, #0
    5de0:	d11e      	bne.n	5e20 <__aeabi_fsub+0x70>
    5de2:	2d00      	cmp	r5, #0
    5de4:	d000      	beq.n	5de8 <__aeabi_fsub+0x38>
    5de6:	e07a      	b.n	5ede <__aeabi_fsub+0x12e>
    5de8:	0758      	lsls	r0, r3, #29
    5dea:	d004      	beq.n	5df6 <__aeabi_fsub+0x46>
    5dec:	220f      	movs	r2, #15
    5dee:	401a      	ands	r2, r3
    5df0:	2a04      	cmp	r2, #4
    5df2:	d000      	beq.n	5df6 <__aeabi_fsub+0x46>
    5df4:	3304      	adds	r3, #4
    5df6:	2180      	movs	r1, #128	; 0x80
    5df8:	04c9      	lsls	r1, r1, #19
    5dfa:	2201      	movs	r2, #1
    5dfc:	4019      	ands	r1, r3
    5dfe:	4032      	ands	r2, r6
    5e00:	2900      	cmp	r1, #0
    5e02:	d03a      	beq.n	5e7a <__aeabi_fsub+0xca>
    5e04:	3401      	adds	r4, #1
    5e06:	2cff      	cmp	r4, #255	; 0xff
    5e08:	d100      	bne.n	5e0c <__aeabi_fsub+0x5c>
    5e0a:	e083      	b.n	5f14 <__aeabi_fsub+0x164>
    5e0c:	019b      	lsls	r3, r3, #6
    5e0e:	0a5b      	lsrs	r3, r3, #9
    5e10:	025b      	lsls	r3, r3, #9
    5e12:	b2e4      	uxtb	r4, r4
    5e14:	05e4      	lsls	r4, r4, #23
    5e16:	0a58      	lsrs	r0, r3, #9
    5e18:	07d2      	lsls	r2, r2, #31
    5e1a:	4320      	orrs	r0, r4
    5e1c:	4310      	orrs	r0, r2
    5e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e20:	2cff      	cmp	r4, #255	; 0xff
    5e22:	d0e1      	beq.n	5de8 <__aeabi_fsub+0x38>
    5e24:	2180      	movs	r1, #128	; 0x80
    5e26:	04c9      	lsls	r1, r1, #19
    5e28:	430d      	orrs	r5, r1
    5e2a:	2a1b      	cmp	r2, #27
    5e2c:	dd00      	ble.n	5e30 <__aeabi_fsub+0x80>
    5e2e:	e131      	b.n	6094 <__aeabi_fsub+0x2e4>
    5e30:	1c29      	adds	r1, r5, #0
    5e32:	2020      	movs	r0, #32
    5e34:	40d1      	lsrs	r1, r2
    5e36:	1a82      	subs	r2, r0, r2
    5e38:	4095      	lsls	r5, r2
    5e3a:	1e6a      	subs	r2, r5, #1
    5e3c:	4195      	sbcs	r5, r2
    5e3e:	430d      	orrs	r5, r1
    5e40:	1b5b      	subs	r3, r3, r5
    5e42:	0158      	lsls	r0, r3, #5
    5e44:	d5d0      	bpl.n	5de8 <__aeabi_fsub+0x38>
    5e46:	019b      	lsls	r3, r3, #6
    5e48:	099f      	lsrs	r7, r3, #6
    5e4a:	1c38      	adds	r0, r7, #0
    5e4c:	f000 f9a2 	bl	6194 <__clzsi2>
    5e50:	1f42      	subs	r2, r0, #5
    5e52:	4097      	lsls	r7, r2
    5e54:	4294      	cmp	r4, r2
    5e56:	dc5f      	bgt.n	5f18 <__aeabi_fsub+0x168>
    5e58:	1b14      	subs	r4, r2, r4
    5e5a:	231f      	movs	r3, #31
    5e5c:	1b1b      	subs	r3, r3, r4
    5e5e:	1c3a      	adds	r2, r7, #0
    5e60:	409f      	lsls	r7, r3
    5e62:	1c61      	adds	r1, r4, #1
    5e64:	1c3b      	adds	r3, r7, #0
    5e66:	40ca      	lsrs	r2, r1
    5e68:	1e5f      	subs	r7, r3, #1
    5e6a:	41bb      	sbcs	r3, r7
    5e6c:	4313      	orrs	r3, r2
    5e6e:	2400      	movs	r4, #0
    5e70:	e7ba      	b.n	5de8 <__aeabi_fsub+0x38>
    5e72:	1e13      	subs	r3, r2, #0
    5e74:	d1b8      	bne.n	5de8 <__aeabi_fsub+0x38>
    5e76:	2300      	movs	r3, #0
    5e78:	2200      	movs	r2, #0
    5e7a:	08db      	lsrs	r3, r3, #3
    5e7c:	2cff      	cmp	r4, #255	; 0xff
    5e7e:	d104      	bne.n	5e8a <__aeabi_fsub+0xda>
    5e80:	2b00      	cmp	r3, #0
    5e82:	d047      	beq.n	5f14 <__aeabi_fsub+0x164>
    5e84:	2080      	movs	r0, #128	; 0x80
    5e86:	03c0      	lsls	r0, r0, #15
    5e88:	4303      	orrs	r3, r0
    5e8a:	025b      	lsls	r3, r3, #9
    5e8c:	0a5b      	lsrs	r3, r3, #9
    5e8e:	e7bf      	b.n	5e10 <__aeabi_fsub+0x60>
    5e90:	1a21      	subs	r1, r4, r0
    5e92:	2900      	cmp	r1, #0
    5e94:	dd44      	ble.n	5f20 <__aeabi_fsub+0x170>
    5e96:	2800      	cmp	r0, #0
    5e98:	d027      	beq.n	5eea <__aeabi_fsub+0x13a>
    5e9a:	2cff      	cmp	r4, #255	; 0xff
    5e9c:	d0a4      	beq.n	5de8 <__aeabi_fsub+0x38>
    5e9e:	2080      	movs	r0, #128	; 0x80
    5ea0:	04c0      	lsls	r0, r0, #19
    5ea2:	4305      	orrs	r5, r0
    5ea4:	291b      	cmp	r1, #27
    5ea6:	dd00      	ble.n	5eaa <__aeabi_fsub+0xfa>
    5ea8:	e0f2      	b.n	6090 <__aeabi_fsub+0x2e0>
    5eaa:	1c28      	adds	r0, r5, #0
    5eac:	2720      	movs	r7, #32
    5eae:	40c8      	lsrs	r0, r1
    5eb0:	1a79      	subs	r1, r7, r1
    5eb2:	408d      	lsls	r5, r1
    5eb4:	1e69      	subs	r1, r5, #1
    5eb6:	418d      	sbcs	r5, r1
    5eb8:	4305      	orrs	r5, r0
    5eba:	195b      	adds	r3, r3, r5
    5ebc:	0159      	lsls	r1, r3, #5
    5ebe:	d400      	bmi.n	5ec2 <__aeabi_fsub+0x112>
    5ec0:	e792      	b.n	5de8 <__aeabi_fsub+0x38>
    5ec2:	3401      	adds	r4, #1
    5ec4:	2cff      	cmp	r4, #255	; 0xff
    5ec6:	d059      	beq.n	5f7c <__aeabi_fsub+0x1cc>
    5ec8:	4973      	ldr	r1, [pc, #460]	; (6098 <__aeabi_fsub+0x2e8>)
    5eca:	2201      	movs	r2, #1
    5ecc:	401a      	ands	r2, r3
    5ece:	400b      	ands	r3, r1
    5ed0:	085b      	lsrs	r3, r3, #1
    5ed2:	4313      	orrs	r3, r2
    5ed4:	e788      	b.n	5de8 <__aeabi_fsub+0x38>
    5ed6:	2d00      	cmp	r5, #0
    5ed8:	d000      	beq.n	5edc <__aeabi_fsub+0x12c>
    5eda:	e77a      	b.n	5dd2 <__aeabi_fsub+0x22>
    5edc:	e777      	b.n	5dce <__aeabi_fsub+0x1e>
    5ede:	3a01      	subs	r2, #1
    5ee0:	2a00      	cmp	r2, #0
    5ee2:	d0ad      	beq.n	5e40 <__aeabi_fsub+0x90>
    5ee4:	2cff      	cmp	r4, #255	; 0xff
    5ee6:	d1a0      	bne.n	5e2a <__aeabi_fsub+0x7a>
    5ee8:	e77e      	b.n	5de8 <__aeabi_fsub+0x38>
    5eea:	2d00      	cmp	r5, #0
    5eec:	d100      	bne.n	5ef0 <__aeabi_fsub+0x140>
    5eee:	e77b      	b.n	5de8 <__aeabi_fsub+0x38>
    5ef0:	3901      	subs	r1, #1
    5ef2:	2900      	cmp	r1, #0
    5ef4:	d0e1      	beq.n	5eba <__aeabi_fsub+0x10a>
    5ef6:	2cff      	cmp	r4, #255	; 0xff
    5ef8:	d1d4      	bne.n	5ea4 <__aeabi_fsub+0xf4>
    5efa:	e775      	b.n	5de8 <__aeabi_fsub+0x38>
    5efc:	2a00      	cmp	r2, #0
    5efe:	d11b      	bne.n	5f38 <__aeabi_fsub+0x188>
    5f00:	1c62      	adds	r2, r4, #1
    5f02:	b2d2      	uxtb	r2, r2
    5f04:	2a01      	cmp	r2, #1
    5f06:	dd4b      	ble.n	5fa0 <__aeabi_fsub+0x1f0>
    5f08:	1b5f      	subs	r7, r3, r5
    5f0a:	017a      	lsls	r2, r7, #5
    5f0c:	d523      	bpl.n	5f56 <__aeabi_fsub+0x1a6>
    5f0e:	1aef      	subs	r7, r5, r3
    5f10:	1c0e      	adds	r6, r1, #0
    5f12:	e79a      	b.n	5e4a <__aeabi_fsub+0x9a>
    5f14:	2300      	movs	r3, #0
    5f16:	e77b      	b.n	5e10 <__aeabi_fsub+0x60>
    5f18:	4b5f      	ldr	r3, [pc, #380]	; (6098 <__aeabi_fsub+0x2e8>)
    5f1a:	1aa4      	subs	r4, r4, r2
    5f1c:	403b      	ands	r3, r7
    5f1e:	e763      	b.n	5de8 <__aeabi_fsub+0x38>
    5f20:	2900      	cmp	r1, #0
    5f22:	d146      	bne.n	5fb2 <__aeabi_fsub+0x202>
    5f24:	1c61      	adds	r1, r4, #1
    5f26:	b2c8      	uxtb	r0, r1
    5f28:	2801      	cmp	r0, #1
    5f2a:	dd29      	ble.n	5f80 <__aeabi_fsub+0x1d0>
    5f2c:	29ff      	cmp	r1, #255	; 0xff
    5f2e:	d024      	beq.n	5f7a <__aeabi_fsub+0x1ca>
    5f30:	18eb      	adds	r3, r5, r3
    5f32:	085b      	lsrs	r3, r3, #1
    5f34:	1c0c      	adds	r4, r1, #0
    5f36:	e757      	b.n	5de8 <__aeabi_fsub+0x38>
    5f38:	2c00      	cmp	r4, #0
    5f3a:	d013      	beq.n	5f64 <__aeabi_fsub+0x1b4>
    5f3c:	28ff      	cmp	r0, #255	; 0xff
    5f3e:	d018      	beq.n	5f72 <__aeabi_fsub+0x1c2>
    5f40:	2480      	movs	r4, #128	; 0x80
    5f42:	04e4      	lsls	r4, r4, #19
    5f44:	4252      	negs	r2, r2
    5f46:	4323      	orrs	r3, r4
    5f48:	2a1b      	cmp	r2, #27
    5f4a:	dd4d      	ble.n	5fe8 <__aeabi_fsub+0x238>
    5f4c:	2301      	movs	r3, #1
    5f4e:	1aeb      	subs	r3, r5, r3
    5f50:	1c04      	adds	r4, r0, #0
    5f52:	1c0e      	adds	r6, r1, #0
    5f54:	e775      	b.n	5e42 <__aeabi_fsub+0x92>
    5f56:	2f00      	cmp	r7, #0
    5f58:	d000      	beq.n	5f5c <__aeabi_fsub+0x1ac>
    5f5a:	e776      	b.n	5e4a <__aeabi_fsub+0x9a>
    5f5c:	2300      	movs	r3, #0
    5f5e:	2200      	movs	r2, #0
    5f60:	2400      	movs	r4, #0
    5f62:	e78a      	b.n	5e7a <__aeabi_fsub+0xca>
    5f64:	2b00      	cmp	r3, #0
    5f66:	d03b      	beq.n	5fe0 <__aeabi_fsub+0x230>
    5f68:	43d2      	mvns	r2, r2
    5f6a:	2a00      	cmp	r2, #0
    5f6c:	d0ef      	beq.n	5f4e <__aeabi_fsub+0x19e>
    5f6e:	28ff      	cmp	r0, #255	; 0xff
    5f70:	d1ea      	bne.n	5f48 <__aeabi_fsub+0x198>
    5f72:	1c2b      	adds	r3, r5, #0
    5f74:	24ff      	movs	r4, #255	; 0xff
    5f76:	1c0e      	adds	r6, r1, #0
    5f78:	e736      	b.n	5de8 <__aeabi_fsub+0x38>
    5f7a:	24ff      	movs	r4, #255	; 0xff
    5f7c:	2300      	movs	r3, #0
    5f7e:	e77c      	b.n	5e7a <__aeabi_fsub+0xca>
    5f80:	2c00      	cmp	r4, #0
    5f82:	d15c      	bne.n	603e <__aeabi_fsub+0x28e>
    5f84:	2b00      	cmp	r3, #0
    5f86:	d100      	bne.n	5f8a <__aeabi_fsub+0x1da>
    5f88:	e080      	b.n	608c <__aeabi_fsub+0x2dc>
    5f8a:	2d00      	cmp	r5, #0
    5f8c:	d100      	bne.n	5f90 <__aeabi_fsub+0x1e0>
    5f8e:	e72b      	b.n	5de8 <__aeabi_fsub+0x38>
    5f90:	195b      	adds	r3, r3, r5
    5f92:	0158      	lsls	r0, r3, #5
    5f94:	d400      	bmi.n	5f98 <__aeabi_fsub+0x1e8>
    5f96:	e727      	b.n	5de8 <__aeabi_fsub+0x38>
    5f98:	4a3f      	ldr	r2, [pc, #252]	; (6098 <__aeabi_fsub+0x2e8>)
    5f9a:	2401      	movs	r4, #1
    5f9c:	4013      	ands	r3, r2
    5f9e:	e723      	b.n	5de8 <__aeabi_fsub+0x38>
    5fa0:	2c00      	cmp	r4, #0
    5fa2:	d115      	bne.n	5fd0 <__aeabi_fsub+0x220>
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d140      	bne.n	602a <__aeabi_fsub+0x27a>
    5fa8:	2d00      	cmp	r5, #0
    5faa:	d063      	beq.n	6074 <__aeabi_fsub+0x2c4>
    5fac:	1c2b      	adds	r3, r5, #0
    5fae:	1c0e      	adds	r6, r1, #0
    5fb0:	e71a      	b.n	5de8 <__aeabi_fsub+0x38>
    5fb2:	2c00      	cmp	r4, #0
    5fb4:	d121      	bne.n	5ffa <__aeabi_fsub+0x24a>
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d054      	beq.n	6064 <__aeabi_fsub+0x2b4>
    5fba:	43c9      	mvns	r1, r1
    5fbc:	2900      	cmp	r1, #0
    5fbe:	d004      	beq.n	5fca <__aeabi_fsub+0x21a>
    5fc0:	28ff      	cmp	r0, #255	; 0xff
    5fc2:	d04c      	beq.n	605e <__aeabi_fsub+0x2ae>
    5fc4:	291b      	cmp	r1, #27
    5fc6:	dd58      	ble.n	607a <__aeabi_fsub+0x2ca>
    5fc8:	2301      	movs	r3, #1
    5fca:	195b      	adds	r3, r3, r5
    5fcc:	1c04      	adds	r4, r0, #0
    5fce:	e775      	b.n	5ebc <__aeabi_fsub+0x10c>
    5fd0:	2b00      	cmp	r3, #0
    5fd2:	d119      	bne.n	6008 <__aeabi_fsub+0x258>
    5fd4:	2d00      	cmp	r5, #0
    5fd6:	d048      	beq.n	606a <__aeabi_fsub+0x2ba>
    5fd8:	1c2b      	adds	r3, r5, #0
    5fda:	1c0e      	adds	r6, r1, #0
    5fdc:	24ff      	movs	r4, #255	; 0xff
    5fde:	e703      	b.n	5de8 <__aeabi_fsub+0x38>
    5fe0:	1c2b      	adds	r3, r5, #0
    5fe2:	1c04      	adds	r4, r0, #0
    5fe4:	1c0e      	adds	r6, r1, #0
    5fe6:	e6ff      	b.n	5de8 <__aeabi_fsub+0x38>
    5fe8:	1c1c      	adds	r4, r3, #0
    5fea:	2620      	movs	r6, #32
    5fec:	40d4      	lsrs	r4, r2
    5fee:	1ab2      	subs	r2, r6, r2
    5ff0:	4093      	lsls	r3, r2
    5ff2:	1e5a      	subs	r2, r3, #1
    5ff4:	4193      	sbcs	r3, r2
    5ff6:	4323      	orrs	r3, r4
    5ff8:	e7a9      	b.n	5f4e <__aeabi_fsub+0x19e>
    5ffa:	28ff      	cmp	r0, #255	; 0xff
    5ffc:	d02f      	beq.n	605e <__aeabi_fsub+0x2ae>
    5ffe:	2480      	movs	r4, #128	; 0x80
    6000:	04e4      	lsls	r4, r4, #19
    6002:	4249      	negs	r1, r1
    6004:	4323      	orrs	r3, r4
    6006:	e7dd      	b.n	5fc4 <__aeabi_fsub+0x214>
    6008:	24ff      	movs	r4, #255	; 0xff
    600a:	2d00      	cmp	r5, #0
    600c:	d100      	bne.n	6010 <__aeabi_fsub+0x260>
    600e:	e6eb      	b.n	5de8 <__aeabi_fsub+0x38>
    6010:	2280      	movs	r2, #128	; 0x80
    6012:	08db      	lsrs	r3, r3, #3
    6014:	03d2      	lsls	r2, r2, #15
    6016:	4213      	tst	r3, r2
    6018:	d004      	beq.n	6024 <__aeabi_fsub+0x274>
    601a:	08ed      	lsrs	r5, r5, #3
    601c:	4215      	tst	r5, r2
    601e:	d101      	bne.n	6024 <__aeabi_fsub+0x274>
    6020:	1c2b      	adds	r3, r5, #0
    6022:	1c0e      	adds	r6, r1, #0
    6024:	00db      	lsls	r3, r3, #3
    6026:	24ff      	movs	r4, #255	; 0xff
    6028:	e6de      	b.n	5de8 <__aeabi_fsub+0x38>
    602a:	2d00      	cmp	r5, #0
    602c:	d100      	bne.n	6030 <__aeabi_fsub+0x280>
    602e:	e6db      	b.n	5de8 <__aeabi_fsub+0x38>
    6030:	1b5a      	subs	r2, r3, r5
    6032:	0150      	lsls	r0, r2, #5
    6034:	d400      	bmi.n	6038 <__aeabi_fsub+0x288>
    6036:	e71c      	b.n	5e72 <__aeabi_fsub+0xc2>
    6038:	1aeb      	subs	r3, r5, r3
    603a:	1c0e      	adds	r6, r1, #0
    603c:	e6d4      	b.n	5de8 <__aeabi_fsub+0x38>
    603e:	2b00      	cmp	r3, #0
    6040:	d00d      	beq.n	605e <__aeabi_fsub+0x2ae>
    6042:	24ff      	movs	r4, #255	; 0xff
    6044:	2d00      	cmp	r5, #0
    6046:	d100      	bne.n	604a <__aeabi_fsub+0x29a>
    6048:	e6ce      	b.n	5de8 <__aeabi_fsub+0x38>
    604a:	2280      	movs	r2, #128	; 0x80
    604c:	08db      	lsrs	r3, r3, #3
    604e:	03d2      	lsls	r2, r2, #15
    6050:	4213      	tst	r3, r2
    6052:	d0e7      	beq.n	6024 <__aeabi_fsub+0x274>
    6054:	08ed      	lsrs	r5, r5, #3
    6056:	4215      	tst	r5, r2
    6058:	d1e4      	bne.n	6024 <__aeabi_fsub+0x274>
    605a:	1c2b      	adds	r3, r5, #0
    605c:	e7e2      	b.n	6024 <__aeabi_fsub+0x274>
    605e:	1c2b      	adds	r3, r5, #0
    6060:	24ff      	movs	r4, #255	; 0xff
    6062:	e6c1      	b.n	5de8 <__aeabi_fsub+0x38>
    6064:	1c2b      	adds	r3, r5, #0
    6066:	1c04      	adds	r4, r0, #0
    6068:	e6be      	b.n	5de8 <__aeabi_fsub+0x38>
    606a:	2380      	movs	r3, #128	; 0x80
    606c:	2200      	movs	r2, #0
    606e:	049b      	lsls	r3, r3, #18
    6070:	24ff      	movs	r4, #255	; 0xff
    6072:	e702      	b.n	5e7a <__aeabi_fsub+0xca>
    6074:	1c23      	adds	r3, r4, #0
    6076:	2200      	movs	r2, #0
    6078:	e6ff      	b.n	5e7a <__aeabi_fsub+0xca>
    607a:	1c1c      	adds	r4, r3, #0
    607c:	2720      	movs	r7, #32
    607e:	40cc      	lsrs	r4, r1
    6080:	1a79      	subs	r1, r7, r1
    6082:	408b      	lsls	r3, r1
    6084:	1e59      	subs	r1, r3, #1
    6086:	418b      	sbcs	r3, r1
    6088:	4323      	orrs	r3, r4
    608a:	e79e      	b.n	5fca <__aeabi_fsub+0x21a>
    608c:	1c2b      	adds	r3, r5, #0
    608e:	e6ab      	b.n	5de8 <__aeabi_fsub+0x38>
    6090:	2501      	movs	r5, #1
    6092:	e712      	b.n	5eba <__aeabi_fsub+0x10a>
    6094:	2501      	movs	r5, #1
    6096:	e6d3      	b.n	5e40 <__aeabi_fsub+0x90>
    6098:	fbffffff 	.word	0xfbffffff

0000609c <__aeabi_f2iz>:
    609c:	0243      	lsls	r3, r0, #9
    609e:	0a59      	lsrs	r1, r3, #9
    60a0:	0043      	lsls	r3, r0, #1
    60a2:	0fc2      	lsrs	r2, r0, #31
    60a4:	0e1b      	lsrs	r3, r3, #24
    60a6:	2000      	movs	r0, #0
    60a8:	2b7e      	cmp	r3, #126	; 0x7e
    60aa:	dd0d      	ble.n	60c8 <__aeabi_f2iz+0x2c>
    60ac:	2b9d      	cmp	r3, #157	; 0x9d
    60ae:	dc0c      	bgt.n	60ca <__aeabi_f2iz+0x2e>
    60b0:	2080      	movs	r0, #128	; 0x80
    60b2:	0400      	lsls	r0, r0, #16
    60b4:	4301      	orrs	r1, r0
    60b6:	2b95      	cmp	r3, #149	; 0x95
    60b8:	dc0a      	bgt.n	60d0 <__aeabi_f2iz+0x34>
    60ba:	2096      	movs	r0, #150	; 0x96
    60bc:	1ac3      	subs	r3, r0, r3
    60be:	40d9      	lsrs	r1, r3
    60c0:	4248      	negs	r0, r1
    60c2:	2a00      	cmp	r2, #0
    60c4:	d100      	bne.n	60c8 <__aeabi_f2iz+0x2c>
    60c6:	1c08      	adds	r0, r1, #0
    60c8:	4770      	bx	lr
    60ca:	4b03      	ldr	r3, [pc, #12]	; (60d8 <__aeabi_f2iz+0x3c>)
    60cc:	18d0      	adds	r0, r2, r3
    60ce:	e7fb      	b.n	60c8 <__aeabi_f2iz+0x2c>
    60d0:	3b96      	subs	r3, #150	; 0x96
    60d2:	4099      	lsls	r1, r3
    60d4:	e7f4      	b.n	60c0 <__aeabi_f2iz+0x24>
    60d6:	46c0      	nop			; (mov r8, r8)
    60d8:	7fffffff 	.word	0x7fffffff

000060dc <__aeabi_i2f>:
    60dc:	b570      	push	{r4, r5, r6, lr}
    60de:	1e04      	subs	r4, r0, #0
    60e0:	d03c      	beq.n	615c <__aeabi_i2f+0x80>
    60e2:	0fc6      	lsrs	r6, r0, #31
    60e4:	d000      	beq.n	60e8 <__aeabi_i2f+0xc>
    60e6:	4244      	negs	r4, r0
    60e8:	1c20      	adds	r0, r4, #0
    60ea:	f000 f853 	bl	6194 <__clzsi2>
    60ee:	239e      	movs	r3, #158	; 0x9e
    60f0:	1c25      	adds	r5, r4, #0
    60f2:	1a1b      	subs	r3, r3, r0
    60f4:	2b96      	cmp	r3, #150	; 0x96
    60f6:	dc0c      	bgt.n	6112 <__aeabi_i2f+0x36>
    60f8:	3808      	subs	r0, #8
    60fa:	4084      	lsls	r4, r0
    60fc:	0264      	lsls	r4, r4, #9
    60fe:	0a64      	lsrs	r4, r4, #9
    6100:	b2db      	uxtb	r3, r3
    6102:	1c32      	adds	r2, r6, #0
    6104:	0264      	lsls	r4, r4, #9
    6106:	05db      	lsls	r3, r3, #23
    6108:	0a60      	lsrs	r0, r4, #9
    610a:	07d2      	lsls	r2, r2, #31
    610c:	4318      	orrs	r0, r3
    610e:	4310      	orrs	r0, r2
    6110:	bd70      	pop	{r4, r5, r6, pc}
    6112:	2b99      	cmp	r3, #153	; 0x99
    6114:	dd0a      	ble.n	612c <__aeabi_i2f+0x50>
    6116:	2205      	movs	r2, #5
    6118:	1a12      	subs	r2, r2, r0
    611a:	1c21      	adds	r1, r4, #0
    611c:	40d1      	lsrs	r1, r2
    611e:	1c0a      	adds	r2, r1, #0
    6120:	1c01      	adds	r1, r0, #0
    6122:	311b      	adds	r1, #27
    6124:	408d      	lsls	r5, r1
    6126:	1e69      	subs	r1, r5, #1
    6128:	418d      	sbcs	r5, r1
    612a:	4315      	orrs	r5, r2
    612c:	2805      	cmp	r0, #5
    612e:	dd01      	ble.n	6134 <__aeabi_i2f+0x58>
    6130:	1f42      	subs	r2, r0, #5
    6132:	4095      	lsls	r5, r2
    6134:	4c16      	ldr	r4, [pc, #88]	; (6190 <__aeabi_i2f+0xb4>)
    6136:	402c      	ands	r4, r5
    6138:	076a      	lsls	r2, r5, #29
    613a:	d004      	beq.n	6146 <__aeabi_i2f+0x6a>
    613c:	220f      	movs	r2, #15
    613e:	4015      	ands	r5, r2
    6140:	2d04      	cmp	r5, #4
    6142:	d000      	beq.n	6146 <__aeabi_i2f+0x6a>
    6144:	3404      	adds	r4, #4
    6146:	0161      	lsls	r1, r4, #5
    6148:	d50c      	bpl.n	6164 <__aeabi_i2f+0x88>
    614a:	239f      	movs	r3, #159	; 0x9f
    614c:	1a18      	subs	r0, r3, r0
    614e:	28ff      	cmp	r0, #255	; 0xff
    6150:	d01a      	beq.n	6188 <__aeabi_i2f+0xac>
    6152:	01a4      	lsls	r4, r4, #6
    6154:	0a64      	lsrs	r4, r4, #9
    6156:	b2c3      	uxtb	r3, r0
    6158:	1c32      	adds	r2, r6, #0
    615a:	e7d3      	b.n	6104 <__aeabi_i2f+0x28>
    615c:	2200      	movs	r2, #0
    615e:	2300      	movs	r3, #0
    6160:	2400      	movs	r4, #0
    6162:	e7cf      	b.n	6104 <__aeabi_i2f+0x28>
    6164:	08e4      	lsrs	r4, r4, #3
    6166:	2bff      	cmp	r3, #255	; 0xff
    6168:	d004      	beq.n	6174 <__aeabi_i2f+0x98>
    616a:	0264      	lsls	r4, r4, #9
    616c:	0a64      	lsrs	r4, r4, #9
    616e:	b2db      	uxtb	r3, r3
    6170:	1c32      	adds	r2, r6, #0
    6172:	e7c7      	b.n	6104 <__aeabi_i2f+0x28>
    6174:	2c00      	cmp	r4, #0
    6176:	d004      	beq.n	6182 <__aeabi_i2f+0xa6>
    6178:	2080      	movs	r0, #128	; 0x80
    617a:	03c0      	lsls	r0, r0, #15
    617c:	4304      	orrs	r4, r0
    617e:	0264      	lsls	r4, r4, #9
    6180:	0a64      	lsrs	r4, r4, #9
    6182:	1c32      	adds	r2, r6, #0
    6184:	23ff      	movs	r3, #255	; 0xff
    6186:	e7bd      	b.n	6104 <__aeabi_i2f+0x28>
    6188:	1c32      	adds	r2, r6, #0
    618a:	23ff      	movs	r3, #255	; 0xff
    618c:	2400      	movs	r4, #0
    618e:	e7b9      	b.n	6104 <__aeabi_i2f+0x28>
    6190:	fbffffff 	.word	0xfbffffff

00006194 <__clzsi2>:
    6194:	211c      	movs	r1, #28
    6196:	2301      	movs	r3, #1
    6198:	041b      	lsls	r3, r3, #16
    619a:	4298      	cmp	r0, r3
    619c:	d301      	bcc.n	61a2 <__clzsi2+0xe>
    619e:	0c00      	lsrs	r0, r0, #16
    61a0:	3910      	subs	r1, #16
    61a2:	0a1b      	lsrs	r3, r3, #8
    61a4:	4298      	cmp	r0, r3
    61a6:	d301      	bcc.n	61ac <__clzsi2+0x18>
    61a8:	0a00      	lsrs	r0, r0, #8
    61aa:	3908      	subs	r1, #8
    61ac:	091b      	lsrs	r3, r3, #4
    61ae:	4298      	cmp	r0, r3
    61b0:	d301      	bcc.n	61b6 <__clzsi2+0x22>
    61b2:	0900      	lsrs	r0, r0, #4
    61b4:	3904      	subs	r1, #4
    61b6:	a202      	add	r2, pc, #8	; (adr r2, 61c0 <__clzsi2+0x2c>)
    61b8:	5c10      	ldrb	r0, [r2, r0]
    61ba:	1840      	adds	r0, r0, r1
    61bc:	4770      	bx	lr
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	02020304 	.word	0x02020304
    61c4:	01010101 	.word	0x01010101
	...

000061d0 <__libc_init_array>:
    61d0:	b570      	push	{r4, r5, r6, lr}
    61d2:	4b0e      	ldr	r3, [pc, #56]	; (620c <__libc_init_array+0x3c>)
    61d4:	4d0e      	ldr	r5, [pc, #56]	; (6210 <__libc_init_array+0x40>)
    61d6:	2400      	movs	r4, #0
    61d8:	1aed      	subs	r5, r5, r3
    61da:	10ad      	asrs	r5, r5, #2
    61dc:	1c1e      	adds	r6, r3, #0
    61de:	42ac      	cmp	r4, r5
    61e0:	d004      	beq.n	61ec <__libc_init_array+0x1c>
    61e2:	00a3      	lsls	r3, r4, #2
    61e4:	58f3      	ldr	r3, [r6, r3]
    61e6:	4798      	blx	r3
    61e8:	3401      	adds	r4, #1
    61ea:	e7f8      	b.n	61de <__libc_init_array+0xe>
    61ec:	f003 f88c 	bl	9308 <_init>
    61f0:	4b08      	ldr	r3, [pc, #32]	; (6214 <__libc_init_array+0x44>)
    61f2:	4d09      	ldr	r5, [pc, #36]	; (6218 <__libc_init_array+0x48>)
    61f4:	2400      	movs	r4, #0
    61f6:	1aed      	subs	r5, r5, r3
    61f8:	10ad      	asrs	r5, r5, #2
    61fa:	1c1e      	adds	r6, r3, #0
    61fc:	42ac      	cmp	r4, r5
    61fe:	d004      	beq.n	620a <__libc_init_array+0x3a>
    6200:	00a3      	lsls	r3, r4, #2
    6202:	58f3      	ldr	r3, [r6, r3]
    6204:	4798      	blx	r3
    6206:	3401      	adds	r4, #1
    6208:	e7f8      	b.n	61fc <__libc_init_array+0x2c>
    620a:	bd70      	pop	{r4, r5, r6, pc}
    620c:	00009314 	.word	0x00009314
    6210:	00009314 	.word	0x00009314
    6214:	00009314 	.word	0x00009314
    6218:	00009318 	.word	0x00009318

0000621c <memcpy>:
    621c:	b510      	push	{r4, lr}
    621e:	2300      	movs	r3, #0
    6220:	4293      	cmp	r3, r2
    6222:	d003      	beq.n	622c <memcpy+0x10>
    6224:	5ccc      	ldrb	r4, [r1, r3]
    6226:	54c4      	strb	r4, [r0, r3]
    6228:	3301      	adds	r3, #1
    622a:	e7f9      	b.n	6220 <memcpy+0x4>
    622c:	bd10      	pop	{r4, pc}

0000622e <memset>:
    622e:	1c03      	adds	r3, r0, #0
    6230:	1882      	adds	r2, r0, r2
    6232:	4293      	cmp	r3, r2
    6234:	d002      	beq.n	623c <memset+0xe>
    6236:	7019      	strb	r1, [r3, #0]
    6238:	3301      	adds	r3, #1
    623a:	e7fa      	b.n	6232 <memset+0x4>
    623c:	4770      	bx	lr
	...

00006240 <COG_parameters>:
    6240:	0000 0000 0f00 00ff 0003 0010 0060 0039     ............`.9.
    6250:	0000 01e0 0000 0000 ff01 00e0 0003 0019     ................
    6260:	0060 004b 0000 01e0 0000 7f00 feff 0000     `.K.............
    6270:	0000 0021 00b0 006f 0000 0276 0000 0300     ..!...o...v.....
    6280:	00fc ff00 0003 0012 0080 0045 0000 01e0     ..........E.....
    6290:	0000 e01f 0000 ff00 0003 001d 0080 005b     ..............[.
    62a0:	0000 0276                                   ..v.

000062a4 <temperature_table>:
    62a4:	1fe0 1680 0f00 0780 05a0 03c0 01e0 0150     ..............P.
    62b4:	1fe0 1680 0f00 0780 05a0 03c0 01e0 0150     ..............P.
    62c4:	29d6 1d88 13b0 09d8 0762 04ec 0276 01b9     .)......b...v...
    62d4:	1fe0 1680 0f00 0780 05a0 03c0 01e0 0150     ..............P.
    62e4:	29d6 1d88 13b0 09d8 0762 04ec 0276 01b9     .)......b...v...

000062f4 <data_lookuptable>:
    62f4:	eaaa faba eeae febe ebab fbbb efaf ffbf     ................
    6304:	8000 a020 8808 a828 8202 a222 8a0a aa2a     .. ...(..."...*.
    6314:	d555 f575 dd5d fd7d d757 f777 df5f ff7f     U.u.].}.W.w._...
    6324:	bfff afef bbfb abeb befe aeee bafa aaea     ................

00006334 <scan_lookuptable>:
    6334:	c003 300c 0c30 03c0                         ...00...

0000633c <BORDER_TABLE>:
    633c:	0000 aa00                                   ....

00006340 <SCAN_TABLE>:
    6340:	30c0 030c 03b6 0000 03d0 0000 03ea 0000     .0..............
    6350:	0404 0000 041e 0000 0002 0000 0003 0000     ................
    6360:	0028 0000 0029 0000 0004 0000 0005 0000     (...)...........
    6370:	0006 0000 0007 0000 0020 0000 0021 0000     ........ ...!...
    6380:	0022 0000 0023 0000 0024 0000 0025 0000     "...#...$...%...
    6390:	0026 0000 0027 0000 0008 0000 0009 0000     &...'...........
    63a0:	000a 0000 000b 0000 2cba 0000 2cc0 0000     .........,...,..
    63b0:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    63c0:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    63d0:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    63e0:	2cc0 0000 2cc0 0000 2c98 0000 2cc0 0000     .,...,...,...,..
    63f0:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    6400:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    6410:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    6420:	2cc0 0000 2cc0 0000 2cb4 0000 2cc0 0000     .,...,...,...,..
    6430:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    6440:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    6450:	2cc0 0000 2cc0 0000 2cc0 0000 2cc0 0000     .,...,...,...,..
    6460:	2cc0 0000 2cc0 0000 2cae 0000 2c56 0000     .,...,...,..V,..
    6470:	2c6c 0000 2c82 0000 2c3c 0000 0800 4200     l,...,..<,.....B
    6480:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    6490:	1c00 4200 2c00 4200 3000 4200 3400 4200     ...B.,.B.0.B.4.B
    64a0:	3800 4200 3c00 4200 1c1b 1d1c 001d 0000     .8.B.<.B........
    64b0:	0800 1000 2000 4000 8000 0000               ..... .@....

000064bc <image_array_270_1>:
    64bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    64cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    64dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    64ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    64fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    650c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    651c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    652c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    653c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    654c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    655c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    656c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    657c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    658c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    659c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    65ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    65bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    65cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    65dc:	f8ff 1e00 077e 0180 ffff ffff fce0 ff1f     ....~...........
    65ec:	ffff ffff ffff e1ff ffff ffff ffff ffff     ................
    65fc:	ffff 00f8 7e1e 8007 ff01 ffff c0ff 1ffc     .....~..........
    660c:	ffff ffff ffff ffff ffe1 ffff ffff ffff     ................
    661c:	ffff f9ff 98ff f961 f99f ffff ffff fc80     ......a.........
    662c:	ff1f ffff ffff ffff e1ff ffff ffff ffff     ................
    663c:	ffff ffff fff9 6198 9ff9 fff9 ffff 80ff     .......a........
    664c:	1ffc ffff ffff ffff ffff ffe1 ffff ffff     ................
    665c:	ffff ffff f9ff 9e81 9f07 1998 ffff ffff     ................
    666c:	fc00 ff1f ffff ffff ffff e1ff ffff ffff     ................
    667c:	ffff ffff ffff 81f9 079e 989f ff19 ffff     ................
    668c:	00fe 1ffc ffff ffff ffff ffff ffe1 ffff     ................
    669c:	ffff ffff ffff f9ff 9881 9967 1998 ffff     ..........g.....
    66ac:	fcff fc00 ff1f ffff ffff ffff e1ff ffff     ................
    66bc:	ffff ffff ffff ffff 81f9 6798 9899 ff19     ...........g....
    66cc:	ffff 10f8 1ffc ffff ffff ffff ffff ffe1     ................
    66dc:	ffff ffff ffff ffff f9ff 9f81 0198 1998     ................
    66ec:	ffff f0ff fc30 ff1f fff8 ffe3 c1ff e1ff     ....0...........
    66fc:	ffff ffff ffff ffff ffff 81f9 989f 9801     ................
    670c:	ff19 ffff 70e0 00f0 c03f 001f fe7f 3f00     .....p..?......?
    671c:	ffe1 ffff ffff ffff ffff f9ff 99ff e79f     ................
    672c:	f99f ffff e0ff f0f0 3f00 0e00 1f00 00f8     .........?......
    673c:	e10f ffff ffff ffff ffff ffff fff9 9f99     ................
    674c:	9fe7 fff9 ffff f0c1 00f0 003f 0004 f00f     ..........?.....
    675c:	0700 ffe1 ffff ffff ffff ffff f8ff 1900     ................
    676c:	9999 0180 ffff 83ff f0f0 3e00 0000 0700     ...........>....
    677c:	08e0 e103 ffff ffff ffff ffff ffff 00f8     ................
    678c:	9919 8099 ff01 ffff f003 1ffc 07fc 1c00     ................
    679c:	e007 037f ffe1 ffff ffff ffff ffff ffff     ................
    67ac:	ffff 9ff9 ffff ffff 07fe fcf0 fc1f c01f     ................
    67bc:	037f ffc0 e181 ffff ffff ffff ffff ffff     ................
    67cc:	ffff f9ff ff9f ffff fcff f00f 1ffc 3ff8     ...............?
    67dc:	7fe0 c183 c1ff ffe1 ffff ffff ffff ffff     ................
    67ec:	f8ff 8001 f819 6766 ffff 1ff8 fcf0 f81f     ......fg........
    67fc:	e03f 83ff ff81 e1c1 ffff ffff ffff ffff     ?...............
    680c:	ffff 01f8 1980 66f8 ff67 f0ff f000 1ffc     .......fg.......
    681c:	3ff8 ffe0 8083 0100 ffe1 ffff ffff ffff     .?..............
    682c:	ffff ffff e6f9 607e 9f07 ffff 00f0 fcf0     ......~`........
    683c:	f81f e03f c3ff 0080 e100 ffff ffff ffff     ..?.............
    684c:	ffff ffff f9ff 7ee6 0760 ff9f e0ff f000     .......~`.......
    685c:	1ffc 3ff8 ffe0 80c3 0000 ffe1 ffff ffff     ...?............
    686c:	ffff ffff ffff 18e6 e761 e1f9 ffff 00c0     ........a.......
    687c:	fcf0 f81f e03f c3ff 0080 e100 ffff ffff     ....?...........
    688c:	ffff ffff ffff e6ff 6118 f9e7 ffe1 80ff     .........a......
    689c:	f000 1ffc 3ff8 ffe0 80c3 ce07 ffe1 ffff     .....?..........
    68ac:	ffff ffff ffff f8ff f801 e607 f901 ffff     ................
    68bc:	ff03 fcf0 f81f e03f c3ff ff83 e1ff ffff     ......?.........
    68cc:	ffff ffff ffff ffff 01f8 07f8 01e6 fff9     ................
    68dc:	07fe f0ff 1ffc 3ff8 ffe0 c1c3 ffff ffe0     .......?........
    68ec:	ffff ffff ffff ffff ffff 00e6 f867 017e     ............g.~.
    68fc:	feff ff0f fef0 f80f e03f c3ff ffc1 e0ff     ........?.......
    690c:	ffff ffff ffff ffff ffff e6ff 6700 7ef8     .............g.~
    691c:	ff01 1ffc f0ff 07fe 3ff8 ffe0 c0c3 c1ff     .........?......
    692c:	7fe0 ffff ffff ffff ffff f9ff 619e 8699     .............a..
    693c:	e719 f8ff ff3f fff0 3800 e03f c3ff 7fe0     ....?....8?.....
    694c:	f003 ff03 ffff ffff ffff ffff 9ef9 9961     ..............a.
    695c:	1986 ffe7 3ff0 f0ff 00ff 3f38 ffe0 f0c3     .....?....8?....
    696c:	0300 03f8 ffff ffff ffff ffff f9ff 9ee1     ................
    697c:	807f e119 e0ff ff7f fff0 3880 e03f c3ff     ...........8?...
    698c:	00f0 fc07 ff03 ffff ffff ffff ffff e1f9     ................
    699c:	7f9e 1980 ffe1 ffc0 f0ff e0ff 3f38 ffe0     ............8?..
    69ac:	fcc3 1f00 03fe ffff ffff ffff ffff f9ff     ................
    69bc:	f887 fe19 e11f ffff ffff ffff ffff ffff     ................
    69cc:	ffff c1ff ffff ffff ffff ffff ffff ffff     ................
    69dc:	87f9 19f8 1ffe ffe1 ffff ffff ffff ffff     ................
    69ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    69fc:	f9ff 19fe f899 1900 ffff ffff ffff ffff     ................
    6a0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6a1c:	ffff fef9 9919 00f8 ff19 ffff ffff ffff     ................
    6a2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6a3c:	ffff ffff f8ff 191e 99f9 ffff ffff ffff     ................
    6a4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6a5c:	ffff ffff ffff 1ef8 f919 ff99 ffff ffff     ................
    6a6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6a7c:	ffff ffff f8ff 1900 8181 6198 ffff ffff     ...........a....
    6a8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6a9c:	ffff ffff ffff 00f8 8119 9881 ff61 ffff     ............a...
    6aac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6abc:	ffff ffff ffff f9ff 9eff 6106 61f8 ffff     ...........a.a..
    6acc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6adc:	ffff ffff ffff ffff fff9 069e f861 ff61     ............a.a.
    6aec:	ffff ffff ffff ffff 1f00 80ff ff1f ffff     ................
    6afc:	ffff ffff ffff ffff f9ff 9881 e061 0100     ............a...
    6b0c:	ffff ffff ffff ffff 80ff ff0f 3f00 ffff     .............?..
    6b1c:	ffff ffff ffff ffff ffff 81f9 6198 00e0     .............a..
    6b2c:	ff01 ffff ffff ffff ffff 07c0 00fe ff7f     ................
    6b3c:	ffff ffff ffff ffff ffff f9ff 9881 0718     ................
    6b4c:	7998 ffff ffff ffff ffff c0ff fe07 7f00     .y..............
    6b5c:	ffff ffff ffff ffff ffff ffff 81f9 1898     ................
    6b6c:	9807 ff79 ffff ffff ffff ffff 03e0 00fc     ..y.............
    6b7c:	ffff ffff ffff ffff ffff ffff f9ff 9981     ................
    6b8c:	79f8 7986 ffff ffff ffff ffff f0ff f801     .y.y............
    6b9c:	ff01 ffff ffff ffff ffff ffff ffff 81f9     ................
    6bac:	f899 8679 ff79 ffff ffff ffff ffff 01f0     ..y.y...........
    6bbc:	03f8 ffff ffff ffff ffff ffff ffff f9ff     ................
    6bcc:	99ff 1f98 7998 ffff ffff ffff ffff f8ff     .....y..........
    6bdc:	f000 ff03 ffff ffff ffff ffff ffff ffff     ................
    6bec:	fff9 9899 981f ff79 ffff ffff ffff ffff     ......y.........
    6bfc:	00fc 07e0 ffff ffff ffff ffff ffff ffff     ................
    6c0c:	f8ff 1800 9919 81e7 ffff ffff ffff ffff     ................
    6c1c:	fcff 6000 ff0f ffff ffff ffff ffff ffff     ...`............
    6c2c:	ffff 00f8 1918 e799 ff81 ffff ffff ffff     ................
    6c3c:	ffff 00fe 0f00 ffff ffff ffff ffff ffff     ................
    6c4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6c5c:	ffff ffff 0000 ff1f ffff ffff ffff ffff     ................
    6c6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6c7c:	ffff ffff 00ff 3f00 ffff ffff ffff ffff     .......?........
    6c8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6c9c:	ffff ffff ffff 0080 ff7f ffff ffff ffff     ................
    6cac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6cbc:	ffff ffff ffff c0ff 7f00 ffff ffff ffff     ................
    6ccc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6cdc:	ffff ffff ffff ffff 00c0 ffff ffff ffff     ................
    6cec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6cfc:	ffff ffff ffff ffff e0ff ff01 ffff ffff     ................
    6d0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6d1c:	e0ff e001 f803 ff00 ffff 01f0 fcff 7f00     ................
    6d2c:	ff07 7ff0 0e80 e107 01e0 03e0 ffff ffff     ................
    6d3c:	ffff 01e0 00e0 00f8 ff3f e0ff ff00 00fc     ........?.......
    6d4c:	071f e0ff 803f 070e e0e1 e001 ff00 ffff     ....?...........
    6d5c:	ffff e0ff e001 7800 1f00 ffff 00e0 fc7f     .......x........
    6d6c:	0f00 ff07 3fe0 0e80 e103 01e0 00e0 ff7f     .....?..........
    6d7c:	ffff ffff ffe0 f0e0 3c38 ff0f c0ff 7f00     ........8<......
    6d8c:	1efc 0707 c0ff f01f 017e e0e1 e0ff 3ff0     ........~......?
    6d9c:	ffff ffff e0ff e0ff 38f8 073f ffff 0080     .........8?.....
    6dac:	fc3f 071f ff07 1fc0 7ef0 e101 ffe0 fce0     ?........~......
    6dbc:	ff1f ffff ffff ffe0 f8e0 3f38 ff07 80ff     ..........8?....
    6dcc:	1f00 1ffc 0707 c0ff f01f 007e e0e1 e0ff     ..........~.....
    6ddc:	1ffc ffff ffff e0ff e0ff 38f8 833f ffff     ...........8?...
    6dec:	0000 fc1f 071f ff07 0f86 7ef0 6110 ffe0     ...........~.a..
    6dfc:	fee0 ff0f ffff ffff 03e0 f8e0 3f38 ff83     ............8?..
    6e0c:	00fe 0f00 1ffc 0707 86ff f00f 107e e061     ............~.a.
    6e1c:	e003 0ffe ffff ffff e0ff e003 78f0 833f     .............x?.
    6e2c:	feff c000 fc07 0f1e ff07 0f86 7ef0 2118     .............~.!
    6e3c:	03e0 fee0 fc0f 010f 3ffc 03e0 00e0 3f78     .........?....x?
    6e4c:	ff83 01fc 07e0 00fc 070f 0fff f007 187e     ..............~.
    6e5c:	e021 e003 0ffe e7fc f33c e0cf e0ff f800     !.......<.......
    6e6c:	833f f8ff e001 fc03 1f00 ff07 070f 7ef0     ?..............~
    6e7c:	011c ffe0 fee0 fc0f 3ef3 cf73 ffe0 03e0     .........>s.....
    6e8c:	3ff8 ff83 03f8 01f0 00fc 077f 00fe f003     .?..............
    6e9c:	1e7e e001 e0ff 0ffe f3fc 673e e0e7 e0ff     ~.........>g....
    6eac:	f8ff 073f f0ff f807 fc01 ff1f fe07 0300     ..?.............
    6ebc:	7ef0 011e ffe0 fce0 fc1f 3cf3 e7e7 ffe0     .~.........<....
    6ecc:	ffe0 3ff8 ff07 07e0 00f8 1ffc 07ff 00fe     ...?............
    6edc:	f003 1f7e e001 e0ff 1ffc e7fc e701 e0e7     ..~.............
    6eec:	e0ff f8ff 0f3c c0ff fc0f 7c00 ff1f fc07     ....<......|....
    6efc:	811f 7ef0 811f ffe0 f0e0 fc3f 390f e7e7     ...~......?..9..
    6f0c:	01e0 ffe0 00f8 ff1f 1fc0 00fc 1f7c 00ff     ............|...
    6f1c:	3f04 80c1 1f0e e081 e001 7f00 fffc f33c     .?............<.
    6f2c:	e0cf e001 f8ff 3f00 80ff fe1f 3c00 ff1f     .......?.....<..
    6f3c:	0400 c13f 0e80 c11f 01e0 00e0 fcff 3eff     ..?............>
    6f4c:	cf73 01e0 ffe0 00f8 ffff 3f00 00ff 1f1c     s..........?....
    6f5c:	00ff 7f00 80c0 1f0e e0c1 e001 ff03 fffc     ................
    6f6c:	3c3f ff3f ffff ffff ffff ffff ffff ffff     ?<?.............
    6f7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6f8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6f9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6fac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6fbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6fcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6fdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6fec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    6ffc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    700c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    701c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    702c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    703c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    704c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    705c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    706c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    707c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    708c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    709c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    70ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    70bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    70cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    70dc:	e5ff cbbd 9488 4cee 4ac7 35c3 3ded 9ee5     .......L.J.5.=..
    70ec:	deb4 49f6 8998 2e6c 0b15 539c ffff ffff     ...I..l....S....
    70fc:	ffff bde5 88cb ee94 c74c c34a ed35 e53d     ........L.J.5.=.
    710c:	b49e f6de 9849 6c89 152e 9c0b ff53 ffff     ....I..l....S...
    711c:	ffff e5ff cbbd 9488 4cee 4ac7 35c3 3ded     .........L.J.5.=
    712c:	9ee5 deb4 49f6 8998 2e6c 0b15 539c ffff     .....I..l....S..
    713c:	ffff ffff bde5 88cb ee94 c74c c34a ed35     ..........L.J.5.
    714c:	e53d b49e f6de 9849 6c89 152e 9c0b ff53     =.....I..l....S.
    715c:	ffff ffff e5ff cbbd 9488 4cee 4ac7 35c3     ...........L.J.5
    716c:	3ded 9ee5 deb4 49f6 8998 2e6c 0b15 539c     .=.....I..l....S
    717c:	ffff ffff ffff bde5 88cb ee94 c74c c34a     ............L.J.
    718c:	ed35 e53d b49e f6de 9849 6c89 152e 9c0b     5.=.....I..l....
    719c:	ff53 ffff ffff e5ff cbbd 9488 4cee 4ac7     S............L.J
    71ac:	35c3 3ded 9ee5 deb4 49f6 8998 2e6c 0b15     .5.=.....I..l...
    71bc:	539c ffff ffff ffff bde5 88cb ee94 c74c     .S............L.
    71cc:	c34a ed35 e53d b49e f6de 9849 6c89 152e     J.5.=.....I..l..
    71dc:	9c0b ff53 ffff ffff e5ff cbbd 9488 4cee     ..S............L
    71ec:	4ac7 35c3 3ded 9ee5 deb4 49f6 8998 2e6c     .J.5.=.....I..l.
    71fc:	0b15 539c ffff ffff ffff bde5 88cb ee94     ...S............
    720c:	c74c c34a ed35 e53d b49e f6de 9849 6c89     L.J.5.=.....I..l
    721c:	152e 9c0b ff53 ffff ffff e5ff cbbd 9488     ....S...........
    722c:	4cee 4ac7 35c3 3ded 9ee5 deb4 49f6 8998     .L.J.5.=.....I..
    723c:	2e6c 0b15 539c ffff ffff ffff bde5 88cb     l....S..........
    724c:	ee94 c74c c34a ed35 e53d b49e f6de 9849     ..L.J.5.=.....I.
    725c:	6c89 152e 9c0b ff53 ffff ffff e5ff cbbd     .l....S.........
    726c:	9488 4cee 4ac7 35c3 3ded 9ee5 deb4 49f6     ...L.J.5.=.....I
    727c:	8998 2e6c 0b15 539c ffff ffff ffff bde5     ..l....S........
    728c:	88cb ee94 c74c c34a ed35 e53d b49e f6de     ....L.J.5.=.....
    729c:	9849 6c89 152e 9c0b ff53 ffff ffff e5ff     I..l....S.......
    72ac:	cbbd 9488 4cee 4ac7 35c3 3ded 9ee5 deb4     .....L.J.5.=....
    72bc:	49f6 8998 2e6c 0b15 539c ffff ffff ffff     .I..l....S......
    72cc:	bde5 88cb ee94 c74c c34a ed35 e53d b49e     ......L.J.5.=...
    72dc:	f6de 9849 6c89 152e 9c0b ff53 ffff ffff     ..I..l....S.....
    72ec:	e5ff cbbd 9488 4cee 4ac7 35c3 3ded 9ee5     .......L.J.5.=..
    72fc:	deb4 49f6 8998 2e6c 0b15 539c ffff ffff     ...I..l....S....
    730c:	ffff bde5 88cb ee94 c74c c34a ed35 e53d     ........L.J.5.=.
    731c:	b49e f6de 9849 6c89 152e 9c0b ff53 ffff     ....I..l....S...
    732c:	ffff e5ff cbbd 9488 4cee 4ac7 35c3 3ded     .........L.J.5.=
    733c:	9ee5 deb4 49f6 8998 2e6c 0b15 539c ffff     .....I..l....S..
    734c:	ffff ffff bde5 88cb ee94 c74c c34a ed35     ..........L.J.5.
    735c:	e53d b49e f6de 9849 6c89 152e 9c0b ff53     =.....I..l....S.
    736c:	ffff ffff e5ff cbbd 9488 4cee 4ac7 35c3     ...........L.J.5
    737c:	3ded 9ee5 deb4 49f6 8998 2e6c 0b15 539c     .=.....I..l....S
    738c:	ffff ffff ffff bde5 88cb ee94 c74c c34a     ............L.J.
    739c:	ed35 e53d b49e f6de 9849 6c89 152e 9c0b     5.=.....I..l....
    73ac:	ff53 ffff ffff e5ff cbbd 9488 4cee 4ac7     S............L.J
    73bc:	35c3 3ded 9ee5 deb4 49f6 8998 2e6c 0b15     .5.=.....I..l...
    73cc:	539c ffff ffff ffff bde5 88cb ee94 c74c     .S............L.
    73dc:	c34a ed35 e53d b49e f6de 9849 6c89 152e     J.5.=.....I..l..
    73ec:	9c0b ff53 ffff ffff e5ff cbbd 9488 4cee     ..S............L
    73fc:	4ac7 35c3 3ded 9ee5 deb4 49f6 8998 2e6c     .J.5.=.....I..l.
    740c:	0b15 539c ffff ffff ffff bde5 88cb ee94     ...S............
    741c:	c74c c34a ed35 e53d b49e f6de 9849 6c89     L.J.5.=.....I..l
    742c:	152e 9c0b ff53 ffff ffff e5ff cbbd 9488     ....S...........
    743c:	4cee 4ac7 35c3 3ded 9ee5 deb4 49f6 8998     .L.J.5.=.....I..
    744c:	2e6c 0b15 539c ffff ffff ffff bde5 88cb     l....S..........
    745c:	ee94 c74c c34a ed35 e53d b49e f6de 9849     ..L.J.5.=.....I.
    746c:	6c89 152e 9c0b ff53 ffff ffff e5ff cbbd     .l....S.........
    747c:	9488 4cee 4ac7 35c3 3ded 9ee5 deb4 49f6     ...L.J.5.=.....I
    748c:	8998 2e6c 0b15 539c ffff ffff ffff bde5     ..l....S........
    749c:	88cb ee94 c74c c34a ed35 e53d b49e f6de     ....L.J.5.=.....
    74ac:	9849 6c89 152e 9c0b ff53 ffff ffff e5ff     I..l....S.......
    74bc:	cbbd 9488 4cee 4ac7 35c3 3ded 9ee5 deb4     .....L.J.5.=....
    74cc:	49f6 8998 2e6c 0b15 539c ffff ffff ffff     .I..l....S......
    74dc:	bde5 88cb ee94 c74c c34a ed35 e53d b49e     ......L.J.5.=...
    74ec:	f6de 9849 6c89 152e 9c0b ff53 ffff ffff     ..I..l....S.....
    74fc:	e5ff cbbd 9488 4cee 4ac7 35c3 3ded 9ee5     .......L.J.5.=..
    750c:	deb4 49f6 8998 2e6c 0b15 539c ffff ffff     ...I..l....S....
    751c:	ffff bde5 88cb ee94 c74c c34a ed35 e53d     ........L.J.5.=.
    752c:	b49e f6de 9849 6c89 152e 9c0b ff53 ffff     ....I..l....S...
    753c:	ffff e5ff cbbd 9488 4cee 4ac7 35c3 3ded     .........L.J.5.=
    754c:	9ee5 deb4 49f6 8998 2e6c 0b15 539c ffff     .....I..l....S..
    755c:	ffff ffff bde5 88cb ee94 c74c c34a ed35     ..........L.J.5.
    756c:	e53d b49e f6de 9849 6c89 152e 9c0b ff53     =.....I..l....S.
    757c:	ffff ffff e5ff cbbd 9488 4cee 4ac7 35c3     ...........L.J.5
    758c:	3ded 9ee5 deb4 49f6 8998 2e6c 0b15 539c     .=.....I..l....S
    759c:	ffff ffff ffff bde5 88cb ee94 c74c c34a     ............L.J.
    75ac:	ed35 e53d b49e f6de 9849 6c89 152e 9c0b     5.=.....I..l....
    75bc:	ff53 ffff ffff e5ff cbbd 9488 4cee 4ac7     S............L.J
    75cc:	35c3 3ded 9ee5 deb4 49f6 8998 2e6c 0b15     .5.=.....I..l...
    75dc:	539c ffff ffff ffff bde5 88cb ee94 c74c     .S............L.
    75ec:	c34a ed35 e53d b49e f6de 9849 6c89 152e     J.5.=.....I..l..
    75fc:	9c0b ff53 ffff ffff ffff ffff ffff ffff     ..S.............
    760c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    761c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    762c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    763c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    764c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    765c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    766c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    767c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    768c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    769c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    76ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    76bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    76cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    76dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    76ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    76fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    770c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    771c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    772c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    773c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    774c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    775c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    776c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    777c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    778c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    779c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    77ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    77bc:	ffff ffff 00f8 0000 0000 ff03 ffff ffff     ................
    77cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    77dc:	ffff ffff f0ff 0000 0000 0100 ffff ffff     ................
    77ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    77fc:	ffff ffff ffff 00e0 0000 0000 ff00 ffff     ................
    780c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    781c:	ffff ffff ffff e1ff ffff ffff f0ff ffff     ................
    782c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    783c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    784c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    785c:	ffff ffff ffff ffff ffe7 ffff ffff ffff     ................
    786c:	7ffc ffff efff ffff ff8f ffff ffff ffff     ................
    787c:	c0ff 031c 3880 3c7f 80ff 0fe3 00f2 00f8     .....8.<........
    788c:	f1f8 011c ffc7 1fcf 63ce ffff ffff ffff     .........c......
    789c:	ffff 0cc7 8e03 7f18 7f3c e31d e60f f900     ........<.......
    78ac:	78fe dcf7 c778 cfff cc8f fffb ffff ffff     .x..x...........
    78bc:	ffff c7ff 7f0c 188f 387e 3d7e 87e3 1fe6     ........~8~=....
    78cc:	fff9 e738 7cfc ffc7 cfc7 ffdc ffff ffff     ..8..|..........
    78dc:	ffff ffff 8cc7 8f7f 7e1c 7e78 e33f e687     .........~x~?...
    78ec:	f91f 18ff fce7 c77c a7ff bcc7 ffff ffff     ......|.........
    78fc:	ffff ffff c7ff 7f8c 1c8f 703e 1f3e c3e3     ..........>p>...
    790c:	1fce fff9 e798 7cfc ffc7 e7b7 ffbc ffff     .......|........
    791c:	ffff ffff ffff 0cc7 8e7f 3c1e 3ef2 e307     ...........<.>..
    792c:	cec3 f91f 98ff fcf1 c778 73ff 7cf3 ff3f     ........x..s.|?.
    793c:	ffff ffff ffff c6ff 030c 3e8c e61c 031f     ...........>....
    794c:	c3e3 009e fff9 f098 717c ffc7 f073 0f7e     ........|q..s.~.
    795c:	ffff ffff ffff ffff 3cc0 8003 19ff 1fe6     .........<......
    796c:	e380 9ee1 f900 98ff 1cfc c703 79fe fff8     .............y..
    797c:	ff83 ffff ffff ffff c7ff 7ffc 7f80 e709     ................
    798c:	c01f e1e3 1f9e fff9 ff98 7f1c fec7 f801     ................
    799c:	e1ff ffff ffff ffff ffff fcc7 887f 097f     ................
    79ac:	0fc0 e3f0 3ef0 f91f 98ff 8cff c77f f8fc     .....>..........
    79bc:	fff8 fff1 ffff ffff ffff c7ff 7ffc 3f8c     ...............?
    79cc:	cf83 f88f f0e3 1f3e fff9 ff18 7fcc fdc7     ......>.........
    79dc:	f8fc f9ff ffff ffff ffff ffff fcc7 8e7f     ................
    79ec:	831f 869f e3f8 7ef8 f91f 38ff ccff c77f     .......~...8....
    79fc:	fcf9 ff78 fff9 ffff ffff ffff c7ff 7ffc     ..x.............
    7a0c:	0f8e 9f87 7886 f8e3 1f7e fef9 ef78 7f9c     .....x..~...x...
    7a1c:	fbc7 78fe f3fd ffff ffff ffff ffff fcc7     ...x............
    7a2c:	8f03 c70f c21f e311 7ef8 f900 f8f8 1ce7     .........~......
    7a3c:	c07f fe33 f838 ffe3 ffff ffff ffff c7ff     ..3.8...........
    7a4c:	03fc 078f 3fc7 03c2 fce3 00fe 03f8 f0f8     .....?..........
    7a5c:	7f7c 33c0 38fe 0ffc ffff ffff ffff ffff     |..3.8..........
    7a6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7a7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7a8c:	ffff ffff ffff ffff ffff ffe3 ffff ffff     ................
    7a9c:	fff8 ffff ffff ffff ffff ffff ffff ffff     ................
    7aac:	ffff ffff ffff ffff ffff e1ff ffff ffff     ................
    7abc:	f0ff ffff ffff ffff ffff ffff ffff ffff     ................
    7acc:	ffff ffff ffff ffff ffff ffff 00e0 0000     ................
    7adc:	0000 ff00 ffff ffff ffff ffff ffff ffff     ................
    7aec:	ffff ffff ffff ffff ffff ffff f0ff 0000     ................
    7afc:	0000 0100 ffff ffff ffff ffff ffff ffff     ................
    7b0c:	ffff ffff ffff ffff ffff ffff ffff 00fe     ................
    7b1c:	0000 0000 ff0f ffff ffff ffff ffff ffff     ................
    7b2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7b3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7b4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7b5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

00007b6c <image_array_270_2>:
    7b6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7b7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7b8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7b9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7bac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7bbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7bcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7bdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7bec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7bfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c2c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7c9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7cac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7cbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7ccc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7cdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7cec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7cfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7d0c:	ffff ffff ffff ffff ffff ffff ffff f1ff     ................
    7d1c:	ffff ff87 ffff ffff 87ff 7ffe ffff ffff     ................
    7d2c:	18fe ff7f ffff fcff ff7f ffff ffff ffff     ................
    7d3c:	3f80 87ff ffff f0ff ffff fc87 ff3f ffff     .?..........?...
    7d4c:	7ee0 7f18 fff0 ffff 0ff0 ffff ffff ffff     .~..............
    7d5c:	00ff ff3f ff87 ffff fff0 87ff 3ffc c3ff     ..?..........?..
    7d6c:	e0ff 187e f07f ffff c0ff ff07 ffff ffff     ..~.............
    7d7c:	feff 3f00 87ff ffff f0ff ffff fe87 ff7f     ...?............
    7d8c:	ffc3 7ec0 7f18 fff0 ffff 03c0 ffff ffff     ...~............
    7d9c:	ffff 1ffc ffff ff87 ffff fff0 87ff ffff     ................
    7dac:	c3ff c0ff 183e f07f ffff 87ff ffc3 ffff     ....>...........
    7dbc:	ffff f8ff fe3f 870f fce0 f067 0fe3 1e87     ....?.....g.....
    7dcc:	0f3f ffc0 3ec4 7f18 e3f0 ff0f c107 1fc6     ?....>..........
    7ddc:	ffe1 ffff 7ff8 03f8 8087 473c e0f0 8607     ..........<G....
    7dec:	3c1c 0003 c4ff 183e f07f 07e0 0fff c0e1     .<....>.........
    7dfc:	800f ff7f f8ff f07f 8703 3c00 f007 03e0     ...........<....
    7e0c:	1c84 0138 ff00 3e86 7f18 e0f0 ff03 e10f     ..8....>........
    7e1c:	07c0 3f00 ffff 7ff8 e1f0 0e87 071c e0f0     ...?............
    7e2c:	8483 383c c3e1 86ff 181e f07f 83e0 0fff     ..<8............
    7e3c:	c1e1 1c07 ff3f f8ff e17f 86f0 0c1f f01f     ....?...........
    7e4c:	c3e1 7c80 f130 ffc3 1e8e 6018 e170 03c3     ...|0......`p...
    7e5c:	e10f 86c3 3f1e ffff 7ff8 f0e1 1f86 3f0c     .....?.........?
    7e6c:	e1f0 80c3 307c c300 00ff 181e 3060 c3e1     ....|0......`0..
    7e7c:	0f01 c3e1 0086 ff1f f8ff e17f 86f0 0c1f     ................
    7e8c:	f03f c3e1 7c80 0030 ffc3 0e00 6018 e130     ?....|0......`0.
    7e9c:	01c3 e10f 86c3 1f00 ffff 3ff8 f0e1 1f86     ...........?....
    7eac:	3f0c e1f0 80c3 303c c3ff 00ff 180e f07f     .?....<0........
    7ebc:	c3e1 07ff c3c1 1f86 ffff fcff f01f 87e1     ................
    7ecc:	1c0e f03f c3e1 1c84 ff30 fec3 0e1f 7f18     ..?.....0.......
    7edc:	e1f0 ffc3 8383 86c3 ff1f ffff 00fe 0170     ..............p.
    7eec:	0087 3f1c e1f0 86c3 381c c001 1ffe 1806     ...?.....8......
    7efc:	f07f c3e1 c0ff c303 0087 ff3f ffff 7800     ..........?....x
    7f0c:	8703 3c80 f03f c3e1 0c86 013c fec0 861f     ...<?.....<.....
    7f1c:	7f18 e1f0 ffc3 07c0 87c3 3f80 ffff 80ff     ...........?....
    7f2c:	077c c087 3f7c e1f0 87c3 3e0c e001 1ffc     |...|?.....>....
    7f3c:	1886 f07f c3e1 f0ff c31f c087 ff3f ffff     ............?...
    7f4c:	ffff ffff ffff ffff ffff fcff ff3f ffff     ............?...
    7f5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7f6c:	ffff ffff ffff ffff ffff ffff 3ffc ffff     .............?..
    7f7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7f8c:	ffff ffff ffff ffff ffff ffff f0ff ff3f     ..............?.
    7f9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7fac:	ffff ffff ffff ffff ffff ffff ffff 7ff0     ................
    7fbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7fcc:	ffff ffff ffff ffff ffff ffff ffff f1ff     ................
    7fdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7fec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    7ffc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    800c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    801c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    802c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    803c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    804c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    805c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    806c:	ffff ffff ffff ffff ffff ffff ffff f9ff     ................
    807c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    808c:	ffff ffff ffff ffff ffff e0ff ffff ffff     ................
    809c:	ffe0 ffff ffff ffff ffff ffff ffff ffff     ................
    80ac:	ffff ffff ffff ffff ffff f8ff 3f00 ffff     .............?..
    80bc:	0eff e13f ffff ffff ffff ffff ffff ffff     ..?.............
    80cc:	ffff ffff ffff ffff ffff fcff cf00 3f0e     ...............?
    80dc:	f0ff 083f 7f00 ffff ffff ffff ffff ffff     ..?.............
    80ec:	ffff ffff ffff ffff ffff ffff 3f00 00e0     .............?..
    80fc:	ff0f ff03 03c0 ff1f ffff ffff ffff ffff     ................
    810c:	ffff ffff ffff ffff ffff ffff 1fe0 f3ff     ................
    811c:	e7c3 1ff0 f0ff c708 ffff ffff ffff ffff     ................
    812c:	ffff ffff ffff ffff ffff ffff e7ff ffff     ................
    813c:	f0fc 01e0 ffff 7efc ff31 ffff ffff ffff     .......~1.......
    814c:	ffff ffff ffff ffff ffff ffff ffff ffe7     ................
    815c:	feff 0038 ff1f ffff 983f ff7f ffff ffff     ..8.....?.......
    816c:	ffff ffff ffff ffff ffff ffff ffff e3ff     ................
    817c:	ffff 9eff cf19 ffff 8fff 1fe6 ffff ffff     ................
    818c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    819c:	ffe1 ffff 84cf ffe3 ffff f9e3 ff87 ffff     ................
    81ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    81bc:	e4ff ff7f e3ff 79c0 ffff f8ff 63fe ffff     .......y.....c..
    81cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    81dc:	ffff 3fe7 ffff f0f9 7f3c ffff 7ffe ff98     ...?....<.......
    81ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    81fc:	ffff e7ff ff9f fcff 0f78 ff3f ffff e61f     ........x.?.....
    820c:	ff3f ffff ffff ffff ffff ffff ffff ffff     ?...............
    821c:	ffff ffff cfe7 ffff 39ff 8fa7 ffff cfff     .........9......
    822c:	8ff1 ffff ffff ffff ffff ffff ffff ffff     ................
    823c:	ffff ffff e7ff ffe7 ffff d183 ffe7 ffff     ................
    824c:	fcef ff63 ffff ffff ffff ffff ffff ffff     ..c.............
    825c:	ffff ffff ffff f3e7 ffff e7ff f1ec ffff     ................
    826c:	e7ff 18ff ffff ffff ffff ffff ffff ffff     ................
    827c:	ffff ffff ffff e7ff fff9 ffff f6f3 ff3c     ..............<.
    828c:	ffff ffe7 7fc4 ffff ffff ffff ffff ffff     ................
    829c:	ffff ffff ffff ffff fce7 ffff f9ff 9efb     ................
    82ac:	ff3f c7ff f7ff ff3f ffff ffff ffff ffff     ?.....?.........
    82bc:	ffff ffff ffff ffff e7ff 7ffe ffff f9fd     ................
    82cc:	9fcf ffff ff8f 3fe7 ffff ffff ffff ffff     .......?........
    82dc:	ffff ffff ffff ffff ffff fff7 ff3f feff     ............?...
    82ec:	f0fc ff07 0ffe ceff ff7f ffff ffff ffff     ................
    82fc:	ffff ffff ffff ffff ffff f7ff 9fff ffff     ................
    830c:	7efe 0180 c0ff fc3f 3f10 ffff ffff ffff     .~....?..?......
    831c:	ffff ffff ffff ffff ffff ffff fff3 ffcf     ................
    832c:	ffff 077e f8e4 ff00 0080 ff3f ffff ffff     ..~.......?.....
    833c:	ffff ffff ffff ffff ffff ffff f1ff e7ff     ................
    834c:	ffff 3fff e63f 0f00 00e0 7f06 ffff ffff     ...??...........
    835c:	ffff ffff ffff ffff ffff ffff ffff fff0     ................
    836c:	fff7 ffff bfbf 00e0 007f 3800 ff7f ffff     ...........8....
    837c:	ffff ffff ffff ffff ffff ffff ffff f2ff     ................
    838c:	f37f ffff 9fff 039e e007 0000 7f02 ffff     ................
    839c:	ffff ffff ffff 1ffc ffff e0ff ffff 7ff0     ................
    83ac:	3ff3 fff9 ffff c0df 7c60 0000 de0f ff7f     .?......`|......
    83bc:	f0ff fc1f 0000 e03f ff03 ffff 1f00 80ff     ......?.........
    83cc:	f31f fd9f f9ff dfff 0fe6 0080 cf00 7f4e     ..............N.
    83dc:	ffff 1fc0 00f8 3f00 0180 ffff 00fc ff0f     .......?........
    83ec:	0f00 cff3 fffc ffe1 f0cf 0170 1e00 ee07     ..........p.....
    83fc:	ff7f 00ff f81f 0000 003f ff00 f8ff 0700     ........?.......
    840c:	00fc f307 fee7 edff cfff 00fc 07d8 0ec8     ................
    841c:	7f06 feff 3f00 00f8 7e00 0000 ff7f 00f0     .....?...~......
    842c:	f803 0700 f3f1 fffe ffe1 ffcf 000f 0018     ................
    843c:	86f0 ff7f 00fc f83f 0000 077c 7fe0 e0ff     ......?...|.....
    844c:	033f 1ef8 f003 fef9 c77f cfff e0ff 0000     ?...............
    845c:	0006 ff82 feff 3f00 ffff fcc0 e00f ff7f     .......?........
    846c:	7fe0 f003 033f fcfa 7fff ffff fcef 0000     ....?...........
    847c:	0000 c006 ffff 30fe ff3f c1ff 1ff8 3ff0     .......0?......?
    848c:	c0ff 81ff 7fe0 fa83 7f7f ff7f efff 0080     ................
    849c:	a807 7802 ff40 feff 3ff0 ffff f881 f01f     ...x@....?......
    84ac:	ff3f ffc0 e081 817f 3ffb 3fbf ffff 01e0     ?........?.?....
    84bc:	bfe0 01c0 04c0 ffff f0ff ff7f 03ff 1ff8     ................
    84cc:	3ff0 c0ff 81ff ffc0 fb81 df9f ff3f 80ff     .?..........?...
    84dc:	e31f 94ff 0001 ffb8 ffcf 7ff0 ffff f003     ................
    84ec:	f03f ff3f ff81 c081 81ff cffb 3fef f0ff     ?.?..........?..
    84fc:	f001 f0f3 0030 8007 9fff f0ff ff7f 07fe     ....0...........
    850c:	3ff0 3ff0 81ff 81ff ffc0 f981 f7e7 ff3f     .?.?..........?.
    851c:	7ee4 7110 7a02 f800 ff00 ff8f 7fe0 fcff     .~.q.z..........
    852c:	f00f f03f ff3f ff81 8181 81ff f3f8 bffb     ..?.?...........
    853c:	0cff 1fc2 7038 0722 3d80 03fe e0ff ff7f     ....8p"..=......
    854c:	0ffc 3ff0 3fe0 81ff 01ff ff81 f883 fd79     ...?.?........y.
    855c:	f0bf c32c 3bbc a0e7 077c f87d ff03 7fe0     ..,..;..|.}.....
    856c:	f8ff f01f e01f ff3f ff80 8101 83ff 3cf9     ......?........<
    857c:	bffe ec03 f863 f239 c021 793f fbf8 e0ff     ....c.9.!.?y....
    858c:	ffff 3ff0 1ff8 7fc0 c0ff 03fe ff03 f903     ...?............
    859c:	7f9e 3f30 7fed fcf8 f030 7f03 f179 ffff     ..0?....0...y...
    85ac:	ffe0 f0ff f83f 0006 ff7f 30c0 0303 03ff     ....?......0....
    85bc:	cff9 873f edff ff7f 03c0 1f00 797f fff1     ..?..........y..
    85cc:	c0ff ffff 7fe0 00f8 7f00 c0ff 0300 ff03     ................
    85dc:	f903 9fe7 ffbf 3fed 02fe 0030 7e3f f179     .......?..0.?~y.
    85ec:	ffff ffc0 c0ff fcff 0000 ffff 00e0 0307     ................
    85fc:	03ff f3f9 bfcf edff c2bf 0006 0700 797e     ..............~y
    860c:	fff0 c0ff ffff ffc0 00fe ff40 f0ff 0702     ..........@.....
    861c:	fe03 f907 e7f9 ffbf 98ed 3e52 0000 7e00     ..........R>...~
    862c:	f879 ff7f ffc1 81ff ffff c080 ffff 06fc     y...............
    863c:	0307 07fe fcf9 9ff3 edff 47db 00e0 1800     ...........G....
    864c:	737e 1ffc c1ff ffff ff01 ffff ff81 ffff     ~s..............
    865c:	0ffc fe03 f907 f9fe ffdf c8ed 007e 0000     ............~...
    866c:	7e0f fe73 ff0f ff81 03ff ffff 01ff ffff     .~s.............
    867c:	f8ff 030f 0ffc fefd df7c edff e0e3 0000     ........|.......
    868c:	0300 f37e 8fff 81ff feff ff07 feff ff03     ..~.............
    869c:	ffff 1ff0 fc03 fd0f 3eff ff5f 78e0 0000     .........>_..x..
    86ac:	3e00 7c01 fff3 ffc7 ff81 07fc ffff 07fc     .>.|............
    86bc:	ffff e0ff 033f 0ffc fffc 189f 873f 000c     ....?.......?...
    86cc:	0300 80ff c379 c7ff 83ff fcff ff0f f8ff     ....y...........
    86dc:	f807 ff7f 3fc0 f803 fc1f cfff 9c81 e00f     .....?..........
    86ec:	0000 ff3f 63e0 ff13 ffc7 ff83 1ff8 ffff     ..?..c..........
    86fc:	0fe0 3ff0 00ff 017f 3ff0 fffe dfe7 efc1     ...?.....?......
    870c:	00e0 ff03 30f8 7300 c7ff 03ff f0ff ff1f     .....0.s........
    871c:	00ff e01f f83f ff00 e081 fe3f f37f dfdf     ....?.....?.....
    872c:	e0ef 3f00 c0ff 013c dff3 ff8f ff03 3ff0     ...?..<........?
    873c:	f0ff 3f00 3fe0 0180 80ff 7f00 3fff dff9     ...?.?.......?..
    874c:	efdf 03e0 fcff ff01 671c 0fc0 03ff e0ff     .........g......
    875c:	ff7f 00f0 e0ff 803f ff07 00c0 ffff fd3f     ......?.......?.
    876c:	dfdf e0ef ff1f 1ff8 c7e7 c027 ff3f ff03     ..........'.?...
    877c:	7fc0 f0ff ff01 3fe0 0f80 e0ff ff01 9fff     .......?........
    878c:	dffe efdf ffe1 1efe fdff 87e1 fff8 07ff     ................
    879c:	c0ff ffff 0ff0 f0ff 807f ff7f 07f0 ffff     ................
    87ac:	fe8f dfdf e7ef fcff f70f f8ff f9e7 ffff     ................
    87bc:	ffff ffff f1ff ffff fff9 ff8f feff ff3f     ..............?.
    87cc:	cfff 5ffe efdf ffe7 3ffe ff7f 31be fff9     ..._.....?...1..
    87dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    87ec:	ffff ffe7 df5f e7ef ffff ffff ffff f908     ...._...........
    87fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    880c:	ffff f3ff 5fff efdf ffe7 ffff efdf c6ef     ....._..........
    881c:	ff7f ffff ffff ffff ffff ffff ffff ffff     ................
    882c:	ffff ffff fff9 df5f e7ef ffff feff ffff     ......_.........
    883c:	1ff1 ffff ffff ffff ffff ffff ffff ffff     ................
    884c:	ffff ffff fcff 5fff efdf ffe7 ff9f ffff     ......._........
    885c:	f8ff ff0f ffff ffff ffff ffff ffff ffff     ................
    886c:	ffff ffff ffff 7ffe df5f e7e7 ffff ffff     ........_.......
    887c:	ffbf 0fbe ffff ffff ffff ffff ffff ffff     ................
    888c:	ffff ffff ffff ffff 5f3f f7df ff87 ffe3     ........?_......
    889c:	ffff ffff ff87 ffff ffff ffff ffff ffff     ................
    88ac:	ffff ffff ffff ffff 9fff df5f 23f0 ffff     .........._..#..
    88bc:	ffff ffff c3e7 ffff ffff ffff ffff ffff     ................
    88cc:	ffff ffff ffff ffff ffff 5f8f fdcf ffe0     ..........._....
    88dc:	fffc ffff ff7f fff0 ffff ffff ffff ffff     ................
    88ec:	ffff ffff ffff ffff ffff cfff e75f 00fe     ............_...
    88fc:	ff7f ff9f fbff fcfc ff7f ffff ffff ffff     ................
    890c:	ffff ffff ffff ffff ffff ffff 5fe7 e0f3     ............._..
    891c:	1f34 7fff ffff dfff 1fff ffff ffff ffff     4...............
    892c:	ffff ffff ffff ffff ffff ffff f3ff f81f     ................
    893c:	1600 ff0f ffe3 fefd ffff ff8f ffff ffff     ................
    894c:	ffff ffff ffff ffff ffff ffff ffff 1ff3     ................
    895c:	03ff 03d7 ffff ffff ffef 1ff8 ffff ffff     ................
    896c:	ffff ffff ffff ffff ffff ffff ffff f9ff     ................
    897c:	f01f d33f ff80 fffc 3fff c0ff ffff ffff     ..?......?......
    898c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    899c:	1ffc 7f80 c091 ff7f fbff feff ff07 ffff     ................
    89ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    89bc:	feff 304f 00df 1fe0 9fff ffff 3ff0 ffff     ..O0.........?..
    89cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    89dc:	ffff 2fff 1068 7008 ff8f fff1 81ff ff1f     .../h..p........
    89ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    89fc:	ffff ffff 400f fc00 6338 e7ff fcff cf0f     .....@..8c......
    8a0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8a1c:	ffff ffff 8fff 0f00 1cfe ff01 ffff ffe0     ................
    8a2c:	c1e7 ffff ffff ffff ffff ffff ffff ffff     ................
    8a3c:	ffff ffff ffff 00c7 ff7f 2c06 ff7f 07ff     ...........,....
    8a4c:	e3ff ff00 ffff ffff ffff ffff ffff ffff     ................
    8a5c:	ffff ffff ffff e0ff ff07 83ff 3f1c f0ff     .............?..
    8a6c:	ff3f 3c00 ffff ffff ffff ffff ffff ffff     ?..<............
    8a7c:	ffff ffff ffff ffff 3ff0 ffff 80c1 ff0f     .........?......
    8a8c:	ff81 60f8 ffe1 ffff ffff ffff ffff ffff     ...`............
    8a9c:	ffff ffff ffff ffff fbff ffff e0ff 038e     ................
    8aac:	0ffc e3ff 8307 ffff ffff ffff ffff ffff     ................
    8abc:	ffff ffff ffff ffff ffff ffff ffff 2ff0     .............../
    8acc:	e001 fe7f 3c10 ff1f ffff ffff ffff ffff     .....<..........
    8adc:	ffff ffff ffff ffff ffff ffff ffff f8ff     ................
    8aec:	c007 ff03 e1f8 ffe0 ffff ffff ffff ffff     ................
    8afc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8b0c:	0ffc 13c0 c3ff 870f ffff ffff ffff ffff     ................
    8b1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8b2c:	feff 011e fef9 3c00 ff1f ffff ffff ffff     .......<........
    8b3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8b4c:	ffff 00ff fc0f c1f8 ffe0 ffff ffff ffff     ................
    8b5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8b6c:	ffff ffff 7fc0 02fe 070f ffff ffff ffff     ................
    8b7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8b8c:	ffff ffff ffff ffff 7c00 ff1f ffff ffff     .........|......
    8b9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8bac:	ffff ffff ffff ffff 83ff ffe0 ffff ffff     ................
    8bbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8bcc:	ffff ffff ffff ffff ffff 070f ffff ffff     ................
    8bdc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8bec:	ffff ffff ffff ffff ffff 3cfe ff3f ffff     ...........<?...
    8bfc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8c0c:	ffff ffff ffff ffff ffff fcff ffe0 ffff     ................
    8c1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8c2c:	ffff ffff ffff ffff ffff ffff 07f8 ffff     ................
    8c3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8c4c:	ffff ffff ffff ffff ffff ffff f0ff ff3f     ..............?.
    8c5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8c6c:	ffff ffff ffff ffff ffff ffff ffff fff8     ................
    8c7c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8c8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8c9c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8cac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8cbc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8ccc:	ffff ffff ffff ffff ffff fdff ffff ffff     ................
    8cdc:	dfff ffff ffff ffff ffff fbff ffff ffff     ................
    8cec:	ffbf ffff ffff ffff feff ff0e fffd ffff     ................
    8cfc:	ffff 8fdf ffff 83ff bfce ffff fffb ffff     ................
    8d0c:	bfff 8f3f bd86 60f8 ffff f7fe fdff ffff     ..?....`........
    8d1c:	ffff dfff ff7f dfff b6fb ffbd fbff ffff     ................
    8d2c:	ffff dfbe bef7 f7bd 7fef 3efe e6fa 0d9d     ...........>....
    8d3c:	4cdf 703a 7ddf 1c22 f70f b8b6 bbc3 7e9a     .L:p.}"........~
    8d4c:	7498 bee1 f7df bdbe efef febf fa3e 6dde     .t..........>..m
    8d5c:	bff6 d937 5faf ddbc dfed cff7 bdfd 79ba     ..7.._.........y
    8d6c:	6fbe 5eb3 3fbf 8fcf effd bfef 3efe cefa     .o.^.?.......>..
    8d7c:	86ed 76bf a01b dd5f 0ddd efdf fdb7 babd     ...v.._.........
    8d8c:	befb 37ec be40 e7b7 fdf7 efef ffbf fafe     ...7@...........
    8d9c:	edf6 bf76 db75 dfaf dced dfed 7bef bdfd     ..v.u........{..
    8dac:	fbba ebbe 5fb7 cfbd f7f7 effd bfef feff     ....._..........
    8dbc:	f6e6 77ed 753f b7db eddf eddc dfdf fd7b     ...w?u........{.
    8dcc:	b2b9 be7b b7eb bd6f f6cf fdf7 eef7 ff7f     ..{...o.........
    8ddc:	1efe 1dce 7f87 1b0e 5fb8 dd1d ef0d 879f     ........._......
    8dec:	c7fe 9bcb 1cbe 7037 27be 0f0e 38fc ff61     ......7p.'...8a.
    8dfc:	ffff feff ffff 7f7f ffff ffff ffff ffff     ................
    8e0c:	ffff ffff feff ffff ffff ffff ffff ffff     ................
    8e1c:	ffff ffff fffe fffe ff7f ffff ffff ffff     ................
    8e2c:	ffff ffff ffff fffe ffff ffff ffff ffff     ................
    8e3c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8e4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8e5c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8e6c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8e7c:	ffff ffff ffff ffff ffff ffef ffff ffff     ................
    8e8c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8e9c:	ffff ffff ffff ffff ff7f ffff fdff ffff     ................
    8eac:	ffff fffb fffb ffff ffff ffff feff ffff     ................
    8ebc:	ffff ffff ffbe 1ffe 7ffb ffef bfff fffd     ................
    8ecc:	ffff fbff fbe1 ffff ffff ffff ffff fbfe     ................
    8edc:	fdff ffe1 bebf c6ff ffef ff6f ffff fdff     ..........o.....
    8eec:	ffff ffff effb ffbb ffff ffef fffe feff     ................
    8efc:	ffff deff ffff ffbe edc6 47db 3eed b1ed     ...........G.>..
    8f0c:	870d e139 cbd3 1aef c570 4738 84d3 b05d     ..9.....p.8G..].
    8f1c:	dbe2 2f4f 5dbf b6b9 c6bb db1d ec6f cdde     ..O/.]......o...
    8f2c:	f5b6 f77a cdfe e133 afb9 d75c cdaf d97a     ..z...3...\...z.
    8f3c:	6eaf 34bb bfcf a75d d7ae edfe 6cdb df6d     .n.4..]......lm.
    8f4c:	b64b 0205 f073 7bdd bbef 5da0 2fd0 02dd     K...s..{...]./..
    8f5c:	6fe9 7b6e ef75 5dbf 9eaf fed7 dbed ed6f     .on{u..]......o.
    8f6c:	2bdf fdb6 bd7f ddee ef7b afbb d7dd ddef     .+......{.......
    8f7c:	e57e 6e6f 75bb bfef af5d d7ae edfe 6f9b     ~.on.u..]......o
    8f8c:	dfed b733 bf7d eebd 73dd bbef ddb7 efdb     ..3.}....s......
    8f9c:	bedd 6ee6 db6e cf75 d9de b6a7 fee7 5b1e     ...nn.u........[
    8fac:	ed77 b7df 85b7 73c2 ddf0 e18b b8db dc5d     w......s......].
    8fbc:	dd37 76c3 eef1 76cb e12f b9e5 efb2 ffff     7..v...v/.......
    8fcc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8fdc:	ffff ffff ffff ffff efff 7ffe ffff ffef     ................
    8fec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    8ffc:	ffff ffff ffff ffff fcff ff1f ffff dfff     ................
    900c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    901c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    902c:	ffbf ffff ffff ffff ffff ffff ffff ffff     ................
    903c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    904c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    905c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    906c:	ffff ffff ffff ffff ffff ffff f3ff ffff     ................
    907c:	ffff ffff ffff fbef fbff ffff ffff ffff     ................
    908c:	ffff ffff ffff ffff ffff ffff ffdf ffef     ................
    909c:	ffff ffff ffff efff ffdb fffb fff7 ffff     ................
    90ac:	ffff ffff ffff ffff ffff ffff ffff eff7     ................
    90bc:	ffff ffff ffff ffff fbef fbff ffff ffff     ................
    90cc:	ffff ffff ffff ffff ffff ffff 9cfe 635a     ..............Zc
    90dc:	21c6 3dd2 77d8 d263 e930 0fdb 0bcb 30b7     .!.=.wc.0......0
    90ec:	ffff ffff ffff ffff ffff ffff 1eff d96d     ..............m.
    90fc:	eeb7 cdde b7de 6fb7 cfcd da66 32f7 74f5     .......o..f..2.t
    910c:	7fef ffff ffff ffff ffff ffff ffff ed1e     ................
    911c:	b7db deee dedd b7b7 dd6f 6ecf 07da 057a     ........o..n..z.
    912c:	e075 ff7f ffff ffff ffff ffff ffff 1eff     u...............
    913c:	dbed eeb7 ddde b7de 6fb7 cfdd da6e 7aff     .........o..n..z
    914c:	75fd ffef ffff ffff ffff ffff ffff ffff     .u..............
    915c:	edfe b7db dcee dfdd 3637 dd6f 6ece 7fdb     ........76o..n..
    916c:	7d73 f774 ffff ffff ffff ffff ffff ffff     s}t.............
    917c:	feff db1d eebb dde3 78df 6ff9 d1dd dbe1     .........x.o....
    918c:	8b87 f786 7f38 ffff ffff ffff ffff ffff     ....8...........
    919c:	ffff fffe ffff ffff ffff ff7f ffff ffff     ................
    91ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    91bc:	ffff feff ffff ffff ffff fffe ffff ffff     ................
    91cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    91dc:	ffff ffff ffff ffff ffff fdff ffff ffff     ................
    91ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    91fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    920c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
    921c:	4b4e 0000 4bcc 0000 4bcc 0000 4b72 0000     NK...K...K..rK..
    922c:	4b6c 0000 4b78 0000 4b54 0000 4b7e 0000     lK..xK..TK..~K..
    923c:	4bb2 0000 4d64 0000 4db4 0000 4db4 0000     .K..dM...M...M..
    924c:	4db0 0000 4d56 0000 4d76 0000 4d46 0000     .M..VM..vM..FM..
    925c:	4d88 0000 4d9a 0000 4e02 0000 4e30 0000     .M...M...N..0N..
    926c:	4e30 0000 4e2c 0000 4dfc 0000 4e08 0000     0N..,N...M...N..
    927c:	4df6 0000 4e0e 0000 4e14 0000 5a5c 0000     .M...N...N..\Z..
    928c:	5a0e 0000 5a3c 0000 5996 0000 5a3c 0000     .Z..<Z...Y..<Z..
    929c:	5a32 0000 5a3c 0000 5996 0000 5a0e 0000     2Z..<Z...Y...Z..
    92ac:	5a0e 0000 5a32 0000 5996 0000 598e 0000     .Z..2Z...Y...Y..
    92bc:	598e 0000 598e 0000 5a42 0000 5c84 0000     .Y...Y..BZ...\..
    92cc:	5c7e 0000 5c7e 0000 5c74 0000 5bd4 0000     ~\..~\..t\...[..
    92dc:	5bd4 0000 5c6a 0000 5c74 0000 5bd4 0000     .[..j\..t\...[..
    92ec:	5c6a 0000 5bd4 0000 5c74 0000 5bd2 0000     j\...[..t\...[..
    92fc:	5bd2 0000 5bd2 0000 5d0c 0000               .[...[...]..

00009308 <_init>:
    9308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    930a:	46c0      	nop			; (mov r8, r8)
    930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    930e:	bc08      	pop	{r3}
    9310:	469e      	mov	lr, r3
    9312:	4770      	bx	lr

00009314 <__init_array_start>:
    9314:	000000d9 	.word	0x000000d9

00009318 <_fini>:
    9318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    931a:	46c0      	nop			; (mov r8, r8)
    931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    931e:	bc08      	pop	{r3}
    9320:	469e      	mov	lr, r3
    9322:	4770      	bx	lr

00009324 <__fini_array_start>:
    9324:	000000b1 	.word	0x000000b1
